<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://hening25.gitee.io</id>
    <title>Hny</title>
    <subtitle>终有弱水替沧海 再无相思寄巫山</subtitle>
    <icon>http://hening25.gitee.io/images/favicon.ico</icon>
    <link href="http://hening25.gitee.io" />
    <author>
      <name>Hening</name>
    </author>
    <updated>2025-08-14T16:00:00.000Z</updated>
    <category term="控制" />
    <category term="深度学习" />
    <category term="人工智能" />
    <category term="锂电池" />
    <category term="" />
    <entry>
        <id>http://hening25.gitee.io/2025/08/15/2025-08-15-Leetcode/</id>
        <title>Leetcode刷题记录</title>
        <link rel="alternate" href="http://hening25.gitee.io/2025/08/15/2025-08-15-Leetcode/"/>
        <content type="html">&lt;p&gt;Leetcode刷题记录&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h1 id=&#34;Leetcode刷题&#34;&gt;&lt;a href=&#34;#Leetcode刷题&#34; class=&#34;headerlink&#34; title=&#34;Leetcode刷题&#34;&gt;&lt;/a&gt;Leetcode刷题&lt;/h1&gt;&lt;h2 id=&#34;数组-字符串&#34;&gt;&lt;a href=&#34;#数组-字符串&#34; class=&#34;headerlink&#34; title=&#34;数组&amp;#x2F;字符串&#34;&gt;&lt;/a&gt;数组&amp;#x2F;字符串&lt;/h2&gt;&lt;h3 id=&#34;1071-字符串的最大公因子&#34;&gt;&lt;a href=&#34;#1071-字符串的最大公因子&#34; class=&#34;headerlink&#34; title=&#34;1071. 字符串的最大公因子&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9ncmVhdGVzdC1jb21tb24tZGl2aXNvci1vZi1zdHJpbmdzLw==&#34;&gt;1071. 字符串的最大公因子&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;对于字符串 &lt;code&gt;s&lt;/code&gt; 和 &lt;code&gt;t&lt;/code&gt;，只有在 &lt;code&gt;s = t + t + t + ... + t + t&lt;/code&gt;（&lt;code&gt;t&lt;/code&gt; 自身连接 1 次或多次）时，我们才认定 “&lt;code&gt;t&lt;/code&gt; 能除尽 &lt;code&gt;s&lt;/code&gt;”。&lt;/p&gt;
&lt;p&gt;给定两个字符串 &lt;code&gt;str1&lt;/code&gt; 和 &lt;code&gt;str2&lt;/code&gt; 。返回 &lt;em&gt;最长字符串 &lt;code&gt;x&lt;/code&gt;，要求满足 &lt;code&gt;x&lt;/code&gt; 能除尽 &lt;code&gt;str1&lt;/code&gt; 且 &lt;code&gt;x&lt;/code&gt; 能除尽 &lt;code&gt;str2&lt;/code&gt;&lt;/em&gt; 。&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;若两个字符串是由同一个字符串 X重复拼接而成，那么无论先拼哪个，结果应该相同。&lt;br&gt;如果 str1 + str2 !&amp;#x3D; str2 +str1，说明不存在公共的重复因子，直接返回空串 “”。&lt;br&gt;如果两个字符串都是由同一个字符串 X 组成，那么 X 的长度必然是str1.size()和 str2.size() 的最大公约数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution:
    def gcdOfStrings(self, str1: str, str2: str) -&amp;gt; str:
        if not str1 + str2 == str2 + str1:
            return &amp;quot;&amp;quot;
        return str1[0:self.gcd(len(str1), len(str2))]
    
    def gcd(self, a,b):
        if b == 0: return a
        else: return gcd(b, a%b)
    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者：Random&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9ncmVhdGVzdC1jb21tb24tZGl2aXNvci1vZi1zdHJpbmdzL3NvbHV0aW9ucy8zNzQ5ODkxL3NodS14dWUtenVpLWRhLWdvbmcteXVlLXNodS1ieS1jb2Rlci1yYW4tYTg4dS8=&#34;&gt;https://leetcode.cn/problems/greatest-common-divisor-of-strings/solutions/3749891/shu-xue-zui-da-gong-yue-shu-by-coder-ran-a88u/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;605-种花问题&#34;&gt;&lt;a href=&#34;#605-种花问题&#34; class=&#34;headerlink&#34; title=&#34;605. 种花问题&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9jYW4tcGxhY2UtZmxvd2Vycy8=&#34;&gt;605. 种花问题&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;假设有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花不能种植在相邻的地块上，它们会争夺水源，两者都会死去。&lt;/p&gt;
&lt;p&gt;给你一个整数数组 &lt;code&gt;flowerbed&lt;/code&gt; 表示花坛，由若干 &lt;code&gt;0&lt;/code&gt; 和 &lt;code&gt;1&lt;/code&gt; 组成，其中 &lt;code&gt;0&lt;/code&gt; 表示没种植花，&lt;code&gt;1&lt;/code&gt; 表示种植了花。另有一个数 &lt;code&gt;n&lt;/code&gt; ，能否在不打破种植规则的情况下种入 &lt;code&gt;n&lt;/code&gt; 朵花？能则返回 &lt;code&gt;true&lt;/code&gt; ，不能则返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;从左到右遍历数组，能种花就立刻种花。&lt;/p&gt;
&lt;p&gt;如何判断能否种花？由于「花不能种植在相邻的地块上」，如果要在下标 i 处种花，需要满足 flowerbed[i−1],flowerbed[i],flowerbed[i+1] 均为 0。&lt;/p&gt;
&lt;p&gt;每种一朵花，就把 n 减一。如果最后 n≤0，则返回 true，否则返回 false。&lt;/p&gt;
&lt;p&gt;为了简化判断逻辑，可以在数组的开头和末尾各插入一个 0。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution:
    def canPlaceFlowers(self, flowerbed: List[int], n: int) -&amp;gt; bool:
      nums = len(flowerbed)
      new_flowerbed = [0] + flowerbed + [0]
      for i in range(1,len(new_flowerbed)-1):
        if new_flowerbed[i-1] == 0 and new_flowerbed[i+1] == 0 and new_flowerbed[i] == 0:
          new_flowerbed[i] = 1
          n -= 1
      return n &amp;lt;= 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者：灵茶山艾府&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9jYW4tcGxhY2UtZmxvd2Vycy9zb2x1dGlvbnMvMjQ2MzAxOC9iZW4tdGktenVpLWppYW4tZGFuLXhpZS1mYS1weXRob25qYXZhY2dvLTZhNmsv&#34;&gt;https://leetcode.cn/problems/can-place-flowers/solutions/2463018/ben-ti-zui-jian-dan-xie-fa-pythonjavacgo-6a6k/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;334-递增的三元子序列&#34;&gt;&lt;a href=&#34;#334-递增的三元子序列&#34; class=&#34;headerlink&#34; title=&#34;334. 递增的三元子序列&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9pbmNyZWFzaW5nLXRyaXBsZXQtc3Vic2VxdWVuY2Uv&#34;&gt;334. 递增的三元子序列&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;给你一个整数数组 &lt;code&gt;nums&lt;/code&gt; ，判断这个数组中是否存在长度为 &lt;code&gt;3&lt;/code&gt; 的递增子序列。&lt;/p&gt;
&lt;p&gt;如果存在这样的三元组下标 &lt;code&gt;(i, j, k)&lt;/code&gt; 且满足 &lt;code&gt;i &amp;lt; j &amp;lt; k&lt;/code&gt; ，使得 &lt;code&gt;nums[i] &amp;lt; nums[j] &amp;lt; nums[k]&lt;/code&gt; ，返回 &lt;code&gt;true&lt;/code&gt; ；否则，返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;;;;id1 巧解&lt;/p&gt;
&lt;p&gt;核心想法：遍历一遍数组，希望遍历到的这个数three，前面已经有一个比他小的数two，再前面有一个比two小的数one。&lt;br&gt;我们需要维护两个变量：one和two。代表递增子序列的第一个数和第二个数。&lt;br&gt;假设我们已经有了这两个数，那么three的大小有以下三种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;three大于two&lt;/strong&gt;    此情况下：即找到了三元组，直接返回true。&lt;/p&gt;
&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/334-01.png&#34; class=&#34;&#34; width=&#34;300&#34;&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;three介于two和one之间&lt;/strong&gt;     此情况下：应更新two，赋值为这个更小的值。这相当于帮我们扩大了three的可选择范围，当再次遇到一个比更新过的two大的数即可找到。&lt;/p&gt;
&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/334-02.png&#34; class=&#34;&#34; width=&#34;300&#34;&gt;

&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/334-03.png&#34; class=&#34;&#34; width=&#34;300&#34;&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;three小于one&lt;/strong&gt;     此情况下：应更新one，赋值为这个更小的值。而不需要动two。这相当于帮我们扩大了之后出现的two的可选择范围。进而扩大了之后出现的three的可选择范围。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/334-04.png&#34; class=&#34;&#34; width=&#34;300&#34;&gt;

&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/334-05.png&#34; class=&#34;&#34; width=&#34;300&#34;&gt;

&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/334-06.png&#34; class=&#34;&#34; width=&#34;300&#34;&gt;

&lt;p&gt;需要注意的是，我们只更新one，原先的two不需要更改，因为子序列是从前往后的，只有当之后再出现比two小的数的时候再按照第二步那样更改。&lt;/p&gt;
&lt;p&gt;假设有如下示例：[2,5,1,6]，在遇到1之后更新了one，后遇到6，因为先判断是否大于two，由于6大于5，就直接返回true了。&lt;/p&gt;
&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/334-07.png&#34; class=&#34;&#34; width=&#34;300&#34;&gt;

&lt;p&gt;注意：two附带隐含信息——这之前有个数比two小&lt;br&gt;所以此时找到的递增子序列不是one、two、three的1 5 6，而是old one、two、three的2 5 6。&lt;/p&gt;
&lt;p&gt;这里更新的one的意思是，为之后可能存在的更小的递增子序列打基础。&lt;br&gt;假设有如下示例：[2,5,1,2,6]，在遇到1之后更新了one，后遇到2，2介于1和5（two）之间，更新two为2，后遇到6，由于6大于2，返回true。&lt;br&gt;此时找到的递增子序列才是one、two、three的1 2 6&lt;/p&gt;
&lt;p&gt;最后考虑one、two的初值，容易想到设定为Integer.MAX_VALUE即可。&lt;/p&gt;
&lt;p&gt;作者：Xzz&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9pbmNyZWFzaW5nLXRyaXBsZXQtc3Vic2VxdWVuY2Uvc29sdXRpb25zLzUzNTcyNS9wb3UteGktYmVuLXpoaS15aS13ZW4tYmFuZy1uaS1rYW4tcWluZy10LTN5ZTIv&#34;&gt;https://leetcode.cn/problems/increasing-triplet-subsequence/solutions/535725/pou-xi-ben-zhi-yi-wen-bang-ni-kan-qing-t-3ye2/&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution:
    def increasingTriplet(self, nums: List[int]) -&amp;gt; bool:
      one, two = inf, inf
      for three in nums:
        if three &amp;gt; two : return True
        elif three &amp;lt;= one: one = three
        else: two = three
      return False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++info 解析（GPT）&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;1. 递增三元组的性质&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假设数组中存在递增三元组 &lt;code&gt;a &amp;lt; b &amp;lt; c&lt;/code&gt;，它们的顺序在数组中是 &lt;strong&gt;前后顺序&lt;/strong&gt;，我们只关心：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个数最小&lt;/li&gt;
&lt;li&gt;第二个数比第一个数大&lt;/li&gt;
&lt;li&gt;第三个数比第二个数大&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;关键点&lt;/strong&gt;：我们不需要知道三元组具体位置，只需要保证存在。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;2. one 和 two 的作用&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;one&lt;/code&gt;：当前找到的&lt;strong&gt;最小的候选第一个数&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;two&lt;/code&gt;：在 &lt;code&gt;one&lt;/code&gt; 之后，找到的&lt;strong&gt;最小的候选第二个数&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;核心思想&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们并不是在找数组中所有可能的三元组，而是在&lt;strong&gt;维护最优候选序列&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;“最优候选”意味着 &lt;strong&gt;尽可能小的 one 和 two&lt;/strong&gt;，这样可以最大化出现第三个数 three 的机会。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;换句话说：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;遍历到一个数 three：&lt;ul&gt;
&lt;li&gt;如果 three &amp;gt; two → 说明找到了一个合法三元组（不管前面 one&amp;#x2F;two 是不是更新过的，都会形成合法的递增序列）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果 three &amp;lt;&amp;#x3D; one → 更新 one&lt;ul&gt;
&lt;li&gt;因为这个更小的 one 可以为之后出现的 two 提供更多可能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;否则 → 更新 two&lt;ul&gt;
&lt;li&gt;因为这个更小的 two 可以为之后出现的 three 提供更多可能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; &lt;strong&gt;3. 为什么不会漏掉任何情况&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假设数组中有递增三元组 &lt;code&gt;x &amp;lt; y &amp;lt; z&lt;/code&gt;，为什么算法一定能找到它？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当我们遍历到 x：&lt;ul&gt;
&lt;li&gt;one 会被更新为 ≤ x&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当我们遍历到 y：&lt;ul&gt;
&lt;li&gt;two 会被更新为 ≤ y&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当我们遍历到 z：&lt;ul&gt;
&lt;li&gt;如果 z &amp;gt; two → 返回 True&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;关键点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;即使 one&amp;#x2F;two 被后面更小的数更新过，&lt;strong&gt;old one&amp;#x2F;two 仍然保留了前序信息&lt;/strong&gt;，保证当前 three 大于某个二元组时，必然能形成递增三元组。&lt;/li&gt;
&lt;li&gt;换句话说，one&amp;#x2F;two 是动态维护的 &lt;strong&gt;最小可能序列候选&lt;/strong&gt;，任何真正存在的递增三元组都会被捕获。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;;;;id1 常规&lt;/p&gt;
&lt;p&gt;常规解法&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2 id=&#34;滑动窗口&#34;&gt;&lt;a href=&#34;#滑动窗口&#34; class=&#34;headerlink&#34; title=&#34;滑动窗口&#34;&gt;&lt;/a&gt;滑动窗口&lt;/h2&gt;&lt;h3 id=&#34;1208-尽可能使字符串相等&#34;&gt;&lt;a href=&#34;#1208-尽可能使字符串相等&#34; class=&#34;headerlink&#34; title=&#34;1208. 尽可能使字符串相等&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9nZXQtZXF1YWwtc3Vic3RyaW5ncy13aXRoaW4tYnVkZ2V0Lw==&#34;&gt;1208. 尽可能使字符串相等&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;给你两个长度相同的字符串，&lt;code&gt;s&lt;/code&gt; 和 &lt;code&gt;t&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;将 &lt;code&gt;s&lt;/code&gt; 中的第 &lt;code&gt;i&lt;/code&gt; 个字符变到 &lt;code&gt;t&lt;/code&gt; 中的第 &lt;code&gt;i&lt;/code&gt; 个字符需要 &lt;code&gt;|s[i] - t[i]|&lt;/code&gt; 的开销（开销可能为 0），也就是两个字符的 ASCII 码值的差的绝对值。&lt;/p&gt;
&lt;p&gt;用于变更字符串的最大预算是 &lt;code&gt;maxCost&lt;/code&gt;。在转化字符串时，总开销应当小于等于该预算，这也意味着字符串的转化可能是不完全的。&lt;/p&gt;
&lt;p&gt;如果你可以将 &lt;code&gt;s&lt;/code&gt; 的子字符串转化为它在 &lt;code&gt;t&lt;/code&gt; 中对应的子字符串，则返回可以转化的最大长度。&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;s&lt;/code&gt; 中没有子字符串可以转化成 &lt;code&gt;t&lt;/code&gt; 中对应的子字符串，则返回 &lt;code&gt;0&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;+++info 示例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;abcd&amp;quot;, t = &amp;quot;bcdf&amp;quot;, maxCost = 3
输出：3
解释：s 中的 &amp;quot;abc&amp;quot; 可以变为 &amp;quot;bcd&amp;quot;。开销为 3，所以最大长度为 3。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;abcd&amp;quot;, t = &amp;quot;cdef&amp;quot;, maxCost = 3
输出：1
解释：s 中的任一字符要想变成 t 中对应的字符，其开销都是 2。因此，最大长度为 1。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;abcd&amp;quot;, t = &amp;quot;acde&amp;quot;, maxCost = 0
输出：1
解释：a -&amp;gt; a, cost = 0，字符串未发生变化，所以最大长度为 1。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;两个长度相等字符串的 s 和 t ，把 i 位置的 s[i] 转成 t[i] 的开销是两者 ASCII 码之差的绝对值。题目给出了允许的最大预算 maxCost ，求不超过预算的情况下能够转换的最长子串。&lt;/p&gt;
&lt;p&gt;比如，对于 s &amp;#x3D; “abcd”, t &amp;#x3D; “bcdf”, cost &amp;#x3D; 3 而言，我们使用 costs[i] 表示从 s[i]  转成 t[i] 的开销，那么 costs &amp;#x3D; [1, 1, 1, 2] 。由于 maxCost &amp;#x3D; 3， 所以最多允许其前面三个字符进行转换。&lt;/p&gt;
&lt;p&gt;于是题目变成了：&lt;strong&gt;已知一个数组 costs ，求：和不超过 maxCost 时最长的子数组的长度&lt;/strong&gt;。&lt;/p&gt;
&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/1208-01.png&#34; class=&#34;&#34; width=&#34;300&#34;&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution:
    def equalSubstring(self, s: str, t: str, maxCost: int) -&amp;gt; int:
        n = len(s)
        left, right = 0, 0
        result = 0
        cost = 0
        while right &amp;lt; n:
            cost += abs(ord(s[right]) - ord(t[right]))
            while cost &amp;gt; maxCost:
                cost -= abs(ord(s[left]) - ord(t[left]))
                left += 1
                
            result = max(result, right - left + 1)
            right += 1
        return result
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;《挑战程序设计竞赛》这本书中把滑动窗口叫做「虫取法」，我觉得非常生动形象。因为滑动窗口的两个指针移动的过程和虫子爬动的过程非常像：前脚不动，把后脚移动过来；后脚不动，把前脚向前移动。&lt;/p&gt;
&lt;p&gt;+++info 滑动窗口问题模板&lt;/p&gt;
&lt;p&gt;我分享一个滑动窗口的模板，能解决大多数的滑动窗口问题（&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9tYXgtY29uc2VjdXRpdmUtb25lcy1paWkv&#34;&gt;1004. 最大连续1的个数 III&lt;/span&gt;，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9sb25nZXN0LXJlcGVhdGluZy1jaGFyYWN0ZXItcmVwbGFjZW1lbnQv&#34;&gt;424. 替换后的最长重复字符&lt;/span&gt;）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def findSubArray(nums):
    N = len(nums) # 数组/字符串长度
    left, right = 0, 0 # 双指针，表示当前遍历的区间[left, right]，闭区间
    sums = 0 # 用于统计 子数组/子区间 是否有效，根据题目可能会改成求和/计数
    res = 0 # 保存最大的满足题目要求的 子数组/子串 长度
    while right &amp;lt; N: # 当右边的指针没有搜索到 数组/字符串 的结尾
        sums += nums[right] # 增加当前右边指针的数字/字符的求和/计数
        while 区间[left, right]不符合题意：# 此时需要一直移动左指针，直至找到一个符合题意的区间
            sums -= nums[left] # 移动左指针前需要从counter中减少left位置字符的求和/计数
            left += 1 # 真正的移动左指针，注意不能跟上面一行代码写反
        # 到 while 结束时，我们找到了一个符合题意要求的 子数组/子串
        res = max(res, right - left + 1) # 需要更新结果
        right += 1 # 移动右指针，去探索新的区间
    return res
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;滑动窗口中用到了左右两个指针，它们移动的思路是：以右指针作为驱动，拖着左指针向前走。右指针每次只移动一步，而左指针在内部 while 循环中每次可能移动多步。右指针是主动前移，探索未知的新区域；左指针是被迫移动，负责寻找满足题意的区间。&lt;/p&gt;
&lt;p&gt;模板的整体思想是：&lt;/p&gt;
&lt;p&gt;定义两个指针 left 和 right 分别指向区间的开头和结尾，注意是闭区间；定义 sums 用来统计该区间内的各个字符出现次数；&lt;br&gt;第一重 while 循环是为了判断 right 指针的位置是否超出了数组边界；当 right 每次到了新位置，需要增加 right 指针的求和&amp;#x2F;计数；&lt;br&gt;第二重 while 循环是让 left 指针向右移动到 [left, right] 区间符合题意的位置；当 left 每次移动到了新位置，需要减少 left 指针的求和&amp;#x2F;计数；&lt;br&gt;在第二重 while 循环之后，成功找到了一个符合题意的 [left, right] 区间，题目要求最大的区间长度，因此更新 res 为 max(res, 当前区间的长度) 。&lt;br&gt;right 指针每次向右移动一步，开始探索新的区间。&lt;br&gt;模板中的 sums 需要根据题目意思具体去修改，本题是求和题目因此把sums 定义成整数用于求和；如果是计数题目，就需要改成字典用于计数。当左右指针发生变化的时候，都需要更新 sums 。&lt;/p&gt;
&lt;p&gt;另外一个需要根据题目去修改的是内层 while 循环的判断条件，即： 区间[left, right]不符合题意 。对于本题而言，就是该区内的和 sums 超过了 maxCost 。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;作者：负雪明烛&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9nZXQtZXF1YWwtc3Vic3RyaW5ncy13aXRoaW4tYnVkZ2V0L3NvbHV0aW9ucy81OTIzNTQvZmVuLXhpYW5nLXpoZW4tY2FuZy1kZS1odWEtZG9uZy1jaHVhbmctay1lM3JkLw==&#34;&gt;https://leetcode.cn/problems/get-equal-substrings-within-budget/solutions/592354/fen-xiang-zhen-cang-de-hua-dong-chuang-k-e3rd/&lt;/span&gt;&lt;br&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;424-替换后的最长重复字符&#34;&gt;&lt;a href=&#34;#424-替换后的最长重复字符&#34; class=&#34;headerlink&#34; title=&#34;424. 替换后的最长重复字符&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9sb25nZXN0LXJlcGVhdGluZy1jaGFyYWN0ZXItcmVwbGFjZW1lbnQv&#34;&gt;424. 替换后的最长重复字符&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;给你一个字符串 &lt;code&gt;s&lt;/code&gt; 和一个整数 &lt;code&gt;k&lt;/code&gt; 。你可以选择字符串中的任一字符，并将其更改为任何其他大写英文字符。该操作最多可执行 &lt;code&gt;k&lt;/code&gt; 次。&lt;/p&gt;
&lt;p&gt;在执行上述操作后，返回 &lt;em&gt;包含相同字母的最长子字符串的长度。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;+++info 示例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;ABAB&amp;quot;, k = 2
输出：4
解释：用两个&amp;#39;A&amp;#39;替换为两个&amp;#39;B&amp;#39;,反之亦然。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;AABABBA&amp;quot;, k = 1
输出：4
解释：
将中间的一个&amp;#39;A&amp;#39;替换为&amp;#39;B&amp;#39;,字符串变为 &amp;quot;AABBBBA&amp;quot;。
子串 &amp;quot;BBBB&amp;quot; 有最长重复字母, 答案为 4。
可能存在其他的方法来得到同样的结果。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;本题解根据常规的滑动窗口思路进行解题，不需要任何的技巧。&lt;br&gt;滑动窗口法是指通过Left以及Right指针来框定一个窗口，当在窗口内的字符串满足题目要求则记录下当前窗口长度并进一步扩张寻找更长的窗口，若不满足则进行窗口平移。&lt;br&gt;题目中给定的K值是让我们在选定有效窗口时的要求放宽了：&lt;/p&gt;
&lt;p&gt;当K&amp;#x3D;0时，要求滑动窗口内部的所有字母都必须相同；&lt;br&gt;而当K&amp;gt;0时，要求滑动窗口内最多替换K次使得所有字母都必须相同。这里有一个关键点，即我们将当前滑动窗口内出现次数最多的字母作为基准字母（Benchmark），那么其他不一样的字母(Others)都选择替换操作即可以最小的代价转换为全部相同的字母。&lt;br&gt;因此，我们首先通过一个数组(count)记录所有字母在当前窗口出现的次数，通过Max函数选择窗口内的基准字母，然后其他字母出现的次数为Sum(count)-Max(count)，通过与K进行比较，即可知道当前窗口是否有效，下一步是继续扩张还是位移。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution:
    def characterReplacement(self, s: str, k: int) -&amp;gt; int:
        count = [0 for _ in range(26)]  #记录当前窗口的字母出现次数
        
        left = 0    #滑动窗口左边界
        right = 0   #滑动窗口右边界
        retval = 0  #最长窗口长度
        
        while right &amp;lt; len(s):
            count[ord(s[right])-ord(&amp;#39;A&amp;#39;)] += 1  
            benchmark = max(count)              #选择出现次数最多的字母为基准 
            others = sum(count) - benchmark     #则其他字母需要通过替换操作来变为基准
            if others &amp;lt;= k:                     #通过与K进行比较来判断窗口是进行扩张？
                right += 1
                retval = max(retval, right-left)#记录当前有效窗口长度
            else:                               #通过与K进行比较来判断窗口还是进行位移？
                count[ord(s[left])-ord(&amp;#39;A&amp;#39;)] -= 1
                left += 1
                right += 1                      #这里注意：位移操作需要整个向右移，不仅仅只是left向右
        
        return retval                           #返回最长窗口长度
        
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者：Derrick.S&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9sb25nZXN0LXJlcGVhdGluZy1jaGFyYWN0ZXItcmVwbGFjZW1lbnQvc29sdXRpb25zLzc5OTAxMy9odWEtZG9uZy1jaHVhbmcta291LWZhLWppYW4tZGFuLXlpLWRvbmctM3F3ZWwv&#34;&gt;https://leetcode.cn/problems/longest-repeating-character-replacement/solutions/799013/hua-dong-chuang-kou-fa-jian-dan-yi-dong-3qwel/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2 id=&#34;前缀和&#34;&gt;&lt;a href=&#34;#前缀和&#34; class=&#34;headerlink&#34; title=&#34;前缀和&#34;&gt;&lt;/a&gt;前缀和&lt;/h2&gt;&lt;h3 id=&#34;724-寻找数组的中心下标&#34;&gt;&lt;a href=&#34;#724-寻找数组的中心下标&#34; class=&#34;headerlink&#34; title=&#34;724. 寻找数组的中心下标&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9maW5kLXBpdm90LWluZGV4Lw==&#34;&gt;724. 寻找数组的中心下标&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;给你一个整数数组 &lt;code&gt;nums&lt;/code&gt; ，请计算数组的 &lt;strong&gt;中心下标&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;数组 &lt;strong&gt;中心下标&lt;/strong&gt; 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。&lt;/p&gt;
&lt;p&gt;如果中心下标位于数组最左端，那么左侧数之和视为 &lt;code&gt;0&lt;/code&gt; ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。&lt;/p&gt;
&lt;p&gt;如果数组有多个中心下标，应该返回 &lt;strong&gt;最靠近左边&lt;/strong&gt; 的那一个。如果数组不存在中心下标，返回 &lt;code&gt;-1&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;+++info 示例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [1, 7, 3, 6, 5, 6]
输出：3
解释：
中心下标是 3 。
左侧数之和 sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11 ，
右侧数之和 sum = nums[4] + nums[5] = 5 + 6 = 11 ，二者相等。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [1, 2, 3]
输出：-1
解释：
数组中不存在满足此条件的中心下标。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [2, 1, -1]
输出：0
解释：
中心下标是 0 。
左侧数之和 sum = 0 ，（下标 0 左侧不存在元素），
右侧数之和 sum = nums[1] + nums[2] = 1 + -1 = 0 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;设 nums 的元素之和为 s。&lt;/p&gt;
&lt;p&gt;设中心下标为 i，其左侧元素和为 $leftS&amp;#x3D;nums[0]+nums[1]+⋯+nums[i−1]$，那么右侧元素和为 $s−nums[i]−leftS$。&lt;/p&gt;
&lt;p&gt;由于左侧元素和等于右侧元素和，所以有&lt;/p&gt;
&lt;p&gt;$$leftS&amp;#x3D;s−nums[i]−leftS$$&lt;br&gt;即&lt;/p&gt;
&lt;p&gt;$$2⋅leftS&amp;#x3D;s−nums[i]$$&lt;br&gt;从左到右遍历数组，一边遍历，一边累加元素更新 leftS。每次累加前，检查是否满足上式，满足则返回 i。&lt;/p&gt;
&lt;p&gt;如果不存在这样的 i，返回 −1。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution:
    def pivotIndex(self, nums: List[int]) -&amp;gt; int:
        s = sum(nums)
        sum_left = 0
        for i, num in enumerate(nums):
            if 2*sum_left == s - num:
                return i
            sum_left += num
        return -1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者：灵茶山艾府&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9maW5kLXBpdm90LWluZGV4L3NvbHV0aW9ucy8yODM0Njg3L2ppYW4tamkteGllLWZhLW8xLWUtd2FpLWtvbmctamlhbi1weXRob24tdHowcC8=&#34;&gt;https://leetcode.cn/problems/find-pivot-index/solutions/2834687/jian-ji-xie-fa-o1-e-wai-kong-jian-python-tz0p/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;2352-相等行列对&#34;&gt;&lt;a href=&#34;#2352-相等行列对&#34; class=&#34;headerlink&#34; title=&#34;2352. 相等行列对&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9lcXVhbC1yb3ctYW5kLWNvbHVtbi1wYWlycy8=&#34;&gt;2352. 相等行列对&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;给你一个下标从 &lt;strong&gt;0&lt;/strong&gt; 开始、大小为 &lt;code&gt;n x n&lt;/code&gt; 的整数矩阵 &lt;code&gt;grid&lt;/code&gt; ，返回满足 &lt;code&gt;Ri&lt;/code&gt; 行和 &lt;code&gt;Cj&lt;/code&gt; 列相等的行列对 &lt;code&gt;(Ri, Cj)&lt;/code&gt; 的数目*。*&lt;/p&gt;
&lt;p&gt;如果行和列以相同的顺序包含相同的元素（即相等的数组），则认为二者是相等的。&lt;/p&gt;
&lt;p&gt;::: info no-icon&lt;/p&gt;
&lt;p&gt;用哈希表统计每行出现的次数，然后遍历列，累加哈希表中列出现的次数。&lt;/p&gt;
&lt;p&gt;作者：灵茶山艾府&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9lcXVhbC1yb3ctYW5kLWNvbHVtbi1wYWlycy9zb2x1dGlvbnMvMTY5NDA0Ny9oYS14aS1iaWFvLXB5dGhvbi1saWFuZy14aW5nLWJ5LWVuZGxlc3NjLWxqYWUv&#34;&gt;https://leetcode.cn/problems/equal-row-and-column-pairs/solutions/1694047/ha-xi-biao-python-liang-xing-by-endlessc-ljae/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;;;;id2 Demo 1&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution:
    def equalPairs(self, grid: List[List[int]]) -&amp;gt; int:
        cnt = Counter(tuple(row) for row in grid)
        return sum(cnt[col] for col in zip(*grid))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;;;;id2 Demo2&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution:
    def equalPairs(self, grid: List[List[int]]) -&amp;gt; int:
        n = len(grid)
        count = &amp;#123;&amp;#125;
        result = 0
        for i in range(n):
            count[tuple(grid[i])] = count.get(tuple(grid[i]), 0) + 1
        print(count)
        for j in zip(*grid):
            print(j)
            result += count.get(j,0)
            # print(grid[:][j], grid[j][:])
        return result
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2 id=&#34;栈与队列&#34;&gt;&lt;a href=&#34;#栈与队列&#34; class=&#34;headerlink&#34; title=&#34;栈与队列&#34;&gt;&lt;/a&gt;栈与队列&lt;/h2&gt;&lt;h3 id=&#34;735-小行星碰撞&#34;&gt;&lt;a href=&#34;#735-小行星碰撞&#34; class=&#34;headerlink&#34; title=&#34;735. 小行星碰撞&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9hc3Rlcm9pZC1jb2xsaXNpb24v&#34;&gt;735. 小行星碰撞&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;给定一个整数数组 &lt;code&gt;asteroids&lt;/code&gt;，表示在同一行的小行星。数组中小行星的索引表示它们在空间中的相对位置。&lt;/p&gt;
&lt;p&gt;对于数组中的每一个元素，其绝对值表示小行星的大小，正负表示小行星的移动方向（正表示向右移动，负表示向左移动）。每一颗小行星以相同的速度移动。&lt;/p&gt;
&lt;p&gt;找出碰撞后剩下的所有小行星。碰撞规则：两个小行星相互碰撞，较小的小行星会爆炸。如果两颗小行星大小相同，则两颗小行星都会爆炸。两颗移动方向相同的小行星，永远不会发生碰撞。&lt;/p&gt;
&lt;p&gt;+++info 示例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：asteroids = [5,10,-5]
输出：[5,10]
解释：10 和 -5 碰撞后只剩下 10 。 5 和 10 永远不会发生碰撞。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：asteroids = [8,-8]
输出：[]
解释：8 和 -8 碰撞后，两者都发生爆炸。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：asteroids = [10,2,-5]
输出：[10]
解释：2 和 -5 发生碰撞后剩下 -5 。10 和 -5 发生碰撞后剩下 10 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;这道栈的题目难点应该主要是在分析场景上了。&lt;br&gt;我们需要明确什么时候无脑入栈，什么时候需要判断，理解这两点就可以轻松解题了。&lt;br&gt;首先，循环每一个元素时，在什么情况下无脑入栈呢？&lt;/p&gt;
&lt;p&gt;栈为空&lt;br&gt;栈顶元素为负数(下一个为负数则一起向左，下一个为正数则分向两边)&lt;br&gt;当前元素为正数（栈顶为正一起向右，栈顶为负分向两边）&lt;br&gt;下来，我们需要看碰撞的场景又细分为什么情况：&lt;/p&gt;
&lt;p&gt;栈顶元素大于abs(当前元素)，当前元素被撞毁&lt;br&gt;栈顶元素等于abs(当前元素)，栈顶弹出和当前元素抵消&lt;br&gt;栈顶元素小于abs(当前元素)，栈顶弹出，并与新栈顶完成上述判断&lt;br&gt;最终返回栈即可。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution:
    def asteroidCollision(self, asteroids: List[int]) -&amp;gt; List[int]:
        stack, index = [], 0
        while index &amp;lt; len(asteroids):
            ast = asteroids[index]
            if ast &amp;gt; 0 or len(stack)==0 or stack[-1]&amp;lt;0: stack.append(ast)
            elif stack[-1] &amp;lt;= - ast:
                if stack.pop(-1) &amp;lt; - ast:
                    continue
            index += 1
        return stack
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者：清风Python&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9hc3Rlcm9pZC1jb2xsaXNpb24vc29sdXRpb25zLzk5NDEwMC83MzV4aW5nLXhpbmctcGVuZy16aHVhbmctamkteXUtemhhbi1xdS1mLXhwZDEv&#34;&gt;https://leetcode.cn/problems/asteroid-collision/solutions/994100/735xing-xing-peng-zhuang-ji-yu-zhan-qu-f-xpd1/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;394-字符串解码&#34;&gt;&lt;a href=&#34;#394-字符串解码&#34; class=&#34;headerlink&#34; title=&#34;394. 字符串解码&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9kZWNvZGUtc3RyaW5nLw==&#34;&gt;394. 字符串解码&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;给定一个经过编码的字符串，返回它解码后的字符串。&lt;/p&gt;
&lt;p&gt;编码规则为: &lt;code&gt;k[encoded_string]&lt;/code&gt;，表示其中方括号内部的 &lt;code&gt;encoded_string&lt;/code&gt; 正好重复 &lt;code&gt;k&lt;/code&gt; 次。注意 &lt;code&gt;k&lt;/code&gt; 保证为正整数。&lt;/p&gt;
&lt;p&gt;你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。&lt;/p&gt;
&lt;p&gt;此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 &lt;code&gt;k&lt;/code&gt; ，例如不会出现像 &lt;code&gt;3a&lt;/code&gt; 或 &lt;code&gt;2[4]&lt;/code&gt; 的输入。&lt;/p&gt;
&lt;p&gt;测试用例保证输出的长度不会超过 &lt;code&gt;105&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;+++info 示例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;3[a]2[bc]&amp;quot;
输出：&amp;quot;aaabcbc&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;3[a2[c]]&amp;quot;
输出：&amp;quot;accaccacc&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;2[abc]3[cd]ef&amp;quot;
输出：&amp;quot;abcabccdcdcdef&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 4：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;abc3[cd]xyz&amp;quot;
输出：&amp;quot;abccdcdcdxyz&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;本题难点在于括号内嵌套括号，需要从内向外生成与拼接字符串，这与栈的先入后出特性对应。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;算法流程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;构建辅助栈 stack， 遍历字符串 s 中每个字符 c；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当 c 为数字时，将数字字符转化为数字 multi，用于后续倍数计算；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当 c 为字母时，在 res 尾部添加 c；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当 c 为 [ 时，将当前 multi 和 res 入栈，并分别置空置 0：&lt;br&gt;记录此 [ 前的临时结果 res 至栈，用于发现对应 ] 后的拼接操作；&lt;br&gt;记录此 [ 前的倍数 multi 至栈，用于发现对应 ] 后，获取 multi × […] 字符串。&lt;br&gt;进入到新 [ 后，res 和 multi 重新记录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当 c 为 ] 时，stack 出栈，拼接字符串 res &amp;#x3D; last_res + cur_multi * res，其中:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;last_res是上个 [ 到当前 [ 的字符串，例如 “3[a2[c]]” 中的 a；&lt;/li&gt;
&lt;li&gt;cur_multi是当前 [ 到 ] 内字符串的重复倍数，例如 “3[a2[c]]” 中的 2。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;返回字符串 res。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution:
    def decodeString(self, s: str) -&amp;gt; str:
        result = &amp;#39;&amp;#39;
        stack = []
        res, num = &amp;#39;&amp;#39;, 0
        for c in s:
            if c == &amp;#39;[&amp;#39;:
                stack.append((res, num))
                res, num = &amp;#39;&amp;#39;, 0
            elif c == &amp;#39;]&amp;#39;:
                out_res, out_num = stack.pop()
                res = out_res + out_num*res
            elif &amp;#39;0&amp;#39;&amp;lt;= c &amp;lt;= &amp;#39;9&amp;#39;:
                num = num*10 + int(c)
            else:
                res += c
        return res
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者：Krahets&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9kZWNvZGUtc3RyaW5nL3NvbHV0aW9ucy8xOTQ0Ny9kZWNvZGUtc3RyaW5nLWZ1LXpodS16aGFuLWZhLWRpLWd1aS1mYS1ieS1qeWQv&#34;&gt;https://leetcode.cn/problems/decode-string/solutions/19447/decode-string-fu-zhu-zhan-fa-di-gui-fa-by-jyd/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;649-Dota2-参议院&#34;&gt;&lt;a href=&#34;#649-Dota2-参议院&#34; class=&#34;headerlink&#34; title=&#34;649. Dota2 参议院&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9kb3RhMi1zZW5hdGUv&#34;&gt;649. Dota2 参议院&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;Dota2 的世界里有两个阵营：&lt;code&gt;Radiant&lt;/code&gt;（天辉）和 &lt;code&gt;Dire&lt;/code&gt;（夜魇）&lt;/p&gt;
&lt;p&gt;Dota2 参议院由来自两派的参议员组成。现在参议院希望对一个 Dota2 游戏里的改变作出决定。他们以一个基于轮为过程的投票进行。在每一轮中，每一位参议员都可以行使两项权利中的 &lt;strong&gt;一&lt;/strong&gt; 项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;禁止一名参议员的权利&lt;/strong&gt;：参议员可以让另一位参议员在这一轮和随后的几轮中丧失 &lt;strong&gt;所有的权利&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;宣布胜利&lt;/strong&gt;：如果参议员发现有权利投票的参议员都是 &lt;strong&gt;同一个阵营的&lt;/strong&gt; ，他可以宣布胜利并决定在游戏中的有关变化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;给你一个字符串 &lt;code&gt;senate&lt;/code&gt; 代表每个参议员的阵营。字母 &lt;code&gt;&amp;#39;R&amp;#39;&lt;/code&gt; 和 &lt;code&gt;&amp;#39;D&amp;#39;&lt;/code&gt;分别代表了 &lt;code&gt;Radiant&lt;/code&gt;（天辉）和 &lt;code&gt;Dire&lt;/code&gt;（夜魇）。然后，如果有 &lt;code&gt;n&lt;/code&gt; 个参议员，给定字符串的大小将是 &lt;code&gt;n&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;以轮为基础的过程从给定顺序的第一个参议员开始到最后一个参议员结束。这一过程将持续到投票结束。所有失去权利的参议员将在过程中被跳过。&lt;/p&gt;
&lt;p&gt;假设每一位参议员都足够聪明，会为自己的政党做出最好的策略，你需要预测哪一方最终会宣布胜利并在 Dota2 游戏中决定改变。输出应该是 &lt;code&gt;&amp;quot;Radiant&amp;quot;&lt;/code&gt; 或 &lt;code&gt;&amp;quot;Dire&amp;quot;&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;+++info 示例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：senate = &amp;quot;RD&amp;quot;
输出：&amp;quot;Radiant&amp;quot;
解释：
第 1 轮时，第一个参议员来自 Radiant 阵营，他可以使用第一项权利让第二个参议员失去所有权利。
这一轮中，第二个参议员将会被跳过，因为他的权利被禁止了。
第 2 轮时，第一个参议员可以宣布胜利，因为他是唯一一个有投票权的人。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：senate = &amp;quot;RDD&amp;quot;
输出：&amp;quot;Dire&amp;quot;
解释：
第 1 轮时，第一个来自 Radiant 阵营的参议员可以使用第一项权利禁止第二个参议员的权利。
这一轮中，第二个来自 Dire 阵营的参议员会将被跳过，因为他的权利被禁止了。
这一轮中，第三个来自 Dire 阵营的参议员可以使用他的第一项权利禁止第一个参议员的权利。
因此在第二轮只剩下第三个参议员拥有投票的权利,于是他可以宣布胜利
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;这道题模拟了一个游戏过程，最终当有权利投票的参议员都是 同一个阵营的 ，这个阵营即获胜。&lt;/p&gt;
&lt;p&gt;那么两个阵营的每个参议员为了获胜，当他拥有权力的时候，一定是会将自己之后首个对立阵营的参议员的权力禁止掉。【这就是每一位参议会为自己的政党做出最好的策略】。请注意：当之后没有对立阵营的参议员的时候，相当于将之前的参议员加到其之后。&lt;/p&gt;
&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/649-01.png&#34; class=&#34;&#34; width=&#34;500&#34;&gt;

&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/649-02.png&#34; class=&#34;&#34; width=&#34;500&#34;&gt;

&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/649-03.png&#34; class=&#34;&#34; width=&#34;500&#34;&gt;

&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/649-04.png&#34; class=&#34;&#34; width=&#34;500&#34;&gt;

&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/649-05.png&#34; class=&#34;&#34; width=&#34;500&#34;&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution:
    def predictPartyVictory(self, senate: str) -&amp;gt; str:
        radiants, dires = [], []
        n = len(senate)
        for i, se in enumerate(senate):
            if se == &amp;#39;R&amp;#39;: radiants.append(i)
            else: dires.append(i)
        while radiants and dires:
            if radiants[0] &amp;lt; dires[0]:
                dires.pop(0)
                radiants.append(radiants.pop(0) + n)
            else:
                radiants.pop(0)
                dires.append(dires.pop(0) + n)
        return &amp;quot;Radiant&amp;quot; if radiants else &amp;#39;Dire&amp;#39;
        
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者：画图小匠&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9kb3RhMi1zZW5hdGUvc29sdXRpb25zLzI4NjIxMTUvamF2YXB5dGhvbjNjZHVpLWxpZS1tby1uaS1qaW4temhpLXpoaS1oby1sNHBiLw==&#34;&gt;https://leetcode.cn/problems/dota2-senate/solutions/2862115/javapython3cdui-lie-mo-ni-jin-zhi-zhi-ho-l4pb/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2 id=&#34;链表&#34;&gt;&lt;a href=&#34;#链表&#34; class=&#34;headerlink&#34; title=&#34;链表&#34;&gt;&lt;/a&gt;链表&lt;/h2&gt;&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;找中间节点：快慢指针&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;中间值左侧：需要加一个dummy节点。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dummy = ListNode(0, head)
slow, fast = dummy, dummy
while fast and fast.next:
    fast = fast.next.next
    if not fast: break
    slow = slow.next
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;中间值右侧：直接从head开始&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;slow, fast = head, head
while fast and fast.next:
    fast = fast.next.next
    if not fast: break
    slow = slow.next
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;2095-删除链表的中间节点&#34;&gt;&lt;a href=&#34;#2095-删除链表的中间节点&#34; class=&#34;headerlink&#34; title=&#34;2095. 删除链表的中间节点&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9kZWxldGUtdGhlLW1pZGRsZS1ub2RlLW9mLWEtbGlua2VkLWxpc3Qv&#34;&gt;2095. 删除链表的中间节点&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;给你一个链表的头节点 &lt;code&gt;head&lt;/code&gt; 。&lt;strong&gt;删除&lt;/strong&gt; 链表的 &lt;strong&gt;中间节点&lt;/strong&gt; ，并返回修改后的链表的头节点 &lt;code&gt;head&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;长度为 &lt;code&gt;n&lt;/code&gt; 链表的中间节点是从头数起第 &lt;code&gt;⌊n / 2⌋&lt;/code&gt; 个节点（下标从 &lt;strong&gt;0&lt;/strong&gt; 开始），其中 &lt;code&gt;⌊x⌋&lt;/code&gt; 表示小于或等于 &lt;code&gt;x&lt;/code&gt; 的最大整数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于 &lt;code&gt;n&lt;/code&gt; &amp;#x3D; &lt;code&gt;1&lt;/code&gt;、&lt;code&gt;2&lt;/code&gt;、&lt;code&gt;3&lt;/code&gt;、&lt;code&gt;4&lt;/code&gt; 和 &lt;code&gt;5&lt;/code&gt; 的情况，中间节点的下标分别是 &lt;code&gt;0&lt;/code&gt;、&lt;code&gt;1&lt;/code&gt;、&lt;code&gt;1&lt;/code&gt;、&lt;code&gt;2&lt;/code&gt; 和 &lt;code&gt;2&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; :::info no-icon&lt;/p&gt;
&lt;p&gt;本题可遍历计数先得到 n，再遍历一次删除指定节点即可，这很简单。本篇讲的是快慢指针这种方法。&lt;/p&gt;
&lt;p&gt;我们令 fast 和 slow 这两个指针同时前进，fast 每次移动两格，slow 每次移动一格，在检测到 &lt;code&gt;fast.next == null&lt;/code&gt; 或者 &lt;code&gt;fast.next.next == null&lt;/code&gt; 时退出循环。&lt;/p&gt;
&lt;p&gt;引入一个哑巴节点 dummy 便于处理，考虑循环停止时的场景。&lt;br&gt;为方便考虑，本篇题解认为原链表下标从 1 开始，需要删除第 $⌊\frac{n}{2}⌋+1$ 个节点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 &lt;em&gt;n&lt;/em&gt; 为偶数，如下所示。设 &lt;em&gt;n&lt;/em&gt;&amp;#x3D;2&lt;em&gt;k&lt;/em&gt;，fast 停在第 2&lt;em&gt;k&lt;/em&gt; 个节点，slow 停在第 &lt;em&gt;k&lt;/em&gt; 即 $⌊\frac{n}{2}⌋$ 个节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/2095-01.png&#34; class=&#34;&#34; width=&#34;300&#34;&gt;

&lt;ul&gt;
&lt;li&gt;如果 &lt;em&gt;n&lt;/em&gt; 为奇数，如下所示，设 &lt;em&gt;n&lt;/em&gt;&amp;#x3D;2&lt;em&gt;k&lt;/em&gt;+1。fast 停在第 2&lt;em&gt;k&lt;/em&gt; 个节点，slow 停在第 &lt;em&gt;k&lt;/em&gt; 即 $⌊\frac{n}{2}⌋$ 个节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/2095-02.png&#34; class=&#34;&#34; width=&#34;300&#34;&gt;

&lt;p&gt;所以退出循环时 slow 一定停在 $⌊\frac{n}{2}⌋$ 个节点，令 &lt;code&gt;slow.next = slow.next.next&lt;/code&gt; 即删除了 $⌊\frac{n}{2}⌋+1$ 个节点。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def deleteMiddle(self, head: Optional[ListNode]) -&amp;gt; Optional[ListNode]:
        zero = ListNode(0, head)
        slow, fast = zero, zero
        while fast and fast.next:
            fast = fast.next.next
            if not fast: break
            slow = slow.next
        slow.next = slow.next.next
        return zero.next

        
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者：Shawxing精讲算法&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9kZWxldGUtdGhlLW1pZGRsZS1ub2RlLW9mLWEtbGlua2VkLWxpc3Qvc29sdXRpb25zLzI4NDQyMjkvamlhbi1taW5nLXlhbi1qaW4tZGUta3VhaS1tYW4temhpLXpoZW4tZi04NHN4Lw==&#34;&gt;https://leetcode.cn/problems/delete-the-middle-node-of-a-linked-list/solutions/2844229/jian-ming-yan-jin-de-kuai-man-zhi-zhen-f-84sx/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;328-奇偶链表&#34;&gt;&lt;a href=&#34;#328-奇偶链表&#34; class=&#34;headerlink&#34; title=&#34;328. 奇偶链表&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9vZGQtZXZlbi1saW5rZWQtbGlzdC8=&#34;&gt;328. 奇偶链表&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;给定单链表的头节点 &lt;code&gt;head&lt;/code&gt; ，将所有索引为奇数的节点和索引为偶数的节点分别分组，保持它们原有的相对顺序，然后把偶数索引节点分组连接到奇数索引节点分组之后，返回重新排序的链表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一个&lt;/strong&gt;节点的索引被认为是 &lt;strong&gt;奇数&lt;/strong&gt; ， &lt;strong&gt;第二个&lt;/strong&gt;节点的索引为 &lt;strong&gt;偶数&lt;/strong&gt; ，以此类推。&lt;/p&gt;
&lt;p&gt;请注意，偶数组和奇数组内部的相对顺序应该与输入时保持一致。&lt;/p&gt;
&lt;p&gt;你必须在 &lt;code&gt;O(1)&lt;/code&gt; 的额外空间复杂度和 &lt;code&gt;O(n)&lt;/code&gt; 的时间复杂度下解决这个问题。&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;如果链表为空，则直接返回链表。&lt;/p&gt;
&lt;p&gt;对于原始链表，每个节点都是奇数节点或偶数节点。头节点是奇数节点，头节点的后一个节点是偶数节点，相邻节点的奇偶性不同。因此可以将奇数节点和偶数节点分离成奇数链表和偶数链表，然后将偶数链表连接在奇数链表之后，合并后的链表即为结果链表。&lt;/p&gt;
&lt;p&gt;原始链表的头节点 head 也是奇数链表的头节点以及结果链表的头节点，head 的后一个节点是偶数链表的头节点。令 evenHead &amp;#x3D; head.next，则 evenHead 是偶数链表的头节点。&lt;/p&gt;
&lt;p&gt;维护两个指针 odd 和 even 分别指向奇数节点和偶数节点，初始时 odd &amp;#x3D; head，even &amp;#x3D; evenHead。通过迭代的方式将奇数节点和偶数节点分离成两个链表，每一步首先更新奇数节点，然后更新偶数节点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;更新奇数节点时，奇数节点的后一个节点需要指向偶数节点的后一个节点，因此令 odd.next &amp;#x3D; even.next，然后令 odd &amp;#x3D; odd.next，此时 odd 变成 even 的后一个节点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更新偶数节点时，偶数节点的后一个节点需要指向奇数节点的后一个节点，因此令 even.next &amp;#x3D; odd.next，然后令 even &amp;#x3D; even.next，此时 even 变成 odd 的后一个节点。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/328-01.png&#34; class=&#34;&#34; width=&#34;400&#34;&gt;

&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/328-02.png&#34; class=&#34;&#34; width=&#34;400&#34;&gt;

&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/328-03.png&#34; class=&#34;&#34; width=&#34;400&#34;&gt;

&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/328-04.png&#34; class=&#34;&#34; width=&#34;400&#34;&gt;

&lt;p&gt;在上述操作之后，即完成了对一个奇数节点和一个偶数节点的分离。重复上述操作，直到全部节点分离完毕。全部节点分离完毕的条件是 even 为空节点或者 even.next 为空节点，此时 odd 指向最后一个奇数节点（即奇数链表的最后一个节点）。&lt;/p&gt;
&lt;p&gt;最后令 odd.next &amp;#x3D; evenHead，将偶数链表连接在奇数链表之后，即完成了奇数链表和偶数链表的合并，结果链表的头节点仍然是 head。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def oddEvenList(self, head: Optional[ListNode]) -&amp;gt; Optional[ListNode]:
        if not head: return head
        even_head = head.next
        odd, even = head, even_head
        while even and even.next:
            odd.next = even.next
            odd = odd.next
            even.next = odd.next
            even = even.next
        odd.next = even_head
        return head
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者：力扣官方题解&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9vZGQtZXZlbi1saW5rZWQtbGlzdC9zb2x1dGlvbnMvNDgyNzM3L3FpLW91LWxpYW4tYmlhby1ieS1sZWV0Y29kZS1zb2x1dGlvbi8=&#34;&gt;https://leetcode.cn/problems/odd-even-linked-list/solutions/482737/qi-ou-lian-biao-by-leetcode-solution/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;2130-链表最大孪生和&#34;&gt;&lt;a href=&#34;#2130-链表最大孪生和&#34; class=&#34;headerlink&#34; title=&#34;2130. 链表最大孪生和&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9tYXhpbXVtLXR3aW4tc3VtLW9mLWEtbGlua2VkLWxpc3Qv&#34;&gt;2130. 链表最大孪生和&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;在一个大小为 &lt;code&gt;n&lt;/code&gt; 且 &lt;code&gt;n&lt;/code&gt; 为 &lt;strong&gt;偶数&lt;/strong&gt; 的链表中，对于 &lt;code&gt;0 &amp;lt;= i &amp;lt;= (n / 2) - 1&lt;/code&gt; 的 &lt;code&gt;i&lt;/code&gt; ，第 &lt;code&gt;i&lt;/code&gt; 个节点（下标从 &lt;strong&gt;0&lt;/strong&gt; 开始）的孪生节点为第 &lt;code&gt;(n-1-i)&lt;/code&gt; 个节点 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比方说，&lt;code&gt;n = 4&lt;/code&gt; 那么节点 &lt;code&gt;0&lt;/code&gt; 是节点 &lt;code&gt;3&lt;/code&gt; 的孪生节点，节点 &lt;code&gt;1&lt;/code&gt; 是节点 &lt;code&gt;2&lt;/code&gt; 的孪生节点。这是长度为 &lt;code&gt;n = 4&lt;/code&gt; 的链表中所有的孪生节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;孪生和&lt;/strong&gt; 定义为一个节点和它孪生节点两者值之和。&lt;/p&gt;
&lt;p&gt;给你一个长度为偶数的链表的头节点 &lt;code&gt;head&lt;/code&gt; ，请你返回链表的 &lt;strong&gt;最大孪生和&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt; +++info 示例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/2130-01.png&#34; class=&#34;&#34; width=&#34;300&#34;&gt;

&lt;pre&gt;&lt;code&gt;输入：head = [5,4,2,1]
输出：6
解释：
节点 0 和节点 1 分别是节点 3 和 2 的孪生节点。孪生和都为 6 。
链表中没有其他孪生节点。
所以，链表的最大孪生和是 6 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/2130-02.png&#34; class=&#34;&#34; width=&#34;300&#34;&gt;

&lt;pre&gt;&lt;code&gt;输入：head = [4,2,2,3]
输出：7
解释：
链表中的孪生节点为：
- 节点 0 是节点 3 的孪生节点，孪生和为 4 + 3 = 7 。
- 节点 1 是节点 2 的孪生节点，孪生和为 2 + 2 = 4 。
所以，最大孪生和为 max(7, 4) = 7 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;核心思想：寻找链表中间值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下两种方法的快慢指针有所不同，参见&lt;a href=&#34;#%E9%93%BE%E8%A1%A8&#34;&gt;链表&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;;;;id3 快慢指针+反转链表&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def pairSum(self, head: Optional[ListNode]) -&amp;gt; int:
        mid = self.middleNode(head)
        head2 = self.reverseNode(mid)
        result = -inf
        while head2:
            result = max(result, head.val + head2.val)
            head = head.next
            head2 = head2.next
        return result

    def reverseNode(self, head):
        cur, pre = head, None
        while cur:
            nxt = cur.next
            cur.next = pre
            pre = cur
            cur = nxt
        return pre
        
    def middleNode(self, head):
        slow = fast = head
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
        return slow
        
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;;;;id3 快慢指针+入栈&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def pairSum(self, head: Optional[ListNode]) -&amp;gt; int:
        dummy = ListNode(next=head)
        slow, fast = dummy, dummy
        stack = []
        result = -inf
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
            stack.append(slow.val)
        print(slow.val)
        while slow.next:
            slow = slow.next
            result = max(result, stack.pop(-1)+slow.val)
        return result
        
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2 id=&#34;二叉树&#34;&gt;&lt;a href=&#34;#二叉树&#34; class=&#34;headerlink&#34; title=&#34;二叉树&#34;&gt;&lt;/a&gt;二叉树&lt;/h2&gt;&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVVENHkxWTc2OS8/dmRfc291cmNlPTliMDUwMzdjNzdlYzk0MGRhZTNhZjhlNjk5NjllMGQ2&#34;&gt;看到递归就晕？带你理解递归的本质！【基础算法精讲 09】_哔哩哔哩_bilibili&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;437-路径总和-III（与560-和为-K-的子数组方法相似）&#34;&gt;&lt;a href=&#34;#437-路径总和-III（与560-和为-K-的子数组方法相似）&#34; class=&#34;headerlink&#34; title=&#34;437. 路径总和 III（与560. 和为 K 的子数组方法相似）&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9wYXRoLXN1bS1paWkv&#34;&gt;437. 路径总和 III&lt;/span&gt;（与&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9zdWJhcnJheS1zdW0tZXF1YWxzLWsv&#34;&gt;560. 和为 K 的子数组&lt;/span&gt;方法相似）&lt;/h3&gt;&lt;p&gt;给定一个二叉树的根节点 &lt;code&gt;root&lt;/code&gt; ，和一个整数 &lt;code&gt;targetSum&lt;/code&gt; ，求该二叉树里节点值之和等于 &lt;code&gt;targetSum&lt;/code&gt; 的 &lt;strong&gt;路径&lt;/strong&gt; 的数目。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;路径&lt;/strong&gt; 不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。&lt;/p&gt;
&lt;p&gt;+++info 示例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/437-01.png&#34; class=&#34;&#34; width=&#34;300&#34;&gt;

&lt;pre&gt;&lt;code&gt;输入：root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8
输出：3
解释：和等于 8 的路径有 3 条，如图所示。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;如果二叉树是一条链，本题就和 560. 和为 K 的子数组 完全一样了：统计有多少个非空连续子数组的元素和恰好等于 targetSum。所以你必须先弄明白 560 题（特殊情况），再来做本题（一般情况）。560 题的做法见 我的题解。&lt;/p&gt;
&lt;p&gt;这两题的联系如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;560 题&lt;/th&gt;
&lt;th&gt;本题&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;连续子数组&lt;/td&gt;
&lt;td&gt;方向向下的路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;前缀&lt;/td&gt;
&lt;td&gt;从根节点开始的路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;做法：枚举子数组右端点，统计有多少个左端点&lt;/td&gt;
&lt;td&gt;做法：枚举路径的终点，统计有多少个起点&lt;br/&gt;我们要解决的问题是：DFS 遍历这棵树，遍历到节点 node 时，假设 node 是路径的终点，那么有多少个起点，满足起点到终点 node 的路径总和恰好等于 targetSum？&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;和 560 题一样的套路：一边遍历二叉树，一边用哈希表 cnt 统计前缀和（从根节点开始的路径和）的出现次数。设从根到终点 node 的路径和为 s，那么起点的个数就是 cnt[s−targetSum]，加入答案。对比 560 题，我们在枚举子数组的右端点（终点），统计有多少个左端点（起点），做法完全一致。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pathSum(self, root: Optional[TreeNode], targetSum: int) -&amp;gt; int:
        ans = 0
        hp = collections.defaultdict(int)
        hp[0] = 1
        def dfs(node, s):
            if not node: return 
            nonlocal ans
            s += node.val
            ans += hp[s - targetSum]

            hp[s] += 1
            dfs(node.left, s)
            dfs(node.right, s)
            hp[s] -= 1
        dfs(root, 0)
        return ans
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者：灵茶山艾府&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9wYXRoLXN1bS1paWkvc29sdXRpb25zLzI3ODQ4NTYvenVvLWZhLWhlLTU2MC10aS1zaGkteWkteWFuZy1kZS1weXRob25qYS1mbXpvLw==&#34;&gt;https://leetcode.cn/problems/path-sum-iii/solutions/2784856/zuo-fa-he-560-ti-shi-yi-yang-de-pythonja-fmzo/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;1372-二叉树中的最长交错路径&#34;&gt;&lt;a href=&#34;#1372-二叉树中的最长交错路径&#34; class=&#34;headerlink&#34; title=&#34;1372. 二叉树中的最长交错路径&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9sb25nZXN0LXppZ3phZy1wYXRoLWluLWEtYmluYXJ5LXRyZWUv&#34;&gt;1372. 二叉树中的最长交错路径&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;给你一棵以 &lt;code&gt;root&lt;/code&gt; 为根的二叉树，二叉树中的交错路径定义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择二叉树中 &lt;strong&gt;任意&lt;/strong&gt; 节点和一个方向（左或者右）。&lt;/li&gt;
&lt;li&gt;如果前进方向为右，那么移动到当前节点的的右子节点，否则移动到它的左子节点。&lt;/li&gt;
&lt;li&gt;改变前进方向：左变右或者右变左。&lt;/li&gt;
&lt;li&gt;重复第二步和第三步，直到你在树中无法继续移动。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;交错路径的长度定义为：&lt;strong&gt;访问过的节点数目 - 1&lt;/strong&gt;（单个节点的路径长度为 0 ）。&lt;/p&gt;
&lt;p&gt;请你返回给定树中最长 &lt;strong&gt;交错路径&lt;/strong&gt; 的长度。&lt;/p&gt;
&lt;p&gt;+++info 示例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/1372-01.png&#34; class=&#34;&#34; width=&#34;100&#34;&gt;

&lt;pre&gt;&lt;code&gt;输入：root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1,null,1]
输出：3
解释：蓝色节点为树中最长交错路径（右 -&amp;gt; 左 -&amp;gt; 右）。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/1372-02.png&#34; class=&#34;&#34; width=&#34;100&#34;&gt;

&lt;pre&gt;&lt;code&gt;输入：root = [1,1,1,null,1,null,null,1,1,null,1]
输出：4
解释：蓝色节点为树中最长交错路径（左 -&amp;gt; 右 -&amp;gt; 左 -&amp;gt; 右）。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;在 DFS 的过程中，每次我们都把当前点的 len 参数和答案 maxAns 打擂台，这样可以比出一个最大的。然后我们根据 dir 分类讨论。如果当前点应该向左且可以向左，那么就让他向左走一步，新的 len 是当前的 len 加一。如果的的点应该向左但是却没有左子树呢？很无奈那就只能向右了，这个时候 len 的值应该「重置」。&lt;/p&gt;
&lt;p&gt;思考：「重置」为什么是把 len 变成 1 而不是 0？ 因为当前的点下传到它的子节点的时候已经走了一条长度为 1 的边。那么为什么 main 函数中传入的 len 值是 0 而不是 1 呢？ 因为 main 函数中的 root 是没有父亲节点的，所以当前已经走过的路为 0。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def longestZigZag(self, root: Optional[TreeNode]) -&amp;gt; int:
        result = 0
        def search(node, mode, l):
            if not node:return 
            nonlocal result
            result = max(result, l)
            if mode == &amp;#39;left&amp;#39;: 
                search(node.right, &amp;#39;right&amp;#39;,l+1)
                search(node.left, &amp;#39;left&amp;#39;, 1)
            elif mode == &amp;#39;right&amp;#39;: 
                search(node.left, &amp;#39;left&amp;#39;, l+1)
                search(node.right, &amp;#39;right&amp;#39;, 1)
        search(root,&amp;#39;left&amp;#39;, 0)
        search(root, &amp;#39;right&amp;#39;, 0)
        return result
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者：力扣官方题解&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9sb25nZXN0LXppZ3phZy1wYXRoLWluLWEtYmluYXJ5LXRyZWUvc29sdXRpb25zLzE0NzQyNS9lci1jaGEtc2h1LXpob25nLWRlLXp1aS1jaGFuZy1qaWFvLWN1by1sdS1qaW5nLWItMi8=&#34;&gt;https://leetcode.cn/problems/longest-zigzag-path-in-a-binary-tree/solutions/147425/er-cha-shu-zhong-de-zui-chang-jiao-cuo-lu-jing-b-2/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;236-二叉树的最近公共祖先&#34;&gt;&lt;a href=&#34;#236-二叉树的最近公共祖先&#34; class=&#34;headerlink&#34; title=&#34;236. 二叉树的最近公共祖先&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9sb3dlc3QtY29tbW9uLWFuY2VzdG9yLW9mLWEtYmluYXJ5LXRyZWUv&#34;&gt;236. 二叉树的最近公共祖先&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOUMlODAlRTglQkYlOTElRTUlODUlQUMlRTUlODUlQjElRTclQTUlOTYlRTUlODUlODgvODkxODgzND9mcj1hbGFkZGlu&#34;&gt;百度百科&lt;/span&gt;中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（&lt;strong&gt;一个节点也可以是它自己的祖先&lt;/strong&gt;）。”&lt;/p&gt;
&lt;p&gt; +++info 示例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/236-01.png&#34; class=&#34;&#34; width=&#34;200&#34;&gt;

&lt;pre&gt;&lt;code&gt;输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
输出：3
解释：节点 5 和节点 1 的最近公共祖先是节点 3 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/236-02.png&#34; class=&#34;&#34; width=&#34;200&#34;&gt;

&lt;pre&gt;&lt;code&gt;输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
输出：5
解释：节点 5 和节点 4 的最近公共祖先是节点 5 。因为根据定义最近公共祖先节点可以为节点本身。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVc0NHkxWjdBUi8/dmRfc291cmNlPTliMDUwMzdjNzdlYzk0MGRhZTNhZjhlNjk5NjllMGQ2&#34;&gt;二叉树的最近公共祖先【基础算法精讲 12】_哔哩哔哩_bilibili&lt;/span&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/236-03.png&#34; class=&#34;&#34; width=&#34;500&#34;&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: &amp;#39;TreeNode&amp;#39;, p: &amp;#39;TreeNode&amp;#39;, q: &amp;#39;TreeNode&amp;#39;) -&amp;gt; &amp;#39;TreeNode&amp;#39;:
        if root == None or root == p or root == q:
            return root
        left = self.lowestCommonAncestor(root.left, p, q)
        right = self.lowestCommonAncestor(root.right, p, q)
        if right and left: return root
        return left or right
        
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;199-二叉树的右视图&#34;&gt;&lt;a href=&#34;#199-二叉树的右视图&#34; class=&#34;headerlink&#34; title=&#34;199. 二叉树的右视图&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9iaW5hcnktdHJlZS1yaWdodC1zaWRlLXZpZXcv&#34;&gt;199. 二叉树的右视图&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;给定一个二叉树的 &lt;strong&gt;根节点&lt;/strong&gt; &lt;code&gt;root&lt;/code&gt;，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。&lt;/p&gt;
&lt;p&gt;+++info 示例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt; root &amp;#x3D; [1,2,3,null,5,null,4]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输出：&lt;/strong&gt;[1,3,4]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解释：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/199-01.png&#34; class=&#34;&#34; width=&#34;300&#34;&gt;

&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt; root &amp;#x3D; [1,2,3,4,null,null,null,5]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输出：&lt;/strong&gt;[1,3,4,5]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解释：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/199-02.png&#34; class=&#34;&#34; width=&#34;300&#34;&gt;

&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt; root &amp;#x3D; [1,null,3]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输出：&lt;/strong&gt;[1,3]&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;;;;id4 深度优先算法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;视频讲解&lt;/strong&gt;：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMThNNDExejdiYi8=&#34;&gt;【基础算法精讲 10】&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：先递归右子树，再递归左子树，当某个深度首次到达时，对应的节点就在右视图中。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -&amp;gt; List[int]:
        result = []
        def dfs(root, depth):
            if not root: return 
            if depth == len(result):
                result.append(root.val)
            dfs(root.right, depth + 1)
            dfs(root.left, depth + 1)
        dfs(root, 0)
        return result
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者：灵茶山艾府&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9iaW5hcnktdHJlZS1yaWdodC1zaWRlLXZpZXcvc29sdXRpb25zLzIwMTUwNjEvcnUtaGUtbGluZy1odW8teXVuLXlvbmctZGktZ3VpLWxhaS1rYW4tcy1yMW5jLw==&#34;&gt;https://leetcode.cn/problems/binary-tree-right-side-view/solutions/2015061/ru-he-ling-huo-yun-yong-di-gui-lai-kan-s-r1nc/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;;;;id4 层序遍历&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：将每层的元素加入队列，从右到左依序遍历每层。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -&amp;gt; List[int]:
        if not root: return []
        result = []
        que = [root]
        while len(que) &amp;gt; 0:
            result.append(que[0].val)
            for _ in range(len(que)):
                node = que.pop(0)
                if node.right: que.append(node.right)
                if node.left: que.append(node.left)
        return result
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;450-删除二叉搜索树中的节点&#34;&gt;&lt;a href=&#34;#450-删除二叉搜索树中的节点&#34; class=&#34;headerlink&#34; title=&#34;450. 删除二叉搜索树中的节点&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9kZWxldGUtbm9kZS1pbi1hLWJzdC8=&#34;&gt;450. 删除二叉搜索树中的节点&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;给定一个二叉搜索树的根节点 &lt;strong&gt;root&lt;/strong&gt; 和一个值 &lt;strong&gt;key&lt;/strong&gt;，删除二叉搜索树中的 &lt;strong&gt;key&lt;/strong&gt; 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。&lt;/p&gt;
&lt;p&gt;一般来说，删除节点可分为两个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先找到需要删除的节点；&lt;/li&gt;
&lt;li&gt;如果找到了，删除它。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;+++info 示例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/450-01.png&#34; class=&#34;&#34; width=&#34;300&#34;&gt;

&lt;pre&gt;&lt;code&gt;输入：root = [5,3,6,2,4,null,7], key = 3
输出：[5,4,6,2,null,null,7]
解释：给定需要删除的节点值是 3，所以我们首先找到 3 这个节点，然后删除它。
一个正确的答案是 [5,4,6,2,null,null,7], 如下图所示。
另一个正确答案是 [5,2,6,null,4,null,7]。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2025/08/15/2025-08-15-Leetcode/450-02.png&#34; class=&#34;&#34; width=&#34;300&#34;&gt;

&lt;pre&gt;&lt;code&gt;输入: root = [5,3,6,2,4,null,7], key = 0
输出: [5,3,6,2,4,null,7]
解释: 二叉树不包含值为 0 的节点
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;[视频解析](&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVJ1NHkxQzcyZC8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smdmRfc291cmNlPTliMDUwMzdjNzdlYzk0MGRhZTNhZjhlNjk5NjllMGQ2&#34;&gt;【LeetCode75】第四十二题 删除二叉搜索树中的节点_哔哩哔哩_bilibili&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;二叉搜索树的题目往往可以用递归来解决。此题要求删除二叉树的节点，函数 deleteNode 的输入是二叉树的根节点 root 和一个整数 key，输出是删除值为 key 的节点后的二叉树，并保持二叉树的有序性。可以按照以下情况分类讨论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;root 为空，代表未搜索到值为 key 的节点，返回空。&lt;/li&gt;
&lt;li&gt;root.val&amp;gt;key，表示值为 key 的节点可能存在于 root 的左子树中，需要递归地在 root.left 调用 deleteNode，并返回 root。&lt;/li&gt;
&lt;li&gt;root.val&amp;lt;key，表示值为 key 的节点可能存在于 root 的右子树中，需要递归地在 root.right 调用 deleteNode，并返回 root。&lt;/li&gt;
&lt;li&gt;root.val&amp;#x3D;key，root 即为要删除的节点。此时要做的是删除 root，并将它的子树合并成一棵子树，保持有序性，并返回根节点。根据 root 的子树情况分成以下情况讨论：&lt;ul&gt;
&lt;li&gt;root 为叶子节点，没有子树。此时可以直接将它删除，即返回空。&lt;/li&gt;
&lt;li&gt;root 只有左子树，没有右子树。此时可以将它的左子树作为新的子树，返回它的左子节点。&lt;/li&gt;
&lt;li&gt;root 只有右子树，没有左子树。此时可以将它的右子树作为新的子树，返回它的右子节点。&lt;/li&gt;
&lt;li&gt;root 有左右子树。此时可以把右子树接到左子树中（通过循环找到左子树的最右叶子，插在这个叶子上作为右子树，因为root的右子树必然比左子树的任意值大）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def deleteNode(self, root: Optional[TreeNode], key: int) -&amp;gt; Optional[TreeNode]:
        if not root: return 
        if root.val == key:
            if not root.left and not root.right: return 
            elif not root.left: return root.right
            elif not root.right: return root.left
            else:
                node = root.left
                while node.right: node = node.right
                node.right = root.right
                root = root.left
        elif root.val &amp;gt; key: root.left = self.deleteNode(root.left, key)
        elif root.val &amp;lt; key: root.right = self.deleteNode(root.right, key)
        return root
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者：力扣官方题解&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9kZWxldGUtbm9kZS1pbi1hLWJzdC9zb2x1dGlvbnMvMTUyOTcwMC9zaGFuLWNodS1lci1jaGEtc291LXN1by1zaHUtemhvbmctZGUtamllLW42dm8v&#34;&gt;https://leetcode.cn/problems/delete-node-in-a-bst/solutions/1529700/shan-chu-er-cha-sou-suo-shu-zhong-de-jie-n6vo/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
</content>
        <category term="技能工具" scheme="http://hening25.gitee.io/categories/%E6%8A%80%E8%83%BD%E5%B7%A5%E5%85%B7/" />
        <updated>2025-08-14T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://hening25.gitee.io/2025/08/15/Z2025-08-15-Leetcode%20-%20%E5%89%AF%E6%9C%AC/</id>
        <title>Leetcode刷题记录</title>
        <link rel="alternate" href="http://hening25.gitee.io/2025/08/15/Z2025-08-15-Leetcode%20-%20%E5%89%AF%E6%9C%AC/"/>
        <content type="html">&lt;p&gt;Leetcode刷题记录&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h1 id=&#34;Leetcode刷题&#34;&gt;&lt;a href=&#34;#Leetcode刷题&#34; class=&#34;headerlink&#34; title=&#34;Leetcode刷题&#34;&gt;&lt;/a&gt;Leetcode刷题&lt;/h1&gt;&lt;h2 id=&#34;数组-字符串&#34;&gt;&lt;a href=&#34;#数组-字符串&#34; class=&#34;headerlink&#34; title=&#34;数组&amp;#x2F;字符串&#34;&gt;&lt;/a&gt;数组&amp;#x2F;字符串&lt;/h2&gt;&lt;h3 id=&#34;1071-字符串的最大公因子&#34;&gt;&lt;a href=&#34;#1071-字符串的最大公因子&#34; class=&#34;headerlink&#34; title=&#34;1071. 字符串的最大公因子&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9ncmVhdGVzdC1jb21tb24tZGl2aXNvci1vZi1zdHJpbmdzLw==&#34;&gt;1071. 字符串的最大公因子&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;对于字符串 &lt;code&gt;s&lt;/code&gt; 和 &lt;code&gt;t&lt;/code&gt;，只有在 &lt;code&gt;s = t + t + t + ... + t + t&lt;/code&gt;（&lt;code&gt;t&lt;/code&gt; 自身连接 1 次或多次）时，我们才认定 “&lt;code&gt;t&lt;/code&gt; 能除尽 &lt;code&gt;s&lt;/code&gt;”。&lt;/p&gt;
&lt;p&gt;给定两个字符串 &lt;code&gt;str1&lt;/code&gt; 和 &lt;code&gt;str2&lt;/code&gt; 。返回 &lt;em&gt;最长字符串 &lt;code&gt;x&lt;/code&gt;，要求满足 &lt;code&gt;x&lt;/code&gt; 能除尽 &lt;code&gt;str1&lt;/code&gt; 且 &lt;code&gt;x&lt;/code&gt; 能除尽 &lt;code&gt;str2&lt;/code&gt;&lt;/em&gt; 。&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;若两个字符串是由同一个字符串 X重复拼接而成，那么无论先拼哪个，结果应该相同。&lt;br&gt;如果 str1 + str2 !&amp;#x3D; str2 +str1，说明不存在公共的重复因子，直接返回空串 “”。&lt;br&gt;如果两个字符串都是由同一个字符串 X 组成，那么 X 的长度必然是str1.size()和 str2.size() 的最大公约数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution:
    def gcdOfStrings(self, str1: str, str2: str) -&amp;gt; str:
        if not str1 + str2 == str2 + str1:
            return &amp;quot;&amp;quot;
        return str1[0:self.gcd(len(str1), len(str2))]
    
    def gcd(self, a,b):
        if b == 0: return a
        else: return gcd(b, a%b)
    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者：Random&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9ncmVhdGVzdC1jb21tb24tZGl2aXNvci1vZi1zdHJpbmdzL3NvbHV0aW9ucy8zNzQ5ODkxL3NodS14dWUtenVpLWRhLWdvbmcteXVlLXNodS1ieS1jb2Rlci1yYW4tYTg4dS8=&#34;&gt;https://leetcode.cn/problems/greatest-common-divisor-of-strings/solutions/3749891/shu-xue-zui-da-gong-yue-shu-by-coder-ran-a88u/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;605-种花问题&#34;&gt;&lt;a href=&#34;#605-种花问题&#34; class=&#34;headerlink&#34; title=&#34;605. 种花问题&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9jYW4tcGxhY2UtZmxvd2Vycy8=&#34;&gt;605. 种花问题&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;假设有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花不能种植在相邻的地块上，它们会争夺水源，两者都会死去。&lt;/p&gt;
&lt;p&gt;给你一个整数数组 &lt;code&gt;flowerbed&lt;/code&gt; 表示花坛，由若干 &lt;code&gt;0&lt;/code&gt; 和 &lt;code&gt;1&lt;/code&gt; 组成，其中 &lt;code&gt;0&lt;/code&gt; 表示没种植花，&lt;code&gt;1&lt;/code&gt; 表示种植了花。另有一个数 &lt;code&gt;n&lt;/code&gt; ，能否在不打破种植规则的情况下种入 &lt;code&gt;n&lt;/code&gt; 朵花？能则返回 &lt;code&gt;true&lt;/code&gt; ，不能则返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;从左到右遍历数组，能种花就立刻种花。&lt;/p&gt;
&lt;p&gt;如何判断能否种花？由于「花不能种植在相邻的地块上」，如果要在下标 i 处种花，需要满足 flowerbed[i−1],flowerbed[i],flowerbed[i+1] 均为 0。&lt;/p&gt;
&lt;p&gt;每种一朵花，就把 n 减一。如果最后 n≤0，则返回 true，否则返回 false。&lt;/p&gt;
&lt;p&gt;为了简化判断逻辑，可以在数组的开头和末尾各插入一个 0。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution:
    def canPlaceFlowers(self, flowerbed: List[int], n: int) -&amp;gt; bool:
      nums = len(flowerbed)
      new_flowerbed = [0] + flowerbed + [0]
      for i in range(1,len(new_flowerbed)-1):
        if new_flowerbed[i-1] == 0 and new_flowerbed[i+1] == 0 and new_flowerbed[i] == 0:
          new_flowerbed[i] = 1
          n -= 1
      return n &amp;lt;= 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者：灵茶山艾府&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9jYW4tcGxhY2UtZmxvd2Vycy9zb2x1dGlvbnMvMjQ2MzAxOC9iZW4tdGktenVpLWppYW4tZGFuLXhpZS1mYS1weXRob25qYXZhY2dvLTZhNmsv&#34;&gt;https://leetcode.cn/problems/can-place-flowers/solutions/2463018/ben-ti-zui-jian-dan-xie-fa-pythonjavacgo-6a6k/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;334-递增的三元子序列&#34;&gt;&lt;a href=&#34;#334-递增的三元子序列&#34; class=&#34;headerlink&#34; title=&#34;334. 递增的三元子序列&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9pbmNyZWFzaW5nLXRyaXBsZXQtc3Vic2VxdWVuY2Uv&#34;&gt;334. 递增的三元子序列&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;给你一个整数数组 &lt;code&gt;nums&lt;/code&gt; ，判断这个数组中是否存在长度为 &lt;code&gt;3&lt;/code&gt; 的递增子序列。&lt;/p&gt;
&lt;p&gt;如果存在这样的三元组下标 &lt;code&gt;(i, j, k)&lt;/code&gt; 且满足 &lt;code&gt;i &amp;lt; j &amp;lt; k&lt;/code&gt; ，使得 &lt;code&gt;nums[i] &amp;lt; nums[j] &amp;lt; nums[k]&lt;/code&gt; ，返回 &lt;code&gt;true&lt;/code&gt; ；否则，返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;;;;id1 巧解&lt;/p&gt;
&lt;p&gt;核心想法：遍历一遍数组，希望遍历到的这个数three，前面已经有一个比他小的数two，再前面有一个比two小的数one。&lt;br&gt;我们需要维护两个变量：one和two。代表递增子序列的第一个数和第二个数。&lt;br&gt;假设我们已经有了这两个数，那么three的大小有以下三种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;three大于two&lt;/strong&gt;    此情况下：即找到了三元组，直接返回true。&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;three介于two和one之间&lt;/strong&gt;     此情况下：应更新two，赋值为这个更小的值。这相当于帮我们扩大了three的可选择范围，当再次遇到一个比更新过的two大的数即可找到。&lt;/p&gt;



&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;three小于one&lt;/strong&gt;     此情况下：应更新one，赋值为这个更小的值。而不需要动two。这相当于帮我们扩大了之后出现的two的可选择范围。进而扩大了之后出现的three的可选择范围。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;&lt;img data-src=&#34;C:\Users\HNing\Dropbox\PC\Desktop\2025-08-15-Leetcode\334-06.png&#34; alt=&#34;300&#34;&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是，我们只更新one，原先的two不需要更改，因为子序列是从前往后的，只有当之后再出现比two小的数的时候再按照第二步那样更改。&lt;/p&gt;
&lt;p&gt;假设有如下示例：[2,5,1,6]，在遇到1之后更新了one，后遇到6，因为先判断是否大于two，由于6大于5，就直接返回true了。&lt;/p&gt;


&lt;p&gt;注意：two附带隐含信息——这之前有个数比two小&lt;br&gt;所以此时找到的递增子序列不是one、two、three的1 5 6，而是old one、two、three的2 5 6。&lt;/p&gt;
&lt;p&gt;这里更新的one的意思是，为之后可能存在的更小的递增子序列打基础。&lt;br&gt;假设有如下示例：[2,5,1,2,6]，在遇到1之后更新了one，后遇到2，2介于1和5（two）之间，更新two为2，后遇到6，由于6大于2，返回true。&lt;br&gt;此时找到的递增子序列才是one、two、three的1 2 6&lt;/p&gt;
&lt;p&gt;最后考虑one、two的初值，容易想到设定为Integer.MAX_VALUE即可。&lt;/p&gt;
&lt;p&gt;作者：Xzz&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9pbmNyZWFzaW5nLXRyaXBsZXQtc3Vic2VxdWVuY2Uvc29sdXRpb25zLzUzNTcyNS9wb3UteGktYmVuLXpoaS15aS13ZW4tYmFuZy1uaS1rYW4tcWluZy10LTN5ZTIv&#34;&gt;https://leetcode.cn/problems/increasing-triplet-subsequence/solutions/535725/pou-xi-ben-zhi-yi-wen-bang-ni-kan-qing-t-3ye2/&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution:
    def increasingTriplet(self, nums: List[int]) -&amp;gt; bool:
      one, two = inf, inf
      for three in nums:
        if three &amp;gt; two : return True
        elif three &amp;lt;= one: one = three
        else: two = three
      return False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++info 解析（GPT）&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;1. 递增三元组的性质&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假设数组中存在递增三元组 &lt;code&gt;a &amp;lt; b &amp;lt; c&lt;/code&gt;，它们的顺序在数组中是 &lt;strong&gt;前后顺序&lt;/strong&gt;，我们只关心：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个数最小&lt;/li&gt;
&lt;li&gt;第二个数比第一个数大&lt;/li&gt;
&lt;li&gt;第三个数比第二个数大&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;关键点&lt;/strong&gt;：我们不需要知道三元组具体位置，只需要保证存在。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;2. one 和 two 的作用&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;one&lt;/code&gt;：当前找到的&lt;strong&gt;最小的候选第一个数&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;two&lt;/code&gt;：在 &lt;code&gt;one&lt;/code&gt; 之后，找到的&lt;strong&gt;最小的候选第二个数&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;核心思想&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们并不是在找数组中所有可能的三元组，而是在&lt;strong&gt;维护最优候选序列&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;“最优候选”意味着 &lt;strong&gt;尽可能小的 one 和 two&lt;/strong&gt;，这样可以最大化出现第三个数 three 的机会。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;换句话说：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;遍历到一个数 three：&lt;ul&gt;
&lt;li&gt;如果 three &amp;gt; two → 说明找到了一个合法三元组（不管前面 one&amp;#x2F;two 是不是更新过的，都会形成合法的递增序列）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果 three &amp;lt;&amp;#x3D; one → 更新 one&lt;ul&gt;
&lt;li&gt;因为这个更小的 one 可以为之后出现的 two 提供更多可能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;否则 → 更新 two&lt;ul&gt;
&lt;li&gt;因为这个更小的 two 可以为之后出现的 three 提供更多可能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; &lt;strong&gt;3. 为什么不会漏掉任何情况&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假设数组中有递增三元组 &lt;code&gt;x &amp;lt; y &amp;lt; z&lt;/code&gt;，为什么算法一定能找到它？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当我们遍历到 x：&lt;ul&gt;
&lt;li&gt;one 会被更新为 ≤ x&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当我们遍历到 y：&lt;ul&gt;
&lt;li&gt;two 会被更新为 ≤ y&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当我们遍历到 z：&lt;ul&gt;
&lt;li&gt;如果 z &amp;gt; two → 返回 True&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;关键点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;即使 one&amp;#x2F;two 被后面更小的数更新过，&lt;strong&gt;old one&amp;#x2F;two 仍然保留了前序信息&lt;/strong&gt;，保证当前 three 大于某个二元组时，必然能形成递增三元组。&lt;/li&gt;
&lt;li&gt;换句话说，one&amp;#x2F;two 是动态维护的 &lt;strong&gt;最小可能序列候选&lt;/strong&gt;，任何真正存在的递增三元组都会被捕获。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;;;;id1 常规&lt;/p&gt;
&lt;p&gt;常规解法&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2 id=&#34;滑动窗口&#34;&gt;&lt;a href=&#34;#滑动窗口&#34; class=&#34;headerlink&#34; title=&#34;滑动窗口&#34;&gt;&lt;/a&gt;滑动窗口&lt;/h2&gt;&lt;h3 id=&#34;1208-尽可能使字符串相等&#34;&gt;&lt;a href=&#34;#1208-尽可能使字符串相等&#34; class=&#34;headerlink&#34; title=&#34;1208. 尽可能使字符串相等&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9nZXQtZXF1YWwtc3Vic3RyaW5ncy13aXRoaW4tYnVkZ2V0Lw==&#34;&gt;1208. 尽可能使字符串相等&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;给你两个长度相同的字符串，&lt;code&gt;s&lt;/code&gt; 和 &lt;code&gt;t&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;将 &lt;code&gt;s&lt;/code&gt; 中的第 &lt;code&gt;i&lt;/code&gt; 个字符变到 &lt;code&gt;t&lt;/code&gt; 中的第 &lt;code&gt;i&lt;/code&gt; 个字符需要 &lt;code&gt;|s[i] - t[i]|&lt;/code&gt; 的开销（开销可能为 0），也就是两个字符的 ASCII 码值的差的绝对值。&lt;/p&gt;
&lt;p&gt;用于变更字符串的最大预算是 &lt;code&gt;maxCost&lt;/code&gt;。在转化字符串时，总开销应当小于等于该预算，这也意味着字符串的转化可能是不完全的。&lt;/p&gt;
&lt;p&gt;如果你可以将 &lt;code&gt;s&lt;/code&gt; 的子字符串转化为它在 &lt;code&gt;t&lt;/code&gt; 中对应的子字符串，则返回可以转化的最大长度。&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;s&lt;/code&gt; 中没有子字符串可以转化成 &lt;code&gt;t&lt;/code&gt; 中对应的子字符串，则返回 &lt;code&gt;0&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;+++info 示例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;abcd&amp;quot;, t = &amp;quot;bcdf&amp;quot;, maxCost = 3
输出：3
解释：s 中的 &amp;quot;abc&amp;quot; 可以变为 &amp;quot;bcd&amp;quot;。开销为 3，所以最大长度为 3。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;abcd&amp;quot;, t = &amp;quot;cdef&amp;quot;, maxCost = 3
输出：1
解释：s 中的任一字符要想变成 t 中对应的字符，其开销都是 2。因此，最大长度为 1。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;abcd&amp;quot;, t = &amp;quot;acde&amp;quot;, maxCost = 0
输出：1
解释：a -&amp;gt; a, cost = 0，字符串未发生变化，所以最大长度为 1。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;两个长度相等字符串的 s 和 t ，把 i 位置的 s[i] 转成 t[i] 的开销是两者 ASCII 码之差的绝对值。题目给出了允许的最大预算 maxCost ，求不超过预算的情况下能够转换的最长子串。&lt;/p&gt;
&lt;p&gt;比如，对于 s &amp;#x3D; “abcd”, t &amp;#x3D; “bcdf”, cost &amp;#x3D; 3 而言，我们使用 costs[i] 表示从 s[i]  转成 t[i] 的开销，那么 costs &amp;#x3D; [1, 1, 1, 2] 。由于 maxCost &amp;#x3D; 3， 所以最多允许其前面三个字符进行转换。&lt;/p&gt;
&lt;p&gt;于是题目变成了：&lt;strong&gt;已知一个数组 costs ，求：和不超过 maxCost 时最长的子数组的长度&lt;/strong&gt;。&lt;/p&gt;


&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution:
    def equalSubstring(self, s: str, t: str, maxCost: int) -&amp;gt; int:
        n = len(s)
        left, right = 0, 0
        result = 0
        cost = 0
        while right &amp;lt; n:
            cost += abs(ord(s[right]) - ord(t[right]))
            while cost &amp;gt; maxCost:
                cost -= abs(ord(s[left]) - ord(t[left]))
                left += 1
                
            result = max(result, right - left + 1)
            right += 1
        return result
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;《挑战程序设计竞赛》这本书中把滑动窗口叫做「虫取法」，我觉得非常生动形象。因为滑动窗口的两个指针移动的过程和虫子爬动的过程非常像：前脚不动，把后脚移动过来；后脚不动，把前脚向前移动。&lt;/p&gt;
&lt;p&gt;+++info 滑动窗口问题模板&lt;/p&gt;
&lt;p&gt;我分享一个滑动窗口的模板，能解决大多数的滑动窗口问题（&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9tYXgtY29uc2VjdXRpdmUtb25lcy1paWkv&#34;&gt;1004. 最大连续1的个数 III&lt;/span&gt;，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9sb25nZXN0LXJlcGVhdGluZy1jaGFyYWN0ZXItcmVwbGFjZW1lbnQv&#34;&gt;424. 替换后的最长重复字符&lt;/span&gt;）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def findSubArray(nums):
    N = len(nums) # 数组/字符串长度
    left, right = 0, 0 # 双指针，表示当前遍历的区间[left, right]，闭区间
    sums = 0 # 用于统计 子数组/子区间 是否有效，根据题目可能会改成求和/计数
    res = 0 # 保存最大的满足题目要求的 子数组/子串 长度
    while right &amp;lt; N: # 当右边的指针没有搜索到 数组/字符串 的结尾
        sums += nums[right] # 增加当前右边指针的数字/字符的求和/计数
        while 区间[left, right]不符合题意：# 此时需要一直移动左指针，直至找到一个符合题意的区间
            sums -= nums[left] # 移动左指针前需要从counter中减少left位置字符的求和/计数
            left += 1 # 真正的移动左指针，注意不能跟上面一行代码写反
        # 到 while 结束时，我们找到了一个符合题意要求的 子数组/子串
        res = max(res, right - left + 1) # 需要更新结果
        right += 1 # 移动右指针，去探索新的区间
    return res
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;滑动窗口中用到了左右两个指针，它们移动的思路是：以右指针作为驱动，拖着左指针向前走。右指针每次只移动一步，而左指针在内部 while 循环中每次可能移动多步。右指针是主动前移，探索未知的新区域；左指针是被迫移动，负责寻找满足题意的区间。&lt;/p&gt;
&lt;p&gt;模板的整体思想是：&lt;/p&gt;
&lt;p&gt;定义两个指针 left 和 right 分别指向区间的开头和结尾，注意是闭区间；定义 sums 用来统计该区间内的各个字符出现次数；&lt;br&gt;第一重 while 循环是为了判断 right 指针的位置是否超出了数组边界；当 right 每次到了新位置，需要增加 right 指针的求和&amp;#x2F;计数；&lt;br&gt;第二重 while 循环是让 left 指针向右移动到 [left, right] 区间符合题意的位置；当 left 每次移动到了新位置，需要减少 left 指针的求和&amp;#x2F;计数；&lt;br&gt;在第二重 while 循环之后，成功找到了一个符合题意的 [left, right] 区间，题目要求最大的区间长度，因此更新 res 为 max(res, 当前区间的长度) 。&lt;br&gt;right 指针每次向右移动一步，开始探索新的区间。&lt;br&gt;模板中的 sums 需要根据题目意思具体去修改，本题是求和题目因此把sums 定义成整数用于求和；如果是计数题目，就需要改成字典用于计数。当左右指针发生变化的时候，都需要更新 sums 。&lt;/p&gt;
&lt;p&gt;另外一个需要根据题目去修改的是内层 while 循环的判断条件，即： 区间[left, right]不符合题意 。对于本题而言，就是该区内的和 sums 超过了 maxCost 。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;作者：负雪明烛&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9nZXQtZXF1YWwtc3Vic3RyaW5ncy13aXRoaW4tYnVkZ2V0L3NvbHV0aW9ucy81OTIzNTQvZmVuLXhpYW5nLXpoZW4tY2FuZy1kZS1odWEtZG9uZy1jaHVhbmctay1lM3JkLw==&#34;&gt;https://leetcode.cn/problems/get-equal-substrings-within-budget/solutions/592354/fen-xiang-zhen-cang-de-hua-dong-chuang-k-e3rd/&lt;/span&gt;&lt;br&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;424-替换后的最长重复字符&#34;&gt;&lt;a href=&#34;#424-替换后的最长重复字符&#34; class=&#34;headerlink&#34; title=&#34;424. 替换后的最长重复字符&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9sb25nZXN0LXJlcGVhdGluZy1jaGFyYWN0ZXItcmVwbGFjZW1lbnQv&#34;&gt;424. 替换后的最长重复字符&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;给你一个字符串 &lt;code&gt;s&lt;/code&gt; 和一个整数 &lt;code&gt;k&lt;/code&gt; 。你可以选择字符串中的任一字符，并将其更改为任何其他大写英文字符。该操作最多可执行 &lt;code&gt;k&lt;/code&gt; 次。&lt;/p&gt;
&lt;p&gt;在执行上述操作后，返回 &lt;em&gt;包含相同字母的最长子字符串的长度。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;+++info 示例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;ABAB&amp;quot;, k = 2
输出：4
解释：用两个&amp;#39;A&amp;#39;替换为两个&amp;#39;B&amp;#39;,反之亦然。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;AABABBA&amp;quot;, k = 1
输出：4
解释：
将中间的一个&amp;#39;A&amp;#39;替换为&amp;#39;B&amp;#39;,字符串变为 &amp;quot;AABBBBA&amp;quot;。
子串 &amp;quot;BBBB&amp;quot; 有最长重复字母, 答案为 4。
可能存在其他的方法来得到同样的结果。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;本题解根据常规的滑动窗口思路进行解题，不需要任何的技巧。&lt;br&gt;滑动窗口法是指通过Left以及Right指针来框定一个窗口，当在窗口内的字符串满足题目要求则记录下当前窗口长度并进一步扩张寻找更长的窗口，若不满足则进行窗口平移。&lt;br&gt;题目中给定的K值是让我们在选定有效窗口时的要求放宽了：&lt;/p&gt;
&lt;p&gt;当K&amp;#x3D;0时，要求滑动窗口内部的所有字母都必须相同；&lt;br&gt;而当K&amp;gt;0时，要求滑动窗口内最多替换K次使得所有字母都必须相同。这里有一个关键点，即我们将当前滑动窗口内出现次数最多的字母作为基准字母（Benchmark），那么其他不一样的字母(Others)都选择替换操作即可以最小的代价转换为全部相同的字母。&lt;br&gt;因此，我们首先通过一个数组(count)记录所有字母在当前窗口出现的次数，通过Max函数选择窗口内的基准字母，然后其他字母出现的次数为Sum(count)-Max(count)，通过与K进行比较，即可知道当前窗口是否有效，下一步是继续扩张还是位移。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution:
    def characterReplacement(self, s: str, k: int) -&amp;gt; int:
        count = [0 for _ in range(26)]  #记录当前窗口的字母出现次数
        
        left = 0    #滑动窗口左边界
        right = 0   #滑动窗口右边界
        retval = 0  #最长窗口长度
        
        while right &amp;lt; len(s):
            count[ord(s[right])-ord(&amp;#39;A&amp;#39;)] += 1  
            benchmark = max(count)              #选择出现次数最多的字母为基准 
            others = sum(count) - benchmark     #则其他字母需要通过替换操作来变为基准
            if others &amp;lt;= k:                     #通过与K进行比较来判断窗口是进行扩张？
                right += 1
                retval = max(retval, right-left)#记录当前有效窗口长度
            else:                               #通过与K进行比较来判断窗口还是进行位移？
                count[ord(s[left])-ord(&amp;#39;A&amp;#39;)] -= 1
                left += 1
                right += 1                      #这里注意：位移操作需要整个向右移，不仅仅只是left向右
        
        return retval                           #返回最长窗口长度
        
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者：Derrick.S&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9sb25nZXN0LXJlcGVhdGluZy1jaGFyYWN0ZXItcmVwbGFjZW1lbnQvc29sdXRpb25zLzc5OTAxMy9odWEtZG9uZy1jaHVhbmcta291LWZhLWppYW4tZGFuLXlpLWRvbmctM3F3ZWwv&#34;&gt;https://leetcode.cn/problems/longest-repeating-character-replacement/solutions/799013/hua-dong-chuang-kou-fa-jian-dan-yi-dong-3qwel/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2 id=&#34;前缀和&#34;&gt;&lt;a href=&#34;#前缀和&#34; class=&#34;headerlink&#34; title=&#34;前缀和&#34;&gt;&lt;/a&gt;前缀和&lt;/h2&gt;&lt;h3 id=&#34;724-寻找数组的中心下标&#34;&gt;&lt;a href=&#34;#724-寻找数组的中心下标&#34; class=&#34;headerlink&#34; title=&#34;724. 寻找数组的中心下标&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9maW5kLXBpdm90LWluZGV4Lw==&#34;&gt;724. 寻找数组的中心下标&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;给你一个整数数组 &lt;code&gt;nums&lt;/code&gt; ，请计算数组的 &lt;strong&gt;中心下标&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;数组 &lt;strong&gt;中心下标&lt;/strong&gt; 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。&lt;/p&gt;
&lt;p&gt;如果中心下标位于数组最左端，那么左侧数之和视为 &lt;code&gt;0&lt;/code&gt; ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。&lt;/p&gt;
&lt;p&gt;如果数组有多个中心下标，应该返回 &lt;strong&gt;最靠近左边&lt;/strong&gt; 的那一个。如果数组不存在中心下标，返回 &lt;code&gt;-1&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;+++info 示例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [1, 7, 3, 6, 5, 6]
输出：3
解释：
中心下标是 3 。
左侧数之和 sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11 ，
右侧数之和 sum = nums[4] + nums[5] = 5 + 6 = 11 ，二者相等。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [1, 2, 3]
输出：-1
解释：
数组中不存在满足此条件的中心下标。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：nums = [2, 1, -1]
输出：0
解释：
中心下标是 0 。
左侧数之和 sum = 0 ，（下标 0 左侧不存在元素），
右侧数之和 sum = nums[1] + nums[2] = 1 + -1 = 0 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;设 nums 的元素之和为 s。&lt;/p&gt;
&lt;p&gt;设中心下标为 i，其左侧元素和为 $leftS&amp;#x3D;nums[0]+nums[1]+⋯+nums[i−1]$，那么右侧元素和为 $s−nums[i]−leftS$。&lt;/p&gt;
&lt;p&gt;由于左侧元素和等于右侧元素和，所以有&lt;/p&gt;
&lt;p&gt;$$leftS&amp;#x3D;s−nums[i]−leftS$$&lt;br&gt;即&lt;/p&gt;
&lt;p&gt;$$2⋅leftS&amp;#x3D;s−nums[i]$$&lt;br&gt;从左到右遍历数组，一边遍历，一边累加元素更新 leftS。每次累加前，检查是否满足上式，满足则返回 i。&lt;/p&gt;
&lt;p&gt;如果不存在这样的 i，返回 −1。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution:
    def pivotIndex(self, nums: List[int]) -&amp;gt; int:
        s = sum(nums)
        sum_left = 0
        for i, num in enumerate(nums):
            if 2*sum_left == s - num:
                return i
            sum_left += num
        return -1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者：灵茶山艾府&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9maW5kLXBpdm90LWluZGV4L3NvbHV0aW9ucy8yODM0Njg3L2ppYW4tamkteGllLWZhLW8xLWUtd2FpLWtvbmctamlhbi1weXRob24tdHowcC8=&#34;&gt;https://leetcode.cn/problems/find-pivot-index/solutions/2834687/jian-ji-xie-fa-o1-e-wai-kong-jian-python-tz0p/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;2352-相等行列对&#34;&gt;&lt;a href=&#34;#2352-相等行列对&#34; class=&#34;headerlink&#34; title=&#34;2352. 相等行列对&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9lcXVhbC1yb3ctYW5kLWNvbHVtbi1wYWlycy8=&#34;&gt;2352. 相等行列对&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;给你一个下标从 &lt;strong&gt;0&lt;/strong&gt; 开始、大小为 &lt;code&gt;n x n&lt;/code&gt; 的整数矩阵 &lt;code&gt;grid&lt;/code&gt; ，返回满足 &lt;code&gt;Ri&lt;/code&gt; 行和 &lt;code&gt;Cj&lt;/code&gt; 列相等的行列对 &lt;code&gt;(Ri, Cj)&lt;/code&gt; 的数目*。*&lt;/p&gt;
&lt;p&gt;如果行和列以相同的顺序包含相同的元素（即相等的数组），则认为二者是相等的。&lt;/p&gt;
&lt;p&gt;::: info no-icon&lt;/p&gt;
&lt;p&gt;用哈希表统计每行出现的次数，然后遍历列，累加哈希表中列出现的次数。&lt;/p&gt;
&lt;p&gt;作者：灵茶山艾府&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9lcXVhbC1yb3ctYW5kLWNvbHVtbi1wYWlycy9zb2x1dGlvbnMvMTY5NDA0Ny9oYS14aS1iaWFvLXB5dGhvbi1saWFuZy14aW5nLWJ5LWVuZGxlc3NjLWxqYWUv&#34;&gt;https://leetcode.cn/problems/equal-row-and-column-pairs/solutions/1694047/ha-xi-biao-python-liang-xing-by-endlessc-ljae/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;;;;id2 Demo 1&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution:
    def equalPairs(self, grid: List[List[int]]) -&amp;gt; int:
        cnt = Counter(tuple(row) for row in grid)
        return sum(cnt[col] for col in zip(*grid))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;;;;id2 Demo2&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution:
    def equalPairs(self, grid: List[List[int]]) -&amp;gt; int:
        n = len(grid)
        count = &amp;#123;&amp;#125;
        result = 0
        for i in range(n):
            count[tuple(grid[i])] = count.get(tuple(grid[i]), 0) + 1
        print(count)
        for j in zip(*grid):
            print(j)
            result += count.get(j,0)
            # print(grid[:][j], grid[j][:])
        return result
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2 id=&#34;栈与队列&#34;&gt;&lt;a href=&#34;#栈与队列&#34; class=&#34;headerlink&#34; title=&#34;栈与队列&#34;&gt;&lt;/a&gt;栈与队列&lt;/h2&gt;&lt;h3 id=&#34;735-小行星碰撞&#34;&gt;&lt;a href=&#34;#735-小行星碰撞&#34; class=&#34;headerlink&#34; title=&#34;735. 小行星碰撞&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9hc3Rlcm9pZC1jb2xsaXNpb24v&#34;&gt;735. 小行星碰撞&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;给定一个整数数组 &lt;code&gt;asteroids&lt;/code&gt;，表示在同一行的小行星。数组中小行星的索引表示它们在空间中的相对位置。&lt;/p&gt;
&lt;p&gt;对于数组中的每一个元素，其绝对值表示小行星的大小，正负表示小行星的移动方向（正表示向右移动，负表示向左移动）。每一颗小行星以相同的速度移动。&lt;/p&gt;
&lt;p&gt;找出碰撞后剩下的所有小行星。碰撞规则：两个小行星相互碰撞，较小的小行星会爆炸。如果两颗小行星大小相同，则两颗小行星都会爆炸。两颗移动方向相同的小行星，永远不会发生碰撞。&lt;/p&gt;
&lt;p&gt;+++info 示例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：asteroids = [5,10,-5]
输出：[5,10]
解释：10 和 -5 碰撞后只剩下 10 。 5 和 10 永远不会发生碰撞。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：asteroids = [8,-8]
输出：[]
解释：8 和 -8 碰撞后，两者都发生爆炸。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：asteroids = [10,2,-5]
输出：[10]
解释：2 和 -5 发生碰撞后剩下 -5 。10 和 -5 发生碰撞后剩下 10 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;这道栈的题目难点应该主要是在分析场景上了。&lt;br&gt;我们需要明确什么时候无脑入栈，什么时候需要判断，理解这两点就可以轻松解题了。&lt;br&gt;首先，循环每一个元素时，在什么情况下无脑入栈呢？&lt;/p&gt;
&lt;p&gt;栈为空&lt;br&gt;栈顶元素为负数(下一个为负数则一起向左，下一个为正数则分向两边)&lt;br&gt;当前元素为正数（栈顶为正一起向右，栈顶为负分向两边）&lt;br&gt;下来，我们需要看碰撞的场景又细分为什么情况：&lt;/p&gt;
&lt;p&gt;栈顶元素大于abs(当前元素)，当前元素被撞毁&lt;br&gt;栈顶元素等于abs(当前元素)，栈顶弹出和当前元素抵消&lt;br&gt;栈顶元素小于abs(当前元素)，栈顶弹出，并与新栈顶完成上述判断&lt;br&gt;最终返回栈即可。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution:
    def asteroidCollision(self, asteroids: List[int]) -&amp;gt; List[int]:
        stack, index = [], 0
        while index &amp;lt; len(asteroids):
            ast = asteroids[index]
            if ast &amp;gt; 0 or len(stack)==0 or stack[-1]&amp;lt;0: stack.append(ast)
            elif stack[-1] &amp;lt;= - ast:
                if stack.pop(-1) &amp;lt; - ast:
                    continue
            index += 1
        return stack
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者：清风Python&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9hc3Rlcm9pZC1jb2xsaXNpb24vc29sdXRpb25zLzk5NDEwMC83MzV4aW5nLXhpbmctcGVuZy16aHVhbmctamkteXUtemhhbi1xdS1mLXhwZDEv&#34;&gt;https://leetcode.cn/problems/asteroid-collision/solutions/994100/735xing-xing-peng-zhuang-ji-yu-zhan-qu-f-xpd1/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;394-字符串解码&#34;&gt;&lt;a href=&#34;#394-字符串解码&#34; class=&#34;headerlink&#34; title=&#34;394. 字符串解码&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9kZWNvZGUtc3RyaW5nLw==&#34;&gt;394. 字符串解码&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;给定一个经过编码的字符串，返回它解码后的字符串。&lt;/p&gt;
&lt;p&gt;编码规则为: &lt;code&gt;k[encoded_string]&lt;/code&gt;，表示其中方括号内部的 &lt;code&gt;encoded_string&lt;/code&gt; 正好重复 &lt;code&gt;k&lt;/code&gt; 次。注意 &lt;code&gt;k&lt;/code&gt; 保证为正整数。&lt;/p&gt;
&lt;p&gt;你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。&lt;/p&gt;
&lt;p&gt;此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 &lt;code&gt;k&lt;/code&gt; ，例如不会出现像 &lt;code&gt;3a&lt;/code&gt; 或 &lt;code&gt;2[4]&lt;/code&gt; 的输入。&lt;/p&gt;
&lt;p&gt;测试用例保证输出的长度不会超过 &lt;code&gt;105&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;+++info 示例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;3[a]2[bc]&amp;quot;
输出：&amp;quot;aaabcbc&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;3[a2[c]]&amp;quot;
输出：&amp;quot;accaccacc&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;2[abc]3[cd]ef&amp;quot;
输出：&amp;quot;abcabccdcdcdef&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 4：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：s = &amp;quot;abc3[cd]xyz&amp;quot;
输出：&amp;quot;abccdcdcdxyz&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;本题难点在于括号内嵌套括号，需要从内向外生成与拼接字符串，这与栈的先入后出特性对应。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;算法流程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;构建辅助栈 stack， 遍历字符串 s 中每个字符 c；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当 c 为数字时，将数字字符转化为数字 multi，用于后续倍数计算；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当 c 为字母时，在 res 尾部添加 c；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当 c 为 [ 时，将当前 multi 和 res 入栈，并分别置空置 0：&lt;br&gt;记录此 [ 前的临时结果 res 至栈，用于发现对应 ] 后的拼接操作；&lt;br&gt;记录此 [ 前的倍数 multi 至栈，用于发现对应 ] 后，获取 multi × […] 字符串。&lt;br&gt;进入到新 [ 后，res 和 multi 重新记录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当 c 为 ] 时，stack 出栈，拼接字符串 res &amp;#x3D; last_res + cur_multi * res，其中:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;last_res是上个 [ 到当前 [ 的字符串，例如 “3[a2[c]]” 中的 a；&lt;/li&gt;
&lt;li&gt;cur_multi是当前 [ 到 ] 内字符串的重复倍数，例如 “3[a2[c]]” 中的 2。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;返回字符串 res。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution:
    def decodeString(self, s: str) -&amp;gt; str:
        result = &amp;#39;&amp;#39;
        stack = []
        res, num = &amp;#39;&amp;#39;, 0
        for c in s:
            if c == &amp;#39;[&amp;#39;:
                stack.append((res, num))
                res, num = &amp;#39;&amp;#39;, 0
            elif c == &amp;#39;]&amp;#39;:
                out_res, out_num = stack.pop()
                res = out_res + out_num*res
            elif &amp;#39;0&amp;#39;&amp;lt;= c &amp;lt;= &amp;#39;9&amp;#39;:
                num = num*10 + int(c)
            else:
                res += c
        return res
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者：Krahets&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9kZWNvZGUtc3RyaW5nL3NvbHV0aW9ucy8xOTQ0Ny9kZWNvZGUtc3RyaW5nLWZ1LXpodS16aGFuLWZhLWRpLWd1aS1mYS1ieS1qeWQv&#34;&gt;https://leetcode.cn/problems/decode-string/solutions/19447/decode-string-fu-zhu-zhan-fa-di-gui-fa-by-jyd/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;649-Dota2-参议院&#34;&gt;&lt;a href=&#34;#649-Dota2-参议院&#34; class=&#34;headerlink&#34; title=&#34;649. Dota2 参议院&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9kb3RhMi1zZW5hdGUv&#34;&gt;649. Dota2 参议院&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;Dota2 的世界里有两个阵营：&lt;code&gt;Radiant&lt;/code&gt;（天辉）和 &lt;code&gt;Dire&lt;/code&gt;（夜魇）&lt;/p&gt;
&lt;p&gt;Dota2 参议院由来自两派的参议员组成。现在参议院希望对一个 Dota2 游戏里的改变作出决定。他们以一个基于轮为过程的投票进行。在每一轮中，每一位参议员都可以行使两项权利中的 &lt;strong&gt;一&lt;/strong&gt; 项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;禁止一名参议员的权利&lt;/strong&gt;：参议员可以让另一位参议员在这一轮和随后的几轮中丧失 &lt;strong&gt;所有的权利&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;宣布胜利&lt;/strong&gt;：如果参议员发现有权利投票的参议员都是 &lt;strong&gt;同一个阵营的&lt;/strong&gt; ，他可以宣布胜利并决定在游戏中的有关变化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;给你一个字符串 &lt;code&gt;senate&lt;/code&gt; 代表每个参议员的阵营。字母 &lt;code&gt;&amp;#39;R&amp;#39;&lt;/code&gt; 和 &lt;code&gt;&amp;#39;D&amp;#39;&lt;/code&gt;分别代表了 &lt;code&gt;Radiant&lt;/code&gt;（天辉）和 &lt;code&gt;Dire&lt;/code&gt;（夜魇）。然后，如果有 &lt;code&gt;n&lt;/code&gt; 个参议员，给定字符串的大小将是 &lt;code&gt;n&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;以轮为基础的过程从给定顺序的第一个参议员开始到最后一个参议员结束。这一过程将持续到投票结束。所有失去权利的参议员将在过程中被跳过。&lt;/p&gt;
&lt;p&gt;假设每一位参议员都足够聪明，会为自己的政党做出最好的策略，你需要预测哪一方最终会宣布胜利并在 Dota2 游戏中决定改变。输出应该是 &lt;code&gt;&amp;quot;Radiant&amp;quot;&lt;/code&gt; 或 &lt;code&gt;&amp;quot;Dire&amp;quot;&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;+++info 示例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：senate = &amp;quot;RD&amp;quot;
输出：&amp;quot;Radiant&amp;quot;
解释：
第 1 轮时，第一个参议员来自 Radiant 阵营，他可以使用第一项权利让第二个参议员失去所有权利。
这一轮中，第二个参议员将会被跳过，因为他的权利被禁止了。
第 2 轮时，第一个参议员可以宣布胜利，因为他是唯一一个有投票权的人。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：senate = &amp;quot;RDD&amp;quot;
输出：&amp;quot;Dire&amp;quot;
解释：
第 1 轮时，第一个来自 Radiant 阵营的参议员可以使用第一项权利禁止第二个参议员的权利。
这一轮中，第二个来自 Dire 阵营的参议员会将被跳过，因为他的权利被禁止了。
这一轮中，第三个来自 Dire 阵营的参议员可以使用他的第一项权利禁止第一个参议员的权利。
因此在第二轮只剩下第三个参议员拥有投票的权利,于是他可以宣布胜利
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;这道题模拟了一个游戏过程，最终当有权利投票的参议员都是 同一个阵营的 ，这个阵营即获胜。&lt;/p&gt;
&lt;p&gt;那么两个阵营的每个参议员为了获胜，当他拥有权力的时候，一定是会将自己之后首个对立阵营的参议员的权力禁止掉。【这就是每一位参议会为自己的政党做出最好的策略】。请注意：当之后没有对立阵营的参议员的时候，相当于将之前的参议员加到其之后。&lt;/p&gt;










&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution:
    def predictPartyVictory(self, senate: str) -&amp;gt; str:
        radiants, dires = [], []
        n = len(senate)
        for i, se in enumerate(senate):
            if se == &amp;#39;R&amp;#39;: radiants.append(i)
            else: dires.append(i)
        while radiants and dires:
            if radiants[0] &amp;lt; dires[0]:
                dires.pop(0)
                radiants.append(radiants.pop(0) + n)
            else:
                radiants.pop(0)
                dires.append(dires.pop(0) + n)
        return &amp;quot;Radiant&amp;quot; if radiants else &amp;#39;Dire&amp;#39;
        
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者：画图小匠&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9kb3RhMi1zZW5hdGUvc29sdXRpb25zLzI4NjIxMTUvamF2YXB5dGhvbjNjZHVpLWxpZS1tby1uaS1qaW4temhpLXpoaS1oby1sNHBiLw==&#34;&gt;https://leetcode.cn/problems/dota2-senate/solutions/2862115/javapython3cdui-lie-mo-ni-jin-zhi-zhi-ho-l4pb/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2 id=&#34;链表&#34;&gt;&lt;a href=&#34;#链表&#34; class=&#34;headerlink&#34; title=&#34;链表&#34;&gt;&lt;/a&gt;链表&lt;/h2&gt;&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;找中间节点：快慢指针&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;中间值左侧：需要加一个dummy节点。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dummy = ListNode(0, head)
slow, fast = dummy, dummy
while fast and fast.next:
    fast = fast.next.next
    if not fast: break
    slow = slow.next
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;中间值右侧：直接从head开始&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;slow, fast = head, head
while fast and fast.next:
    fast = fast.next.next
    if not fast: break
    slow = slow.next
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;2095-删除链表的中间节点&#34;&gt;&lt;a href=&#34;#2095-删除链表的中间节点&#34; class=&#34;headerlink&#34; title=&#34;2095. 删除链表的中间节点&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9kZWxldGUtdGhlLW1pZGRsZS1ub2RlLW9mLWEtbGlua2VkLWxpc3Qv&#34;&gt;2095. 删除链表的中间节点&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;给你一个链表的头节点 &lt;code&gt;head&lt;/code&gt; 。&lt;strong&gt;删除&lt;/strong&gt; 链表的 &lt;strong&gt;中间节点&lt;/strong&gt; ，并返回修改后的链表的头节点 &lt;code&gt;head&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;长度为 &lt;code&gt;n&lt;/code&gt; 链表的中间节点是从头数起第 &lt;code&gt;⌊n / 2⌋&lt;/code&gt; 个节点（下标从 &lt;strong&gt;0&lt;/strong&gt; 开始），其中 &lt;code&gt;⌊x⌋&lt;/code&gt; 表示小于或等于 &lt;code&gt;x&lt;/code&gt; 的最大整数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于 &lt;code&gt;n&lt;/code&gt; &amp;#x3D; &lt;code&gt;1&lt;/code&gt;、&lt;code&gt;2&lt;/code&gt;、&lt;code&gt;3&lt;/code&gt;、&lt;code&gt;4&lt;/code&gt; 和 &lt;code&gt;5&lt;/code&gt; 的情况，中间节点的下标分别是 &lt;code&gt;0&lt;/code&gt;、&lt;code&gt;1&lt;/code&gt;、&lt;code&gt;1&lt;/code&gt;、&lt;code&gt;2&lt;/code&gt; 和 &lt;code&gt;2&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; :::info no-icon&lt;/p&gt;
&lt;p&gt;本题可遍历计数先得到 n，再遍历一次删除指定节点即可，这很简单。本篇讲的是快慢指针这种方法。&lt;/p&gt;
&lt;p&gt;我们令 fast 和 slow 这两个指针同时前进，fast 每次移动两格，slow 每次移动一格，在检测到 &lt;code&gt;fast.next == null&lt;/code&gt; 或者 &lt;code&gt;fast.next.next == null&lt;/code&gt; 时退出循环。&lt;/p&gt;
&lt;p&gt;引入一个哑巴节点 dummy 便于处理，考虑循环停止时的场景。&lt;br&gt;为方便考虑，本篇题解认为原链表下标从 1 开始，需要删除第 $⌊\frac{n}{2}⌋+1$ 个节点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 &lt;em&gt;n&lt;/em&gt; 为偶数，如下所示。设 &lt;em&gt;n&lt;/em&gt;&amp;#x3D;2&lt;em&gt;k&lt;/em&gt;，fast 停在第 2&lt;em&gt;k&lt;/em&gt; 个节点，slow 停在第 &lt;em&gt;k&lt;/em&gt; 即 $⌊\frac{n}{2}⌋$ 个节点。&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
&lt;li&gt;如果 &lt;em&gt;n&lt;/em&gt; 为奇数，如下所示，设 &lt;em&gt;n&lt;/em&gt;&amp;#x3D;2&lt;em&gt;k&lt;/em&gt;+1。fast 停在第 2&lt;em&gt;k&lt;/em&gt; 个节点，slow 停在第 &lt;em&gt;k&lt;/em&gt; 即 $⌊\frac{n}{2}⌋$ 个节点。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;所以退出循环时 slow 一定停在 $⌊\frac{n}{2}⌋$ 个节点，令 &lt;code&gt;slow.next = slow.next.next&lt;/code&gt; 即删除了 $⌊\frac{n}{2}⌋+1$ 个节点。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def deleteMiddle(self, head: Optional[ListNode]) -&amp;gt; Optional[ListNode]:
        zero = ListNode(0, head)
        slow, fast = zero, zero
        while fast and fast.next:
            fast = fast.next.next
            if not fast: break
            slow = slow.next
        slow.next = slow.next.next
        return zero.next

        
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者：Shawxing精讲算法&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9kZWxldGUtdGhlLW1pZGRsZS1ub2RlLW9mLWEtbGlua2VkLWxpc3Qvc29sdXRpb25zLzI4NDQyMjkvamlhbi1taW5nLXlhbi1qaW4tZGUta3VhaS1tYW4temhpLXpoZW4tZi04NHN4Lw==&#34;&gt;https://leetcode.cn/problems/delete-the-middle-node-of-a-linked-list/solutions/2844229/jian-ming-yan-jin-de-kuai-man-zhi-zhen-f-84sx/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;328-奇偶链表&#34;&gt;&lt;a href=&#34;#328-奇偶链表&#34; class=&#34;headerlink&#34; title=&#34;328. 奇偶链表&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9vZGQtZXZlbi1saW5rZWQtbGlzdC8=&#34;&gt;328. 奇偶链表&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;给定单链表的头节点 &lt;code&gt;head&lt;/code&gt; ，将所有索引为奇数的节点和索引为偶数的节点分别分组，保持它们原有的相对顺序，然后把偶数索引节点分组连接到奇数索引节点分组之后，返回重新排序的链表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一个&lt;/strong&gt;节点的索引被认为是 &lt;strong&gt;奇数&lt;/strong&gt; ， &lt;strong&gt;第二个&lt;/strong&gt;节点的索引为 &lt;strong&gt;偶数&lt;/strong&gt; ，以此类推。&lt;/p&gt;
&lt;p&gt;请注意，偶数组和奇数组内部的相对顺序应该与输入时保持一致。&lt;/p&gt;
&lt;p&gt;你必须在 &lt;code&gt;O(1)&lt;/code&gt; 的额外空间复杂度和 &lt;code&gt;O(n)&lt;/code&gt; 的时间复杂度下解决这个问题。&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;如果链表为空，则直接返回链表。&lt;/p&gt;
&lt;p&gt;对于原始链表，每个节点都是奇数节点或偶数节点。头节点是奇数节点，头节点的后一个节点是偶数节点，相邻节点的奇偶性不同。因此可以将奇数节点和偶数节点分离成奇数链表和偶数链表，然后将偶数链表连接在奇数链表之后，合并后的链表即为结果链表。&lt;/p&gt;
&lt;p&gt;原始链表的头节点 head 也是奇数链表的头节点以及结果链表的头节点，head 的后一个节点是偶数链表的头节点。令 evenHead &amp;#x3D; head.next，则 evenHead 是偶数链表的头节点。&lt;/p&gt;
&lt;p&gt;维护两个指针 odd 和 even 分别指向奇数节点和偶数节点，初始时 odd &amp;#x3D; head，even &amp;#x3D; evenHead。通过迭代的方式将奇数节点和偶数节点分离成两个链表，每一步首先更新奇数节点，然后更新偶数节点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;更新奇数节点时，奇数节点的后一个节点需要指向偶数节点的后一个节点，因此令 odd.next &amp;#x3D; even.next，然后令 odd &amp;#x3D; odd.next，此时 odd 变成 even 的后一个节点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更新偶数节点时，偶数节点的后一个节点需要指向奇数节点的后一个节点，因此令 even.next &amp;#x3D; odd.next，然后令 even &amp;#x3D; even.next，此时 even 变成 odd 的后一个节点。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;








&lt;p&gt;在上述操作之后，即完成了对一个奇数节点和一个偶数节点的分离。重复上述操作，直到全部节点分离完毕。全部节点分离完毕的条件是 even 为空节点或者 even.next 为空节点，此时 odd 指向最后一个奇数节点（即奇数链表的最后一个节点）。&lt;/p&gt;
&lt;p&gt;最后令 odd.next &amp;#x3D; evenHead，将偶数链表连接在奇数链表之后，即完成了奇数链表和偶数链表的合并，结果链表的头节点仍然是 head。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def oddEvenList(self, head: Optional[ListNode]) -&amp;gt; Optional[ListNode]:
        if not head: return head
        even_head = head.next
        odd, even = head, even_head
        while even and even.next:
            odd.next = even.next
            odd = odd.next
            even.next = odd.next
            even = even.next
        odd.next = even_head
        return head
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者：力扣官方题解&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9vZGQtZXZlbi1saW5rZWQtbGlzdC9zb2x1dGlvbnMvNDgyNzM3L3FpLW91LWxpYW4tYmlhby1ieS1sZWV0Y29kZS1zb2x1dGlvbi8=&#34;&gt;https://leetcode.cn/problems/odd-even-linked-list/solutions/482737/qi-ou-lian-biao-by-leetcode-solution/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;2130-链表最大孪生和&#34;&gt;&lt;a href=&#34;#2130-链表最大孪生和&#34; class=&#34;headerlink&#34; title=&#34;2130. 链表最大孪生和&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9tYXhpbXVtLXR3aW4tc3VtLW9mLWEtbGlua2VkLWxpc3Qv&#34;&gt;2130. 链表最大孪生和&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;在一个大小为 &lt;code&gt;n&lt;/code&gt; 且 &lt;code&gt;n&lt;/code&gt; 为 &lt;strong&gt;偶数&lt;/strong&gt; 的链表中，对于 &lt;code&gt;0 &amp;lt;= i &amp;lt;= (n / 2) - 1&lt;/code&gt; 的 &lt;code&gt;i&lt;/code&gt; ，第 &lt;code&gt;i&lt;/code&gt; 个节点（下标从 &lt;strong&gt;0&lt;/strong&gt; 开始）的孪生节点为第 &lt;code&gt;(n-1-i)&lt;/code&gt; 个节点 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比方说，&lt;code&gt;n = 4&lt;/code&gt; 那么节点 &lt;code&gt;0&lt;/code&gt; 是节点 &lt;code&gt;3&lt;/code&gt; 的孪生节点，节点 &lt;code&gt;1&lt;/code&gt; 是节点 &lt;code&gt;2&lt;/code&gt; 的孪生节点。这是长度为 &lt;code&gt;n = 4&lt;/code&gt; 的链表中所有的孪生节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;孪生和&lt;/strong&gt; 定义为一个节点和它孪生节点两者值之和。&lt;/p&gt;
&lt;p&gt;给你一个长度为偶数的链表的头节点 &lt;code&gt;head&lt;/code&gt; ，请你返回链表的 &lt;strong&gt;最大孪生和&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt; +++info 示例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;输入：head = [5,4,2,1]
输出：6
解释：
节点 0 和节点 1 分别是节点 3 和 2 的孪生节点。孪生和都为 6 。
链表中没有其他孪生节点。
所以，链表的最大孪生和是 6 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;输入：head = [4,2,2,3]
输出：7
解释：
链表中的孪生节点为：
- 节点 0 是节点 3 的孪生节点，孪生和为 4 + 3 = 7 。
- 节点 1 是节点 2 的孪生节点，孪生和为 2 + 2 = 4 。
所以，最大孪生和为 max(7, 4) = 7 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;核心思想：寻找链表中间值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下两种方法的快慢指针有所不同，参见&lt;a href=&#34;#%E9%93%BE%E8%A1%A8&#34;&gt;链表&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;;;;id3 快慢指针+反转链表&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def pairSum(self, head: Optional[ListNode]) -&amp;gt; int:
        mid = self.middleNode(head)
        head2 = self.reverseNode(mid)
        result = -inf
        while head2:
            result = max(result, head.val + head2.val)
            head = head.next
            head2 = head2.next
        return result

    def reverseNode(self, head):
        cur, pre = head, None
        while cur:
            nxt = cur.next
            cur.next = pre
            pre = cur
            cur = nxt
        return pre
        
    def middleNode(self, head):
        slow = fast = head
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
        return slow
        
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;;;;id3 快慢指针+入栈&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def pairSum(self, head: Optional[ListNode]) -&amp;gt; int:
        dummy = ListNode(next=head)
        slow, fast = dummy, dummy
        stack = []
        result = -inf
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
            stack.append(slow.val)
        print(slow.val)
        while slow.next:
            slow = slow.next
            result = max(result, stack.pop(-1)+slow.val)
        return result
        
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2 id=&#34;二叉树&#34;&gt;&lt;a href=&#34;#二叉树&#34; class=&#34;headerlink&#34; title=&#34;二叉树&#34;&gt;&lt;/a&gt;二叉树&lt;/h2&gt;&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVVENHkxWTc2OS8/dmRfc291cmNlPTliMDUwMzdjNzdlYzk0MGRhZTNhZjhlNjk5NjllMGQ2&#34;&gt;看到递归就晕？带你理解递归的本质！【基础算法精讲 09】_哔哩哔哩_bilibili&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;437-路径总和-III（与560-和为-K-的子数组方法相似）&#34;&gt;&lt;a href=&#34;#437-路径总和-III（与560-和为-K-的子数组方法相似）&#34; class=&#34;headerlink&#34; title=&#34;437. 路径总和 III（与560. 和为 K 的子数组方法相似）&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9wYXRoLXN1bS1paWkv&#34;&gt;437. 路径总和 III&lt;/span&gt;（与&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9zdWJhcnJheS1zdW0tZXF1YWxzLWsv&#34;&gt;560. 和为 K 的子数组&lt;/span&gt;方法相似）&lt;/h3&gt;&lt;p&gt;给定一个二叉树的根节点 &lt;code&gt;root&lt;/code&gt; ，和一个整数 &lt;code&gt;targetSum&lt;/code&gt; ，求该二叉树里节点值之和等于 &lt;code&gt;targetSum&lt;/code&gt; 的 &lt;strong&gt;路径&lt;/strong&gt; 的数目。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;路径&lt;/strong&gt; 不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。&lt;/p&gt;
&lt;p&gt;+++info 示例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;输入：root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8
输出：3
解释：和等于 8 的路径有 3 条，如图所示。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;如果二叉树是一条链，本题就和 560. 和为 K 的子数组 完全一样了：统计有多少个非空连续子数组的元素和恰好等于 targetSum。所以你必须先弄明白 560 题（特殊情况），再来做本题（一般情况）。560 题的做法见 我的题解。&lt;/p&gt;
&lt;p&gt;这两题的联系如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;560 题&lt;/th&gt;
&lt;th&gt;本题&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;连续子数组&lt;/td&gt;
&lt;td&gt;方向向下的路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;前缀&lt;/td&gt;
&lt;td&gt;从根节点开始的路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;做法：枚举子数组右端点，统计有多少个左端点&lt;/td&gt;
&lt;td&gt;做法：枚举路径的终点，统计有多少个起点&lt;br/&gt;我们要解决的问题是：DFS 遍历这棵树，遍历到节点 node 时，假设 node 是路径的终点，那么有多少个起点，满足起点到终点 node 的路径总和恰好等于 targetSum？&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;和 560 题一样的套路：一边遍历二叉树，一边用哈希表 cnt 统计前缀和（从根节点开始的路径和）的出现次数。设从根到终点 node 的路径和为 s，那么起点的个数就是 cnt[s−targetSum]，加入答案。对比 560 题，我们在枚举子数组的右端点（终点），统计有多少个左端点（起点），做法完全一致。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pathSum(self, root: Optional[TreeNode], targetSum: int) -&amp;gt; int:
        ans = 0
        hp = collections.defaultdict(int)
        hp[0] = 1
        def dfs(node, s):
            if not node: return 
            nonlocal ans
            s += node.val
            ans += hp[s - targetSum]

            hp[s] += 1
            dfs(node.left, s)
            dfs(node.right, s)
            hp[s] -= 1
        dfs(root, 0)
        return ans
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者：灵茶山艾府&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9wYXRoLXN1bS1paWkvc29sdXRpb25zLzI3ODQ4NTYvenVvLWZhLWhlLTU2MC10aS1zaGkteWkteWFuZy1kZS1weXRob25qYS1mbXpvLw==&#34;&gt;https://leetcode.cn/problems/path-sum-iii/solutions/2784856/zuo-fa-he-560-ti-shi-yi-yang-de-pythonja-fmzo/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;1372-二叉树中的最长交错路径&#34;&gt;&lt;a href=&#34;#1372-二叉树中的最长交错路径&#34; class=&#34;headerlink&#34; title=&#34;1372. 二叉树中的最长交错路径&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9sb25nZXN0LXppZ3phZy1wYXRoLWluLWEtYmluYXJ5LXRyZWUv&#34;&gt;1372. 二叉树中的最长交错路径&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;给你一棵以 &lt;code&gt;root&lt;/code&gt; 为根的二叉树，二叉树中的交错路径定义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择二叉树中 &lt;strong&gt;任意&lt;/strong&gt; 节点和一个方向（左或者右）。&lt;/li&gt;
&lt;li&gt;如果前进方向为右，那么移动到当前节点的的右子节点，否则移动到它的左子节点。&lt;/li&gt;
&lt;li&gt;改变前进方向：左变右或者右变左。&lt;/li&gt;
&lt;li&gt;重复第二步和第三步，直到你在树中无法继续移动。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;交错路径的长度定义为：&lt;strong&gt;访问过的节点数目 - 1&lt;/strong&gt;（单个节点的路径长度为 0 ）。&lt;/p&gt;
&lt;p&gt;请你返回给定树中最长 &lt;strong&gt;交错路径&lt;/strong&gt; 的长度。&lt;/p&gt;
&lt;p&gt;+++info 示例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;输入：root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1,null,1]
输出：3
解释：蓝色节点为树中最长交错路径（右 -&amp;gt; 左 -&amp;gt; 右）。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;输入：root = [1,1,1,null,1,null,null,1,1,null,1]
输出：4
解释：蓝色节点为树中最长交错路径（左 -&amp;gt; 右 -&amp;gt; 左 -&amp;gt; 右）。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;在 DFS 的过程中，每次我们都把当前点的 len 参数和答案 maxAns 打擂台，这样可以比出一个最大的。然后我们根据 dir 分类讨论。如果当前点应该向左且可以向左，那么就让他向左走一步，新的 len 是当前的 len 加一。如果的的点应该向左但是却没有左子树呢？很无奈那就只能向右了，这个时候 len 的值应该「重置」。&lt;/p&gt;
&lt;p&gt;思考：「重置」为什么是把 len 变成 1 而不是 0？ 因为当前的点下传到它的子节点的时候已经走了一条长度为 1 的边。那么为什么 main 函数中传入的 len 值是 0 而不是 1 呢？ 因为 main 函数中的 root 是没有父亲节点的，所以当前已经走过的路为 0。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def longestZigZag(self, root: Optional[TreeNode]) -&amp;gt; int:
        result = 0
        def search(node, mode, l):
            if not node:return 
            nonlocal result
            result = max(result, l)
            if mode == &amp;#39;left&amp;#39;: 
                search(node.right, &amp;#39;right&amp;#39;,l+1)
                search(node.left, &amp;#39;left&amp;#39;, 1)
            elif mode == &amp;#39;right&amp;#39;: 
                search(node.left, &amp;#39;left&amp;#39;, l+1)
                search(node.right, &amp;#39;right&amp;#39;, 1)
        search(root,&amp;#39;left&amp;#39;, 0)
        search(root, &amp;#39;right&amp;#39;, 0)
        return result
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者：力扣官方题解&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9sb25nZXN0LXppZ3phZy1wYXRoLWluLWEtYmluYXJ5LXRyZWUvc29sdXRpb25zLzE0NzQyNS9lci1jaGEtc2h1LXpob25nLWRlLXp1aS1jaGFuZy1qaWFvLWN1by1sdS1qaW5nLWItMi8=&#34;&gt;https://leetcode.cn/problems/longest-zigzag-path-in-a-binary-tree/solutions/147425/er-cha-shu-zhong-de-zui-chang-jiao-cuo-lu-jing-b-2/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;236-二叉树的最近公共祖先&#34;&gt;&lt;a href=&#34;#236-二叉树的最近公共祖先&#34; class=&#34;headerlink&#34; title=&#34;236. 二叉树的最近公共祖先&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9sb3dlc3QtY29tbW9uLWFuY2VzdG9yLW9mLWEtYmluYXJ5LXRyZWUv&#34;&gt;236. 二叉树的最近公共祖先&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOUMlODAlRTglQkYlOTElRTUlODUlQUMlRTUlODUlQjElRTclQTUlOTYlRTUlODUlODgvODkxODgzND9mcj1hbGFkZGlu&#34;&gt;百度百科&lt;/span&gt;中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（&lt;strong&gt;一个节点也可以是它自己的祖先&lt;/strong&gt;）。”&lt;/p&gt;
&lt;p&gt; +++info 示例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
输出：3
解释：节点 5 和节点 1 的最近公共祖先是节点 3 。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
输出：5
解释：节点 5 和节点 4 的最近公共祖先是节点 5 。因为根据定义最近公共祖先节点可以为节点本身。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVc0NHkxWjdBUi8/dmRfc291cmNlPTliMDUwMzdjNzdlYzk0MGRhZTNhZjhlNjk5NjllMGQ2&#34;&gt;二叉树的最近公共祖先【基础算法精讲 12】_哔哩哔哩_bilibili&lt;/span&gt;&lt;/p&gt;


&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: &amp;#39;TreeNode&amp;#39;, p: &amp;#39;TreeNode&amp;#39;, q: &amp;#39;TreeNode&amp;#39;) -&amp;gt; &amp;#39;TreeNode&amp;#39;:
        if root == None or root == p or root == q:
            return root
        left = self.lowestCommonAncestor(root.left, p, q)
        right = self.lowestCommonAncestor(root.right, p, q)
        if right and left: return root
        return left or right
        
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;199-二叉树的右视图&#34;&gt;&lt;a href=&#34;#199-二叉树的右视图&#34; class=&#34;headerlink&#34; title=&#34;199. 二叉树的右视图&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9iaW5hcnktdHJlZS1yaWdodC1zaWRlLXZpZXcv&#34;&gt;199. 二叉树的右视图&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;给定一个二叉树的 &lt;strong&gt;根节点&lt;/strong&gt; &lt;code&gt;root&lt;/code&gt;，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。&lt;/p&gt;
&lt;p&gt;+++info 示例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt; root &amp;#x3D; [1,2,3,null,5,null,4]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输出：&lt;/strong&gt;[1,3,4]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解释：&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;**输入：**root &amp;#x3D; [1,2,3,4,null,null,null,5]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输出：&lt;/strong&gt;[1,3,4,5]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解释：&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;**输入：**root &amp;#x3D; [1,null,3]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输出：&lt;/strong&gt;[1,3]&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;;;;id4 深度优先算法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;视频讲解&lt;/strong&gt;：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMThNNDExejdiYi8=&#34;&gt;【基础算法精讲 10】&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：先递归右子树，再递归左子树，当某个深度首次到达时，对应的节点就在右视图中。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -&amp;gt; List[int]:
        result = []
        def dfs(root, depth):
            if not root: return 
            if depth == len(result):
                result.append(root.val)
            dfs(root.right, depth + 1)
            dfs(root.left, depth + 1)
        dfs(root, 0)
        return result
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者：灵茶山艾府&lt;br&gt;链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9iaW5hcnktdHJlZS1yaWdodC1zaWRlLXZpZXcvc29sdXRpb25zLzIwMTUwNjEvcnUtaGUtbGluZy1odW8teXVuLXlvbmctZGktZ3VpLWxhaS1rYW4tcy1yMW5jLw==&#34;&gt;https://leetcode.cn/problems/binary-tree-right-side-view/solutions/2015061/ru-he-ling-huo-yun-yong-di-gui-lai-kan-s-r1nc/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;;;;id4 层序遍历&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：将每层的元素加入队列，从右到左依序遍历每层。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -&amp;gt; List[int]:
        if not root: return []
        result = []
        que = [root]
        while len(que) &amp;gt; 0:
            result.append(que[0].val)
            for _ in range(len(que)):
                node = que.pop(0)
                if node.right: que.append(node.right)
                if node.left: que.append(node.left)
        return result
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
</content>
        <category term="技能工具" scheme="http://hening25.gitee.io/categories/%E6%8A%80%E8%83%BD%E5%B7%A5%E5%85%B7/" />
        <updated>2025-08-14T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://hening25.gitee.io/2025/07/17/2025-07-17-Tucker%E5%88%86%E8%A7%A3/</id>
        <title>Tucker分解</title>
        <link rel="alternate" href="http://hening25.gitee.io/2025/07/17/2025-07-17-Tucker%E5%88%86%E8%A7%A3/"/>
        <content type="html">&lt;p&gt;Tucker分解&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h1 id=&#34;Tucker分解&#34;&gt;&lt;a href=&#34;#Tucker分解&#34; class=&#34;headerlink&#34; title=&#34;Tucker分解&#34;&gt;&lt;/a&gt;Tucker分解&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&#34;什么是-Tucker-分解？&#34;&gt;&lt;a href=&#34;#什么是-Tucker-分解？&#34; class=&#34;headerlink&#34; title=&#34;什么是 Tucker 分解？&#34;&gt;&lt;/a&gt;什么是 Tucker 分解？&lt;/h2&gt;&lt;p&gt;Tucker 分解是 &lt;strong&gt;张量（tensor）分解&lt;/strong&gt; 的一种，是矩阵 SVD（奇异值分解）在更高阶上的推广。&lt;/p&gt;
&lt;p&gt;它的核心思想是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用一个小的 &lt;strong&gt;核心张量&lt;/strong&gt; $\mathcal{G}$，以及几个矩阵将一个大的原始张量表示出来，达到&lt;strong&gt;降维、压缩、解耦&lt;/strong&gt;的效果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;张量与模式乘积（mode-n-product）&#34;&gt;&lt;a href=&#34;#张量与模式乘积（mode-n-product）&#34; class=&#34;headerlink&#34; title=&#34;张量与模式乘积（mode-n product）&#34;&gt;&lt;/a&gt;张量与模式乘积（mode-n product）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;矩阵是二维张量&lt;/strong&gt;，例如： $A \in \mathbb{R}^{m \times n}$.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;张量是更高维的数组&lt;/strong&gt;，例如：&lt;ul&gt;
&lt;li&gt;三阶张量 $\mathcal{X} \in \mathbb{R}^{I \times J \times K}$.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;模式-n乘积（Mode-n-product）&#34;&gt;&lt;a href=&#34;#模式-n乘积（Mode-n-product）&#34; class=&#34;headerlink&#34; title=&#34;模式-n乘积（Mode-n product）&#34;&gt;&lt;/a&gt;模式-n乘积（Mode-n product）&lt;/h3&gt;&lt;p&gt;给定三阶张量 $\mathcal{X} \in \mathbb{R}^{I \times J \times K}$，和矩阵 $U \in \mathbb{R}^{L \times I}$，那么：&lt;/p&gt;
&lt;p&gt;$$\mathcal{Y} &amp;#x3D; \mathcal{X} \times_1 U \in \mathbb{R}^{L \times J \times K}$$&lt;/p&gt;
&lt;p&gt;这表示对第一个维度（mode-1）做矩阵变换。其本质是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;把张量的第1个维度的每个“切片”乘以 U&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;Tucker-分解的数学定义&#34;&gt;&lt;a href=&#34;#Tucker-分解的数学定义&#34; class=&#34;headerlink&#34; title=&#34;Tucker 分解的数学定义&#34;&gt;&lt;/a&gt;Tucker 分解的数学定义&lt;/h2&gt;&lt;p&gt;设有一个三阶张量：&lt;/p&gt;
&lt;p&gt;$$\mathcal{X} \in \mathbb{R}^{I \times J \times K}$$&lt;/p&gt;
&lt;p&gt;Tucker 分解将其表示为：&lt;/p&gt;
&lt;p&gt;$$\mathcal{X} \approx \mathcal{G} \times_1 A \times_2 B \times_3 C$$&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\mathcal{G} \in \mathbb{R}^{R_1 \times R_2 \times R_3}$：核心张量（压缩表示）&lt;/li&gt;
&lt;li&gt;$A \in \mathbb{R}^{I \times R_1}$、$B \in \mathbb{R}^{J \times R_2}$、$C \in \mathbb{R}^{K \times R_3}$：模式矩阵，控制每个维度的投影&lt;/li&gt;
&lt;li&gt;$\times_n$：表示对张量的第 n 维进行矩阵乘法&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;总结一句话：Tucker 分解就是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“把高维张量压缩成小的核心张量 + 每一维的线性变换矩阵”&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;图示理解（示意图）&#34;&gt;&lt;a href=&#34;#图示理解（示意图）&#34; class=&#34;headerlink&#34; title=&#34;图示理解（示意图）&#34;&gt;&lt;/a&gt;图示理解（示意图）&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;            Tucker Decomposition
           ┌───────────────┐
           │  Tensor X     │         原始张量 X ∈ ℝ^&amp;#123;I×J×K&amp;#125;
           └────┬──────────┘
                ↓ Tucker分解
       ┌────────┴────────┐
       ↓        ↓        ↓
  Matrix A   Matrix B   Matrix C    模式矩阵（每一维的降维）
   (I×R1)     (J×R2)     (K×R3)
       ↓        ↓        ↓
            Core tensor G           核心张量 ∈ ℝ^&amp;#123;R1×R2×R3&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;为什么-Tucker-有用？&#34;&gt;&lt;a href=&#34;#为什么-Tucker-有用？&#34; class=&#34;headerlink&#34; title=&#34;为什么 Tucker 有用？&#34;&gt;&lt;/a&gt;为什么 Tucker 有用？&lt;/h2&gt;&lt;p&gt;Tucker 分解可以：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;降低维度&amp;#x2F;压缩张量&lt;/strong&gt;：原始张量参数量为 $I \times J \times K$，而 Tucker 分解后是：&lt;/p&gt;
&lt;p&gt;$$I \cdot R_1 + J \cdot R_2 + K \cdot R_3 + R_1 \cdot R_2 \cdot R_3$$&lt;/p&gt;
&lt;p&gt;通常远小于原始张量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;捕捉模态之间的交互关系&lt;/strong&gt;：核心张量 $\mathcal{G}$ 建模了压缩后表示之间的高阶交互。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;在多模态场景中用于融合&lt;/strong&gt;：比如图像、文本输入，分别编码后送入 Tucker 融合模块。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;举个数值例子&#34;&gt;&lt;a href=&#34;#举个数值例子&#34; class=&#34;headerlink&#34; title=&#34;举个数值例子&#34;&gt;&lt;/a&gt;举个数值例子&lt;/h2&gt;&lt;p&gt;设有张量 $\mathcal{X} \in \mathbb{R}^{4 \times 3 \times 2}$，我们用 Tucker 分解它：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模式矩阵：&lt;ul&gt;
&lt;li&gt;$A \in \mathbb{R}^{4 \times 2}$.&lt;/li&gt;
&lt;li&gt;$B \in \mathbb{R}^{3 \times 2}$.&lt;/li&gt;
&lt;li&gt;$C \in \mathbb{R}^{2 \times 1}$.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;核心张量 $\mathcal{G} \in \mathbb{R}^{2 \times 2 \times 1}$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;合成的张量为：&lt;/p&gt;
&lt;p&gt;$$\mathcal{X} \approx \mathcal{G} \times_1 A \times_2 B \times_3 C \in \mathbb{R}^{4 \times 3 \times 2}$$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;与其他分解的对比&#34;&gt;&lt;a href=&#34;#与其他分解的对比&#34; class=&#34;headerlink&#34; title=&#34;与其他分解的对比&#34;&gt;&lt;/a&gt;与其他分解的对比&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;适用场景&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Tucker&lt;/td&gt;
&lt;td&gt;多模态张量分解&lt;/td&gt;
&lt;td&gt;多模态融合&lt;/td&gt;
&lt;td&gt;保留交互，参数可控&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CP (CANDECOMP&amp;#x2F;PARAFAC)&lt;/td&gt;
&lt;td&gt;张量秩分解&lt;/td&gt;
&lt;td&gt;分解张量为秩1分量之和&lt;/td&gt;
&lt;td&gt;更简单但可解释性低&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PCA&lt;/td&gt;
&lt;td&gt;矩阵分解&lt;/td&gt;
&lt;td&gt;降维&lt;/td&gt;
&lt;td&gt;相当于 SVD 的特例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SVD&lt;/td&gt;
&lt;td&gt;矩阵分解&lt;/td&gt;
&lt;td&gt;特征提取&lt;/td&gt;
&lt;td&gt;二阶张量特例&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;实际应用&#34;&gt;&lt;a href=&#34;#实际应用&#34; class=&#34;headerlink&#34; title=&#34;实际应用&#34;&gt;&lt;/a&gt;实际应用&lt;/h2&gt;&lt;h3 id=&#34;1-多模态融合&#34;&gt;&lt;a href=&#34;#1-多模态融合&#34; class=&#34;headerlink&#34; title=&#34;1. 多模态融合&#34;&gt;&lt;/a&gt;1. 多模态融合&lt;/h3&gt;&lt;p&gt;如在视觉问答中，将图像向量 vv 和文本向量 qq 融合，用 Tucker 分解实现有效的高阶交互建模。&lt;/p&gt;
&lt;h3 id=&#34;2-模型压缩&#34;&gt;&lt;a href=&#34;#2-模型压缩&#34; class=&#34;headerlink&#34; title=&#34;2. 模型压缩&#34;&gt;&lt;/a&gt;2. 模型压缩&lt;/h3&gt;&lt;p&gt;可以用 Tucker 分解对 CNN 卷积核或 Transformer 权重张量进行压缩。&lt;/p&gt;
&lt;h3 id=&#34;3-多任务学习&#34;&gt;&lt;a href=&#34;#3-多任务学习&#34; class=&#34;headerlink&#34; title=&#34;3. 多任务学习&#34;&gt;&lt;/a&gt;3. 多任务学习&lt;/h3&gt;&lt;p&gt;可以用共享核心张量，同时用不同模式矩阵适配不同任务。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;Tucker-分解的-PyTorch-简单实现&#34;&gt;&lt;a href=&#34;#Tucker-分解的-PyTorch-简单实现&#34; class=&#34;headerlink&#34; title=&#34;Tucker 分解的 PyTorch 简单实现&#34;&gt;&lt;/a&gt;Tucker 分解的 PyTorch 简单实现&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 简化版 Tucker 融合（v: image, q: text）
v_proj = U_v(v)      # [B, r1]
q_proj = U_q(q)      # [B, r2]
outer = torch.einsum(&amp;quot;bi,bj-&amp;gt;bij&amp;quot;, v_proj, q_proj)   # [B, r1, r2]
fused = torch.einsum(&amp;quot;bij,ijk-&amp;gt;bk&amp;quot;, outer, core)     # [B, r3]
out = U_o(fused)     # [B, d_out]
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
</content>
        <category term="深度学习" scheme="http://hening25.gitee.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/" />
        <category term="工具" scheme="http://hening25.gitee.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%B7%A5%E5%85%B7/" />
        <category term="矩阵变换,tucker" scheme="http://hening25.gitee.io/tags/%E7%9F%A9%E9%98%B5%E5%8F%98%E6%8D%A2-tucker/" />
        <updated>2025-07-16T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://hening25.gitee.io/2025/06/25/2025-06-25-Office%E5%8D%B8%E8%BD%BD/</id>
        <title>Office卸载</title>
        <link rel="alternate" href="http://hening25.gitee.io/2025/06/25/2025-06-25-Office%E5%8D%B8%E8%BD%BD/"/>
        <content type="html">&lt;p&gt;其他工具——Office卸载&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h1 id=&#34;Office卸载&#34;&gt;&lt;a href=&#34;#Office卸载&#34; class=&#34;headerlink&#34; title=&#34;Office卸载&#34;&gt;&lt;/a&gt;Office卸载&lt;/h1&gt;&lt;h2 id=&#34;问题描述&#34;&gt;&lt;a href=&#34;#问题描述&#34; class=&#34;headerlink&#34; title=&#34;问题描述&#34;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;起因是想下载Visio套件，因此需要通过官方下载整体Office包，但是下载后一直显示还是原来的Office教育版。&lt;/p&gt;
&lt;h2 id=&#34;步骤&#34;&gt;&lt;a href=&#34;#步骤&#34; class=&#34;headerlink&#34; title=&#34;步骤&#34;&gt;&lt;/a&gt;步骤&lt;/h2&gt;&lt;h4 id=&#34;通过控制面板卸载已安装的旧版Office。&#34;&gt;&lt;a href=&#34;#通过控制面板卸载已安装的旧版Office。&#34; class=&#34;headerlink&#34; title=&#34;通过控制面板卸载已安装的旧版Office。&#34;&gt;&lt;/a&gt;通过控制面板卸载已安装的旧版Office。&lt;/h4&gt;&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;Win + R，输入“control”，回车，在卸载程序中找到Office软件，右键卸载。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h4 id=&#34;清理注册表文件&#34;&gt;&lt;a href=&#34;#清理注册表文件&#34; class=&#34;headerlink&#34; title=&#34;清理注册表文件&#34;&gt;&lt;/a&gt;清理注册表文件&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;下载Office助手——[“Office Tool Plus”](&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9vdHAubGFuZGlhbi52aXAvemgtY24v&#34;&gt;Office Tool Plus | 一键部署 Office&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;在工具箱内找到”移除Office“选择移除。&lt;/li&gt;
&lt;li&gt;执行后到注册表下检测。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Win + R，输入“regedit”，回车。&lt;/p&gt;
&lt;p&gt;检查以下两项是否存在，若存在可以手动删除。&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;如果提示没有删除权限，请在对应的键上，右键“权限”→选中当前登录账号，高级→勾选左下角“使用可从此对象继承的权限项目替换所有子对象的权限项目”→应用，确定。然后尝试再次删除就可以删除掉了。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
</content>
        <category term="其他工具" scheme="http://hening25.gitee.io/categories/%E5%85%B6%E4%BB%96%E5%B7%A5%E5%85%B7/" />
        <updated>2025-06-24T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://hening25.gitee.io/2024/12/15/2025-06-18-%E6%A8%A1%E5%9E%8B%E6%90%AD%E5%BB%BA/</id>
        <title>Transformer</title>
        <link rel="alternate" href="http://hening25.gitee.io/2024/12/15/2025-06-18-%E6%A8%A1%E5%9E%8B%E6%90%AD%E5%BB%BA/"/>
        <content type="html">&lt;p&gt;AA-CrossViT——模型搭建&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;本文模型采用基于轴向分块和交叉注意力融合策略的双分支视觉Transformer作为锂离子电池早期寿命预测模型。具体而言，分别基于图形特征的电压轴向和周期轴向进行分块，而后利用卷积层将各分块编码到向量空间，随后添加反映分块信息和位置的可学习参数矩阵分类token $x_{cls}$ 和位置编码矩阵 $X_{pe}$ 。Transformer编码层用以提取特征和捕捉分块间的依赖关系，随后提取双流分支的分类token和分块token输出作为交叉注意力机制的输入，以融合双轴向分支的信息。&lt;/p&gt;
&lt;h3 id=&#34;Related-Module&#34;&gt;&lt;a href=&#34;#Related-Module&#34; class=&#34;headerlink&#34; title=&#34;Related Module&#34;&gt;&lt;/a&gt;Related Module&lt;/h3&gt;&lt;p&gt;导入相关依赖库。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch
import torch.nn as nn
from torch import Tensor
from einops.layers.torch import Rearrange, Reduce
from einops import repeat, rearrange
from torchsummary import summary
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Rearrange/Reduce&lt;/code&gt;和&lt;code&gt;rearrange/reduce&lt;/code&gt;的区别：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前者是网络层，后者是数据处理函数。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;Input-Size&#34;&gt;&lt;a href=&#34;#Input-Size&#34; class=&#34;headerlink&#34; title=&#34;Input Size&#34;&gt;&lt;/a&gt;Input Size&lt;/h3&gt;&lt;p&gt;本文输入为锂离子电池的图形特征输入，尺寸为$3\times 100\times 100$。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = torch.randn(3,100,100)   # 单样本尺寸为3*100*100
print(x.shape)   # (3,100,100)

x_batch = torch.randn(16,3,100,100)  # 单个batch尺寸为16*3*100*100
print(x_batch.shape)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Patch-Embedding&#34;&gt;&lt;a href=&#34;#Patch-Embedding&#34; class=&#34;headerlink&#34; title=&#34;Patch Embedding&#34;&gt;&lt;/a&gt;Patch Embedding&lt;/h3&gt;&lt;p&gt;视觉Transformer模型的第一步需要将图片划分为多个分块（Patches），并且将其映射到向量。具体而言，处于效率考虑，先利用卷积层将每个分块映射到向量空间维度$d_k$，卷积核的大小与步长均为patch的尺寸，卷积核个数等于编码维度$d_k$，而后利用&lt;code&gt;Rearrange&lt;/code&gt;函数改变维度顺序。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;in_channels, patch_size = 3, (1,100)
projection = nn.Sequential(
            nn.Conv2d(in_channels=in_channels, out_channels=emb_size, kernel_size=patch_size, stride=(1,1)),
            Rearrange(&amp;quot;b e h w -&amp;gt; b (h w) e&amp;quot;),
        )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Rearrange/Reduce&lt;/code&gt;参数解析：输入参数格式为字符串&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class PatchEmbedding(nn.Module):
    def __init__(self, input_size:int=100, in_channels:int=3, patch_size:tuple=(1,100), emb_size:int=100):
        super().__init__()
        self.projection = nn.Sequential(
            nn.Conv2d(in_channels=in_channels, out_channels=emb_size, kernel_size=patch_size, stride=(1,1)),
            Rearrange(&amp;quot;b e h w -&amp;gt; b (h w) e&amp;quot;),
        )
        self.cls_token = nn.Parameter(torch.randn(1,1,emb_size)/emb_size)
        self.positions = nn.Parameter(torch.randn((input_size**2 // (patch_size[0]*patch_size[1]) + 1,emb_size)) / emb_size)

    def forward(self,x:Tensor):
        b, c, h, w = x.shape
        x = self.projection(x)
        cls_tokens = repeat(self.cls_token,&amp;quot;() n e -&amp;gt; b n e&amp;quot;,b=b)
        x = torch.cat([cls_tokens, x], dim=1)
        x += self.positions    # 这里区别于class token直接用广播机制相加，原因是位置编码应该在batch内的不同样本也保持一致
        # print(x.shape)
        return x
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Class-Token&#34;&gt;&lt;a href=&#34;#Class-Token&#34; class=&#34;headerlink&#34; title=&#34;Class Token&#34;&gt;&lt;/a&gt;Class Token&lt;/h3&gt;&lt;h3 id=&#34;Positional-Encoding&#34;&gt;&lt;a href=&#34;#Positional-Encoding&#34; class=&#34;headerlink&#34; title=&#34;Positional Encoding&#34;&gt;&lt;/a&gt;Positional Encoding&lt;/h3&gt;&lt;h3 id=&#34;Transformer-Encoder&#34;&gt;&lt;a href=&#34;#Transformer-Encoder&#34; class=&#34;headerlink&#34; title=&#34;Transformer Encoder&#34;&gt;&lt;/a&gt;Transformer Encoder&lt;/h3&gt;&lt;h3 id=&#34;&#34;&gt;&lt;a href=&#34;#&#34; class=&#34;headerlink&#34; title=&#34;&#34;&gt;&lt;/a&gt;&lt;/h3&gt;</content>
        <category term="AA-CrossViT" scheme="http://hening25.gitee.io/categories/AA-CrossViT/" />
        <category term="Transformer" scheme="http://hening25.gitee.io/categories/AA-CrossViT/Transformer/" />
        <updated>2024-12-14T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://hening25.gitee.io/2024/12/01/2024-12-01_Life%20prediction%20model%20for%20lithium-ion%20battery%20via%20a%203D%20convolutional%20network%20enhanced%20by%20channel%20attention%20considering%20charging%20and%20discharging%20process/</id>
        <title>Life prediction model for lithium-ion battery via a 3D convolutional network enhanced by channel attention considering charging and discharging process</title>
        <link rel="alternate" href="http://hening25.gitee.io/2024/12/01/2024-12-01_Life%20prediction%20model%20for%20lithium-ion%20battery%20via%20a%203D%20convolutional%20network%20enhanced%20by%20channel%20attention%20considering%20charging%20and%20discharging%20process/"/>
        <content type="html">&lt;p&gt;基于动态自编码网络的电池故障检测&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h1 id=&#34;Life-prediction-model-for-lithium-ion-battery-via-a-3D-convolutional-network-enhanced-by-channel-attention-considering-charging-and-discharging-process&#34;&gt;&lt;a href=&#34;#Life-prediction-model-for-lithium-ion-battery-via-a-3D-convolutional-network-enhanced-by-channel-attention-considering-charging-and-discharging-process&#34; class=&#34;headerlink&#34; title=&#34;Life prediction model for lithium-ion battery via a 3D convolutional network enhanced by channel attention considering charging and discharging process&#34;&gt;&lt;/a&gt;Life prediction model for lithium-ion battery via a 3D convolutional network enhanced by channel attention considering charging and discharging process&lt;/h1&gt;&lt;p&gt;Article link: &lt;a href=&#34;&#34;&gt;Realistic fault detection of li-ion battery via dynamical deep learning (nature.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;local link: [Realistic fault detection of li-ion battery via dynamical deep learning](&amp;#x2F;downloads&amp;#x2F;2024-12-01_Life prediction model for lithium-ion battery via a 3D convolutional network enhanced by channel attention considering charging and discharging process.pdf)&lt;/p&gt;
&lt;p&gt;Date: 2024-12-01&lt;/p&gt;
&lt;h2 id=&#34;Gaps&#34;&gt;&lt;a href=&#34;#Gaps&#34; class=&#34;headerlink&#34; title=&#34;Gaps&#34;&gt;&lt;/a&gt;Gaps&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对于多路测量参数（温度、电压、电流等），已有研究大多将它们直接连接，忽视了其中的耦合关系，导致了在映射到潜在特征空间时出现解耦。这种数据交互不足阻碍了模型的性能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在模型层面：（1）许多方法仅关注充电或放电单一过程；（2）CNN在处理时序性数据时性能不佳，且缺乏不同充电策略下的泛化能力。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Novelty-Originality&#34;&gt;&lt;a href=&#34;#Novelty-Originality&#34; class=&#34;headerlink&#34; title=&#34;Novelty&amp;#x2F;Originality&#34;&gt;&lt;/a&gt;Novelty&amp;#x2F;Originality&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;从放电过程中的IC曲线和电压曲线中提取HI，与充电特征进行融合；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过RP技术将充电过程中的VIT数据转换为多维数据；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提出了一种深度可分离的通道注意力3DCNN，用以解决权重数量多喝数据缺乏耦合计算的问题；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提出了一种同时预测不同充电协议下的寿命预测方法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Input&#34;&gt;&lt;a href=&#34;#Input&#34; class=&#34;headerlink&#34; title=&#34;Input&#34;&gt;&lt;/a&gt;Input&lt;/h2&gt;&lt;h3 id=&#34;Datasets&#34;&gt;&lt;a href=&#34;#Datasets&#34; class=&#34;headerlink&#34; title=&#34;Datasets&#34;&gt;&lt;/a&gt;Datasets&lt;/h3&gt;&lt;p&gt;数据集采用MIT的两套锂离子退化数据集，分别包含了124和45个电池样本，两套数据集的采用不同的充电策略。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;（1）“C1(Q1)-C2”-(80%)-“1CC(3.6V)-1CV”&lt;/li&gt;
&lt;li&gt;（2）“CC1-CC2-CC3-CC4”-“CC5-CV1”&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Charge-process&#34;&gt;&lt;a href=&#34;#Charge-process&#34; class=&#34;headerlink&#34; title=&#34;Charge process&#34;&gt;&lt;/a&gt;Charge process&lt;/h3&gt;&lt;p&gt;RP技术：&lt;/p&gt;
&lt;h3 id=&#34;DisCharge-process&#34;&gt;&lt;a href=&#34;#DisCharge-process&#34; class=&#34;headerlink&#34; title=&#34;DisCharge process&#34;&gt;&lt;/a&gt;DisCharge process&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;IC曲线的峰值坐标（PIIC）&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="论文文献阅读" scheme="http://hening25.gitee.io/categories/%E8%AE%BA%E6%96%87%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/" />
        <updated>2024-11-30T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://hening25.gitee.io/2024/09/21/2024-09-21-%E7%9F%A9%E9%98%B5%E7%9A%84%E7%9B%B8%E4%BC%BC%E5%8F%98%E6%8D%A2/</id>
        <title>01 矩阵的相似变换</title>
        <link rel="alternate" href="http://hening25.gitee.io/2024/09/21/2024-09-21-%E7%9F%A9%E9%98%B5%E7%9A%84%E7%9B%B8%E4%BC%BC%E5%8F%98%E6%8D%A2/"/>
        <content type="html">&lt;p&gt;矩阵论——01 矩阵的相似变换&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h1 id=&#34;控制系统的状态空间描述&#34;&gt;&lt;a href=&#34;#控制系统的状态空间描述&#34; class=&#34;headerlink&#34; title=&#34;控制系统的状态空间描述&#34;&gt;&lt;/a&gt;控制系统的状态空间描述&lt;/h1&gt;&lt;h2 id=&#34;基本概念&#34;&gt;&lt;a href=&#34;#基本概念&#34; class=&#34;headerlink&#34; title=&#34;基本概念&#34;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;h3 id=&#34;系统的状态空间模型&#34;&gt;&lt;a href=&#34;#系统的状态空间模型&#34; class=&#34;headerlink&#34; title=&#34;系统的状态空间模型&#34;&gt;&lt;/a&gt;系统的状态空间模型&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;线性时变系统的状态空间模型：系数矩阵与时间无关。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$\left{ \begin{matrix} \dot{x}&amp;#x3D;Ax+Bu\y&amp;#x3D;Cx+Du\\end{matrix}\right.   \tag{1}$$&lt;/p&gt;
&lt;p&gt;其中，$u&amp;#x3D;R^r$为输入向量；$y&amp;#x3D;R^m$为输出向量；$x\in R^n$为状态向量。$A,B,C,D$为系数矩阵。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;线性时不变系统的状态空间模型：系数矩阵与时间有关。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$\left{ \begin{matrix} \dot{x}&amp;#x3D;A(t)x+B(t)u\y&amp;#x3D;C(t)x+D(t)u\\end{matrix}\right.   \tag{2}$$&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;离散线性系统的状态空间模型。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$\left{ \begin{matrix} x(k+1)&amp;#x3D;A(k)x(k)+B(k)u(k)\y(k)&amp;#x3D;C(k)x(k)+D(k)u(k)\\end{matrix}\right.   \tag{3}$$&lt;/p&gt;
&lt;h3 id=&#34;状态空间描述的特点&#34;&gt;&lt;a href=&#34;#状态空间描述的特点&#34; class=&#34;headerlink&#34; title=&#34;状态空间描述的特点&#34;&gt;&lt;/a&gt;状态空间描述的特点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;系统的状态变量的个数&amp;#x3D;系统中包含的独立储能元件的个数&amp;#x3D;系统的阶数。&lt;/li&gt;
&lt;li&gt;在给定的系统中，状态变量的选择不唯一，但是状态变量的个数是一致的。&lt;/li&gt;
&lt;li&gt;基于状态变量选取的不同，同一系统可以用不同的动态方程来描述。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;+++primary 证明&lt;/p&gt;
&lt;p&gt;对于一个状态方程$\left{ \begin{matrix} \dot{x}&amp;#x3D;Ax+Bu\y&amp;#x3D;Cx\\end{matrix}\right.$，选择非奇异矩阵$P\in R^{n\times n}$作为变换阵，有$x&amp;#x3D;P\overline{x}$，那么此时状态方程可表示为：&lt;/p&gt;
&lt;p&gt;$$\dot{\overline{x}}&amp;#x3D;P^{-1}\dot{x}&amp;#x3D;P^{-1}[Ax+Bu]&amp;#x3D;P^{-1}AP\overline{x}+P^{-1}Bu&amp;#x3D;\overline{A}\overline{x}+\overline{B}u   \tag{4}$$&lt;/p&gt;
&lt;p&gt;$$y&amp;#x3D;Cx&amp;#x3D;CP\overline{x}&amp;#x3D;\overline{C}\overline{x}    \tag{5}$$&lt;/p&gt;
&lt;p&gt;其中，$\overline{A}&amp;#x3D;P^{-1}AP,\overline{B}&amp;#x3D;P^{-1}B,\overline{C}&amp;#x3D;CP$。&lt;/p&gt;
&lt;p&gt;因此当状态变量 $x$ 改变时，一定存在变换矩阵 $P$ 使得状态方程发生变化。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h3 id=&#34;状态空间模型的建立步骤&#34;&gt;&lt;a href=&#34;#状态空间模型的建立步骤&#34; class=&#34;headerlink&#34; title=&#34;状态空间模型的建立步骤&#34;&gt;&lt;/a&gt;状态空间模型的建立步骤&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;选择状态变量。&lt;/li&gt;
&lt;li&gt;根据物体或其他机理列写微分方程。&lt;/li&gt;
&lt;li&gt;转化为矩阵形式，得到状态空间模型。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;状态空间表达式的系统方框图&#34;&gt;&lt;a href=&#34;#状态空间表达式的系统方框图&#34; class=&#34;headerlink&#34; title=&#34;状态空间表达式的系统方框图&#34;&gt;&lt;/a&gt;状态空间表达式的系统方框图&lt;/h3&gt;&lt;p&gt;公式（1）是线性时不变系统状态空间表达式的一般形式。其系统方框图可表示如下：&lt;/p&gt;


&lt;h3 id=&#34;状态空间表达式的状态变量图&#34;&gt;&lt;a href=&#34;#状态空间表达式的状态变量图&#34; class=&#34;headerlink&#34; title=&#34;状态空间表达式的状态变量图&#34;&gt;&lt;/a&gt;状态空间表达式的状态变量图&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;状态变量图的基本元素符号&lt;/li&gt;
&lt;/ol&gt;


&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;绘制步骤&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;绘制积分器&lt;/strong&gt;  积分器数量等于状态变量数目。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;由状态方程和输出方程绘制加法器和放大器&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接各元件&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id1 例题1&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;设有三阶系统状态空间表达式如下，试绘制其状态变量图。&lt;/p&gt;
&lt;p&gt;$$\left{ \begin{aligned}\begin{matrix} \dot{x}_1&amp;#x3D;x_2\\dot{x}_2&amp;#x3D;x_3\\dot{x}_3&amp;#x3D;-6x_1-3x_2-2x_3+u\y&amp;#x3D;x_1+x_2\end{matrix}\end{aligned}\right.$$&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;其状态变量图可绘制如下：&lt;/p&gt;


&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;传递函数和传递函数矩阵&#34;&gt;&lt;a href=&#34;#传递函数和传递函数矩阵&#34; class=&#34;headerlink&#34; title=&#34;传递函数和传递函数矩阵&#34;&gt;&lt;/a&gt;传递函数和传递函数矩阵&lt;/h2&gt;&lt;h3 id=&#34;单输入单输出系统&#34;&gt;&lt;a href=&#34;#单输入单输出系统&#34; class=&#34;headerlink&#34; title=&#34;单输入单输出系统&#34;&gt;&lt;/a&gt;单输入单输出系统&lt;/h3&gt;&lt;p&gt;对于单输入单输出系统$\left{ \begin{matrix} \dot{x}&amp;#x3D;Ax+Bu\y&amp;#x3D;Cx+Du\\end{matrix}\right.$，在零初始条件下其传递函数可表示为：&lt;/p&gt;
&lt;p&gt;$$g(s)&amp;#x3D;\frac{Y(s)}{U(s)}&amp;#x3D;C(sI-A)^{-1}B+D    \tag{6}$$&lt;/p&gt;
&lt;p&gt;+++primary 推导&lt;/p&gt;
&lt;p&gt;在系统$\left{ \begin{matrix} \dot{x}&amp;#x3D;Ax+Bu\y&amp;#x3D;Cx+Du\\end{matrix}\right.$ 中，在零初始条件下取拉氏变换有：$\left{ \begin{matrix} sX(s)&amp;#x3D;AX(s)+BU(s)\Y(s)&amp;#x3D;CX(s)+DU(s)\\end{matrix}\right.$，整理得到$\left{ \begin{matrix} X(s)&amp;#x3D;(sI-A)^{-1}BU(s)\Y(s)&amp;#x3D;C(sI-A)^{-1}BU(s)+DU(s)\\end{matrix}\right.$，故$g(s)&amp;#x3D;\frac{Y(s)}{U(s)}&amp;#x3D;C(sI-A)^{-1}B+D$&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;在 $D&amp;#x3D;0$ 时，$g(s)&amp;#x3D;\frac{Y(s)}{U(s)}&amp;#x3D;C(sI-A)^{-1}B&amp;#x3D;\frac{Cadj(sI-A)B}{|sI-A|}$，其中$adj(sI-A)$表示矩阵$sI-A$的伴随矩阵。&lt;/p&gt;
&lt;p&gt;对比自控原理中传递函数的表达式：$g(s)&amp;#x3D;\frac{b_0s^n+b_1s^{n-1}+\cdots +b_{n-1}s+b_n}{s^n+a_1s^{n-1}+\cdots +a_{n-1}s+a_n}$，可知：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;系统矩阵$A$的特征多项式等同于传递函数的分母多项式。&lt;/li&gt;
&lt;li&gt;传递函数的极点就是系统矩阵$A$的特征值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;传递函数的不变性&lt;/strong&gt;  同一系统的状态空间描述不唯一，但传递函数是唯一的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;+++primary 证明：同一系统的不同状态空间描述具有相同的特征值。&lt;/p&gt;
&lt;p&gt;对于同一系统，选择两个不同的状态向量 $x\in{R^n}$ 和 $\overline{x}\in{R^n}$ 分别得到不同的状态空间描述：&lt;/p&gt;
&lt;p&gt;$$\begin{matrix}\left{ \begin{matrix} \dot{x}&amp;#x3D;Ax+Bu\y&amp;#x3D;Cx+Du\\end{matrix}\right.&amp;amp;&amp;amp;&amp;amp;\left{ \begin{matrix} \dot{\overline{x}}&amp;#x3D;\overline{A}\overline{x}+\overline{B}u\y&amp;#x3D;\overline{C}\overline{x}+\overline{D}u\\end{matrix}\right.\end{matrix}$$&lt;/p&gt;
&lt;p&gt;两种状态变量一定存在着可逆变化关系：$x&amp;#x3D;P\overline{x}$，故：&lt;/p&gt;
&lt;p&gt;$$\left{ \begin{matrix} \dot{x}&amp;#x3D;Ax+Bu\y&amp;#x3D;Cx+Du\\end{matrix}\right.\Rightarrow \left{ \begin{matrix} P\dot{\overline{x}}&amp;#x3D;AP\overline{x}+Bu\y&amp;#x3D;CP\overline{x}+Du\\end{matrix}\right.\Rightarrow \left{ \begin{matrix} \dot{\overline{x}}&amp;#x3D;P^{-1}AP\overline{x}+P^{-1}Bu\y&amp;#x3D;CP\overline{x}+Du\\end{matrix}\right.$$&lt;/p&gt;
&lt;p&gt;故 $\overline{A}&amp;#x3D;P^{-1}AP$，所以矩阵 $A$ 与矩阵 $\overline{A}$ 相似，故特征值相同。&lt;/p&gt;
&lt;p&gt;:::info&lt;/p&gt;
&lt;p&gt;相似矩阵具体相同的特征值&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h3 id=&#34;多输入多输出系统&#34;&gt;&lt;a href=&#34;#多输入多输出系统&#34; class=&#34;headerlink&#34; title=&#34;多输入多输出系统&#34;&gt;&lt;/a&gt;多输入多输出系统&lt;/h3&gt;&lt;p&gt;对于多输入多输出系统，输入向量$u&amp;#x3D;[u_1\cdots u_p]^T$，输出向量$y&amp;#x3D;[y_1\dots y_q]^T$。我们把第$i$个输出$y_i$和第$j$个输入$u_j$间的传递函数定义为：$g_{ij}(s)&amp;#x3D;\frac{Y_i(s)}{U_j(s)}$。故系统的输入输出关系可表示为：&lt;/p&gt;
&lt;p&gt;$$\begin{bmatrix}Y_1(s)\Y_2(s)\\vdots\Y_q(s)\end{bmatrix}&amp;#x3D;\begin{bmatrix}g_{11}(s)&amp;amp;g_{12}(s)&amp;amp;\cdots&amp;amp;g_{1p}(s)\g_{21}(s)&amp;amp;g_{22}(s)&amp;amp;\cdots&amp;amp;g_{2p}(s)\\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\g_{q1}(s)&amp;amp;g_{q2}(s)&amp;amp;\cdots&amp;amp;g_{qp}(s)\end{bmatrix}\begin{bmatrix}U_1(s)\U_2(s)\\vdots\U_q(s)\end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;以矩阵的形式表示：$Y(s)&amp;#x3D;G(s)U(s)$，其中 $G(s)$称为传递函数矩阵。&lt;/p&gt;
&lt;p&gt;对于多输入多输出系统$\left{ \begin{matrix} \dot{x}&amp;#x3D;Ax+Bu\y&amp;#x3D;Cx+Du\\end{matrix}\right.$，同样传递函数矩阵为：&lt;/p&gt;
&lt;p&gt;$$G(s)&amp;#x3D;C(sI-A)^{-1}B+D&amp;#x3D;\frac{Cadj(sI-A)B+D|sI-A|}{|sI-A|}$$&lt;/p&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id2 例题1&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;已知系统动态方程为$\begin{bmatrix}\dot{x}_1\\dot{x}_2\end{bmatrix}&amp;#x3D;\begin{bmatrix}0&amp;amp;1\0&amp;amp;-2\end{bmatrix}\begin{bmatrix}x_1\x_2\end{bmatrix}+\begin{bmatrix}1&amp;amp;0\0&amp;amp;1\end{bmatrix}\begin{bmatrix}u_1\u_2\end{bmatrix}$，$\begin{bmatrix}y_1\y_2\end{bmatrix}&amp;#x3D;\begin{bmatrix}1&amp;amp;0\0&amp;amp;1\end{bmatrix}\begin{bmatrix}x_1\x_2\end{bmatrix}$，试求系统的传递函数矩阵。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;由题，$G(s)&amp;#x3D;C(sI-A)^{-1}B+D&amp;#x3D;\begin{bmatrix}1&amp;amp;0\0&amp;amp;1\end{bmatrix}\begin{bmatrix}\frac{1}{s}&amp;amp;\frac{1}{s(s+2)}\0&amp;amp;\frac{1}{s+2}\end{bmatrix}\begin{bmatrix}1&amp;amp;0\0&amp;amp;1\end{bmatrix}&amp;#x3D;\begin{bmatrix}\frac{1}{s}&amp;amp;\frac{1}{s(s+2)}\0&amp;amp;\frac{1}{s+2}\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;建立状态空间表达式&#34;&gt;&lt;a href=&#34;#建立状态空间表达式&#34; class=&#34;headerlink&#34; title=&#34;建立状态空间表达式&#34;&gt;&lt;/a&gt;建立状态空间表达式&lt;/h2&gt;&lt;h3 id=&#34;高阶微分方程化为状态空间描述&#34;&gt;&lt;a href=&#34;#高阶微分方程化为状态空间描述&#34; class=&#34;headerlink&#34; title=&#34;高阶微分方程化为状态空间描述&#34;&gt;&lt;/a&gt;高阶微分方程化为状态空间描述&lt;/h3&gt;&lt;p&gt;在单输入单输出线性时不变系统中，系统的输出与输入的关系可用如下高阶微分方程描述：&lt;/p&gt;
&lt;p&gt;$$y^{(n)}+a_1y^{(n-1)}+\cdots +a_{n-1}\dot{y}+a_ny&amp;#x3D;b_0u^{(m)}+b_1u^{(m-1)}+\cdots +b_{m-1}\dot{u}+b_mu    \tag{7}$$&lt;/p&gt;
&lt;p&gt;其中，$m\leq n$。根据微分方程右侧是否含有输入函数的导数（即$m$是否等于0）分两种情况讨论。&lt;/p&gt;
&lt;h4 id=&#34;常微分方程中不含输入函数的导数&#34;&gt;&lt;a href=&#34;#常微分方程中不含输入函数的导数&#34; class=&#34;headerlink&#34; title=&#34;常微分方程中不含输入函数的导数&#34;&gt;&lt;/a&gt;常微分方程中不含输入函数的导数&lt;/h4&gt;&lt;p&gt;若常微分方程中不含有输入函数的导数，即：$y^{(n)}+a_1y^{(n-1)}+\cdots +a_{n-1}\dot{y}+a_ny&amp;#x3D;b_mu$。&lt;/p&gt;
&lt;p&gt;那么可以选取状态变量：&lt;/p&gt;
&lt;p&gt;$$x_1&amp;#x3D;\frac{1}{b_m}y,\quad x_2&amp;#x3D;\frac{1}{b_m}\dot{y},\quad \cdots \quad  x_n&amp;#x3D;\frac{1}{b_m}y^{(n-1)}      \tag{8}$$&lt;/p&gt;
&lt;p&gt;那么就可以得到状态方程（前$n-1$条通过求导获得，最后一条通过原微分方程获得）：&lt;/p&gt;
&lt;p&gt;$$\left{ \begin{matrix} \dot{x}_1&amp;#x3D;x_2\\dot{x}_2&amp;#x3D;x_3\\vdots\\dot{x}&lt;em&gt;n&amp;#x3D;y^{(n)}&amp;#x3D;-a_nx_1-a&lt;/em&gt;{n-1}x_2-\cdots -a_1x_n+u\end{matrix}\right.$$&lt;/p&gt;
&lt;p&gt;输出方程为：$y&amp;#x3D;b_mx_1$。&lt;/p&gt;
&lt;p&gt;以矩阵的形式可表示为：&lt;/p&gt;
&lt;p&gt;$$\dot{x}&amp;#x3D;\begin{bmatrix}0&amp;amp;1&amp;amp;\cdots &amp;amp;0\\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\0&amp;amp;0&amp;amp;\cdots&amp;amp;1\-a_n&amp;amp;-a_{n-1}&amp;amp;\cdots&amp;amp;-a_1\end{bmatrix}x+\begin{bmatrix}0\0\\vdots\1\end{bmatrix}u    \tag{9}$$&lt;/p&gt;
&lt;p&gt;$$y&amp;#x3D;\begin{bmatrix}1&amp;amp;0&amp;amp;\cdots&amp;amp;0\end{bmatrix}x     \tag{10}$$&lt;/p&gt;
&lt;p&gt;+++primary 能控标准型&lt;/p&gt;
&lt;p&gt;形如公式（9）的状态空间模型称为能控标准型。即$A$与$b$可用以下形式表示：&lt;/p&gt;
&lt;p&gt;$$A&amp;#x3D;\begin{bmatrix}0&amp;amp;1&amp;amp;\cdots &amp;amp;0\\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\0&amp;amp;0&amp;amp;\cdots&amp;amp;1\-a_n&amp;amp;-a_{n-1}&amp;amp;\cdots&amp;amp;-a_1\end{bmatrix},\quad b&amp;#x3D;\begin{bmatrix}0\0\\vdots\1\end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id3 例题1&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;设系统的运动方程为：$y^{(3)}+5\ddot{y}+8\dot{y}+6y&amp;#x3D;3u$，试求其状态空间表达式。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;选取状态变量$x_1&amp;#x3D;y,\quad x_2&amp;#x3D;\dot{y},\quad x_3&amp;#x3D;\ddot{y}$，则有状态方程：&lt;/p&gt;
&lt;p&gt;$$\left{ \begin{matrix} \dot{x}_1&amp;#x3D;x_2\\dot{x}_2&amp;#x3D;x_3\\dot{x}_3&amp;#x3D;y^{(3)}&amp;#x3D;-6x_1-8x_2 -5x_3+3u\end{matrix}\right.$$&lt;/p&gt;
&lt;p&gt;输出方程为$y&amp;#x3D;x_1$。&lt;/p&gt;
&lt;p&gt;故状态空间表达式为：&lt;/p&gt;
&lt;p&gt;$$\dot{x}&amp;#x3D;\begin{bmatrix}0&amp;amp;1 &amp;amp;0\0&amp;amp;0&amp;amp;1\-6&amp;amp;-8&amp;amp;-5\end{bmatrix}x+\begin{bmatrix}0\0\3\end{bmatrix}u $$&lt;/p&gt;
&lt;p&gt;$$y&amp;#x3D;\begin{bmatrix}1&amp;amp;0&amp;amp;0\end{bmatrix}x$$&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h4 id=&#34;常微分方程中含有输入函数的导数&#34;&gt;&lt;a href=&#34;#常微分方程中含有输入函数的导数&#34; class=&#34;headerlink&#34; title=&#34;常微分方程中含有输入函数的导数&#34;&gt;&lt;/a&gt;常微分方程中含有输入函数的导数&lt;/h4&gt;&lt;p&gt;若常微分方程中含有输入函数的导数，即：$y^{(n)}+a_1y^{(n-1)}+\cdots +a_{n-1}\dot{y}+a_ny&amp;#x3D;b_0u^{(m)}+b_1u^{(m-1)}+\cdots +b_{m-1}\dot{u}+b_mu$。&lt;/p&gt;
&lt;p&gt;选择状态变量：&lt;/p&gt;
&lt;p&gt;$$\left{ \begin{matrix} x_1&amp;#x3D;y-\beta_0u\x_2&amp;#x3D;\dot{x}&lt;em&gt;1-\beta_1u&amp;#x3D;\dot{y}-\beta_0\dot{u}-\beta_1u\x_3&amp;#x3D;\dot{x}&lt;em&gt;2-\beta_2u&amp;#x3D;\ddot{y}-\beta_0\ddot{u}-\beta_1\dot{u}-\beta_2u\\vdots\x_n&amp;#x3D;\dot{x}&lt;/em&gt;{n-1}-\beta&lt;/em&gt;{n-1}u&amp;#x3D;y^{(n)}-\beta_0u^{(n-1)}-\beta_1u^{(n-2)}-\cdots -\beta_{n-2}\dot{u}-\beta_{n-1}u\end{matrix}\right.   \tag{11}$$&lt;/p&gt;
&lt;p&gt;其中参数$\beta_0,\beta_1,\cdots,\beta_n$由下式决定：&lt;/p&gt;
&lt;p&gt;$$\begin{bmatrix}\beta_0\\beta_1\\beta_2\\vdots\\beta_n\end{bmatrix}&amp;#x3D;\begin{bmatrix}1&amp;amp;0&amp;amp;\cdots&amp;amp;0&amp;amp;0\a_1&amp;amp;1&amp;amp;\cdots&amp;amp;0&amp;amp;0\\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots&amp;amp;\vdots\a_{n-1}&amp;amp;a_{n-2}&amp;amp;\cdots&amp;amp;1&amp;amp;0\a_n&amp;amp;a_{n-1}&amp;amp;\cdots&amp;amp;a_1&amp;amp;1\end{bmatrix}\begin{bmatrix}b_0\b_1\b_2\\vdots\b_n\end{bmatrix}    \tag{12}$$&lt;/p&gt;
&lt;p&gt;由（11）可得到状态方程：$\left{ \begin{matrix} \dot{x}&lt;em&gt;1&amp;#x3D;x_2+\beta_1u\\dot{x}&lt;em&gt;2&amp;#x3D;x_3+\beta_2u\\vdots\\dot{x}&lt;/em&gt;{n-1}&amp;#x3D;x_n+\beta&lt;/em&gt;{n-1}u\\begin{aligned}\dot{x}&lt;em&gt;n&amp;amp;&amp;#x3D;y^{(n)}-\beta_0u^{(u)}-\beta_1u^{(n-1)}-\cdots -\beta&lt;/em&gt;{n-2}\ddot{u}-\beta_{n-1}\dot{u}\&amp;amp;&amp;#x3D;-a_nx_1-a_{n-1}x_2-\cdots -a_1x_n+\beta_nu\end{aligned} \end{matrix}\right.$。&lt;/p&gt;
&lt;p&gt;+++info 最后一个等式怎么化简得到的？&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;因此，状态空间表达式为：&lt;/p&gt;
&lt;p&gt;$$\dot{x}&amp;#x3D;\begin{bmatrix}0&amp;amp;1&amp;amp;0&amp;amp;\cdots&amp;amp;0\0&amp;amp;0&amp;amp;1&amp;amp;\cdots&amp;amp;0\\vdots&amp;amp;\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\0&amp;amp;0&amp;amp;0&amp;amp;\cdots&amp;amp;1\-a_n&amp;amp;-a_{n-1}&amp;amp;-a_{n-2}&amp;amp;\cdots&amp;amp;-a_1\end{bmatrix}x+\begin{bmatrix}\beta_0\\beta_1\\vdots\\beta_{n-1}\\beta_n\end{bmatrix}u   \tag{13}$$&lt;/p&gt;
&lt;p&gt;$$y&amp;#x3D;[1\quad 0\quad \cdots\quad 0 ]x+\beta_0u$$&lt;/p&gt;
&lt;h3 id=&#34;通过传递函数建立状态空间描述&#34;&gt;&lt;a href=&#34;#通过传递函数建立状态空间描述&#34; class=&#34;headerlink&#34; title=&#34;通过传递函数建立状态空间描述&#34;&gt;&lt;/a&gt;通过传递函数建立状态空间描述&lt;/h3&gt;&lt;p&gt;后续的方法我们讨论的传递函数的分子多项式次数均小于分母多项式次数。因为对于实际系统，分子多项式次数总是小于或等于分母多项式次数，在次数相等时可以通过化简的方法转化为分子多项式次数小于分母多项式次数。&lt;/p&gt;
&lt;p&gt;+++primary 推导&lt;/p&gt;
&lt;p&gt;若传递函数的分子多项式次数等于分母多项式次数，即&lt;/p&gt;
&lt;p&gt;$$g(s)&amp;#x3D;\frac{b_0s^m+b_1s^{m-1}+\cdots +b_{m-1}s+b_m}{s^n+a_1s^{n-1}+\cdots +a_{n-1}s+a_n},m&amp;#x3D;n$$&lt;/p&gt;
&lt;p&gt;它总是可以化简为：&lt;/p&gt;
&lt;p&gt;$$g(s)&amp;#x3D;\frac{b_1s^{m-1}+\cdots +b_{m-1}s+b_m}{s^n+a_1s^{n-1}+\cdots +a_{n-1}s+a_n}&amp;#x3D;\overline{g}(s)+b_0,m&amp;#x3D;n$$&lt;/p&gt;
&lt;p&gt;其中 $\overline{g}(s)$ 为分子多项式次数小于分母多项式次数的传递函数，$b_0$ 为常数，整体视为两者的并联结构。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h4 id=&#34;直接分解法&#34;&gt;&lt;a href=&#34;#直接分解法&#34; class=&#34;headerlink&#34; title=&#34;直接分解法&#34;&gt;&lt;/a&gt;直接分解法&lt;/h4&gt;&lt;p&gt;对于$n$阶传递函数：$g(s)&amp;#x3D;\frac{Y(s)}{U(s)}&amp;#x3D;\frac{b_1s^{n-1}+\cdots +b_{n-1}s+b_n}{s^n+a_1s^{n-1}+\cdots +a_{n-1}s+a_n}$。&lt;/p&gt;
&lt;p&gt;同时除以$s^n$有：$Y(s)&amp;#x3D;U(s)\frac{b_1s^{-1}+\cdots +b_{n-1}s^{-(n-1)}+b_ns^{-n}}{1+a_1s^{-1}+\cdots +a_{n-1}s^{-(n-1)}+a_ns^{-n}}$。&lt;/p&gt;
&lt;p&gt;令中间变量$E(s)&amp;#x3D;U(s)\frac{1}{1+a_1s^{-1}+\cdots +a_{n-1}s^{-(n-1)}+a_ns^{-n}}$，即$E(s)&amp;#x3D;U(s)-a_1s^{-1}E(s)-\cdots -a_{n-1}s^{-(n-1)}E(s)-a_ns^{-n}E(s)$。&lt;/p&gt;
&lt;p&gt;则输入$U(s)$、中间变量$E(s)$和输出$Y(s)$的关系流程图如下：&lt;/p&gt;


&lt;p&gt;则$Y(s)&amp;#x3D;b_1s^{-1}E(s)+b_2s^{-2}E(s)+\cdots +b_{n-1}s^{-(n-1)}E(s)+b_ns^{-n}E(s)$。&lt;/p&gt;
&lt;p&gt;令$x_n,x_{n-1},\cdots,x_1$为$s^{-1}E(s),s^{-2}E(s),\cdots,s^{-n}E(s)$的拉氏逆变换，那么就可以绘制状态变量图并得到系统的状态空间表达式（能控标准型）。&lt;/p&gt;


&lt;p&gt;$$\dot{x}&amp;#x3D;\begin{bmatrix}0&amp;amp;1&amp;amp;\cdots&amp;amp;0\\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\0&amp;amp;0&amp;amp;\cdots&amp;amp;1\-a_n&amp;amp;-a_{n-1}&amp;amp;\cdots&amp;amp;-a_1\end{bmatrix}x+\begin{bmatrix}0\\vdots\0\1\end{bmatrix}u   \tag{14}$$&lt;/p&gt;
&lt;p&gt;$$y&amp;#x3D;[b_n\quad b_{n-1}\quad \cdots\quad b_1 ]x$$&lt;/p&gt;
&lt;p&gt;+++info 补充&lt;/p&gt;
&lt;p&gt;如果该$n$阶系统传递函数的分子多项式次数等于分母多项式次数（在&lt;a href=&#34;#%E9%80%9A%E8%BF%87%E4%BC%A0%E9%80%92%E5%87%BD%E6%95%B0%E5%BB%BA%E7%AB%8B%E7%8A%B6%E6%80%81%E7%A9%BA%E9%97%B4%E6%8F%8F%E8%BF%B0&#34;&gt;通过传递函数建立状态空间描述&lt;/a&gt;中讨论过该情况）即 $g(s)&amp;#x3D;\frac{b_1s^{m-1}+\cdots +b_{m-1}s+b_m}{s^n+a_1s^{n-1}+\cdots +a_{n-1}s+a_n}&amp;#x3D;\overline{g}(s)+b_0,m&amp;#x3D;n$，那么先算出 $\overline{g}(s)$ 后在输入到输出之间直接连接一个比例环节即可。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h4 id=&#34;串联分解法&#34;&gt;&lt;a href=&#34;#串联分解法&#34; class=&#34;headerlink&#34; title=&#34;串联分解法&#34;&gt;&lt;/a&gt;串联分解法&lt;/h4&gt;&lt;p&gt;该方法适用于传递函数可分解为因式相乘的形式，即$g(s)&amp;#x3D;\frac{b_1(s-z_1)(s-z_2)\cdots(s-z_{n-1})}{(s-p_1)(s-p_2)\dots(s-p_n)}$。&lt;/p&gt;
&lt;p&gt;以一个三阶系统进行说明：$g(s)&amp;#x3D;\frac{b_1(s-z_1)(s-z_2)}{(s-p_1)(s-p_2)(s-p_3)}$。&lt;/p&gt;
&lt;p&gt;上式中可分为两种：$\frac{1}{s-p}&amp;#x3D;\frac{\frac{1}{s}}{1-\frac{1}{s}p}$，$\frac{s-z}{s-p}&amp;#x3D;1+\frac{p-z}{s-p}&amp;#x3D;1+(p-z)\frac{\frac{1}{s}}{1-\frac{1}{s}p}$。&lt;/p&gt;
&lt;p&gt;因此系统可视为三个一阶系统串联而成，结构图如下：&lt;/p&gt;


&lt;p&gt;取每个积分器的输出为状态变量，那么可以得到状态空间表达式如下：&lt;/p&gt;
&lt;p&gt;$$\left{ \begin{matrix} \dot{x}_1&amp;#x3D;p_1x_1+b_1u\\dot{x}_2&amp;#x3D;x_1+p_2x_2\\dot{x}_3&amp;#x3D;x_1+(p_2-z_2)x_2+p_3x_3\y&amp;#x3D;x_1+(p_2-z_2)x_2+(p_3-z_3)x_3\end{matrix}\right.$$&lt;/p&gt;
&lt;p&gt;写成向量的形式为：&lt;/p&gt;
&lt;p&gt;$$\dot{x}&amp;#x3D;\begin{bmatrix}p_1&amp;amp;0&amp;amp;0\1&amp;amp;p_2&amp;amp;0\1&amp;amp;p_2-z_2&amp;amp;p_3\end{bmatrix}x+\begin{bmatrix}b_1\0\0\end{bmatrix}u   \tag{15}$$&lt;/p&gt;
&lt;p&gt;$$y&amp;#x3D;[1\quad p_2-z_2\quad \quad p_3-z_3 ]x$$&lt;/p&gt;
&lt;h4 id=&#34;并联分解法&#34;&gt;&lt;a href=&#34;#并联分解法&#34; class=&#34;headerlink&#34; title=&#34;并联分解法&#34;&gt;&lt;/a&gt;并联分解法&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;若传递函数的极点两两相异。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;传递函数极点两两相异，则$g(s)&amp;#x3D;\frac{N(s)}{(s-p_1)(s-p_2)\dots(s-p_n)}&amp;#x3D;\frac{c_1}{s-p_1}+\frac{c_2}{s-p_2}+\cdots+\frac{c_n}{s-p_n}$，其中$c_i&amp;#x3D;\lim_{s\to p_i}(s-p_i)g(s)$。&lt;/p&gt;
&lt;p&gt;选取状态变量 $x_i(s)&amp;#x3D;\frac{1}{s-p_i}U(s)$，即 $sx_i(s)&amp;#x3D;p_ix_i(s)+u(s)$，做拉氏逆变换有：&lt;/p&gt;
&lt;p&gt;$$\dot{x}_i(t)&amp;#x3D;p_ix_i(t)+u(t)$$&lt;/p&gt;
&lt;p&gt;输出 $y(s)&amp;#x3D;g(s)u(s)&amp;#x3D;\sum_{i&amp;#x3D;1}^n\frac{c_i}{s-p_i}u_i(s)&amp;#x3D;\sum_{i&amp;#x3D;1}^nc_ix_i(s)$，做拉氏逆变换有：&lt;/p&gt;
&lt;p&gt;$$y(t)&amp;#x3D;\sum_{i&amp;#x3D;1}^nc_ix_i(t)$$&lt;/p&gt;
&lt;p&gt;写成向量的形式为：&lt;/p&gt;
&lt;p&gt;$$\dot{x}&amp;#x3D;\begin{bmatrix}p_1&amp;amp;0&amp;amp;\cdots&amp;amp;0\0&amp;amp;p_2&amp;amp;\cdots&amp;amp;0\\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;0\0&amp;amp;0&amp;amp;\cdots&amp;amp;p_n\end{bmatrix}x+\begin{bmatrix}1\1\\vdots\1\end{bmatrix}u   \tag{16}$$&lt;/p&gt;
&lt;p&gt;$$y&amp;#x3D;[c_1\quad c_2\quad\cdots \quad c_n]x$$&lt;/p&gt;
&lt;p&gt;+++info 上式为对角标准型&lt;/p&gt;
&lt;p&gt;对于系统 $\left{ \begin{matrix} \dot{x}&amp;#x3D;Ax+Bu\y&amp;#x3D;Cx\\end{matrix}\right.$ ，若$A$为对角阵且各元素为传递函数的极点，$B$为全1矩阵，$C$内各元素为对应极点的留数，那么称该矩阵表达式为对角标准型。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;若传递函数具有重极点。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;先考虑只有一个重极点和若干个单极点，重数为$r$，$g(s)&amp;#x3D;\frac{c_{11}}{(s-p_1)^{r}}+\frac{c_{12}}{(s-p_1)^{r-1}}+\cdots+\frac{c_{1r}}{(s-p_1)^{}}+\frac{c_{r+1}}{s-p_{r+1}}+\cdots+\frac{c_n}{s-p_n}$，其中对于单极点仍有：$c_i&amp;#x3D;\lim_{s\to p_i}(s-p_i)g(s)$，而对于重极点则有：$c_1j&amp;#x3D;\frac{1}{(j-1)!}\lim_{s\to p_1}\frac{d^{j-1}}{ds^{j-1}}[(s-p_1)g(s)],\quad j&amp;#x3D;1,2,\cdots,r$。&lt;/p&gt;
&lt;p&gt;选取状态变量，化简求拉氏逆变换得到状态方程：&lt;/p&gt;
&lt;p&gt;$$\begin{matrix}\left{ \begin{matrix} x_1(s)&amp;#x3D;\frac{U(s)}{(s-p_1)^{r}}\x_2(s)&amp;#x3D;\frac{U(s)}{(s-p_1)^{r-1}}\\vdots\x_r(s)&amp;#x3D;\frac{U(s)}{(s-p_1)}\x_{r+1}(s)&amp;#x3D;\frac{U(s)}{s-p_{r+1}}\\vdots\x_{1}(s)&amp;#x3D;\frac{U(s)}{s-p_{n}}\end{matrix}\right.\quad\stackrel{}{\Rightarrow}\quad\left{ \begin{matrix} x_1(s)&amp;#x3D;\frac{1}{s-p_1}x_2(s)\x_2(s)&amp;#x3D;\frac{1}{s-p_1}x_3(s)\\vdots\x_r(s)&amp;#x3D;\frac{1}{s-p_1}U(s)\x_{r+1}(s)&amp;#x3D;\frac{1}{s-p_{r+1}}U(s)\\vdots\x_n(s)&amp;#x3D;\frac{1}{s-p_n}U(s)\end{matrix}\right.\quad\stackrel{L^{-1}}{\Rightarrow}\quad \left{ \begin{matrix} \dot{x}&lt;em&gt;1(t)&amp;#x3D;p_1x_1+x_2\\dot{x}&lt;em&gt;2(t)&amp;#x3D;p_1x_2+x_3\\vdots\\dot{x}&lt;em&gt;r(t)&amp;#x3D;p_1x_r+u\\dot{x}&lt;/em&gt;{r+1}(t)&amp;#x3D;p&lt;/em&gt;{r+1}x&lt;/em&gt;{x+1}+u\\vdots\\dot{x}_n(t)&amp;#x3D;p_nx_n+u\end{matrix}\right.     \end{matrix}$$&lt;/p&gt;
&lt;p&gt;输出方程的拉氏变换为：&lt;/p&gt;
&lt;p&gt;$$Y(s)&amp;#x3D;c_{11}x_1(s)+c_{12}x_2(s)+\cdots+c_{1r}x_r(s)+c_{r+1}x_{r+1}(s)+\cdots+c_{nx_n(s)}$$&lt;/p&gt;
&lt;p&gt;求拉氏逆变换有：&lt;/p&gt;
&lt;p&gt;$$y(t)&amp;#x3D;c_{11}x_1(t)+c_{12}x_2(t)+\cdots+c_{1r}x_r(t)+c_{r+1}x_{r+1}(t)+\cdots+c_{nx_n(t)}$$&lt;/p&gt;
&lt;p&gt;得到状态空间表达式为：&lt;/p&gt;
&lt;p&gt;$$\begin{bmatrix}\dot{x_1}\\dot{x_2}\\vdots\\dot{x_r}\\dot{x_{r+1}}\\vdots\\dot{x_n}\end{bmatrix}&amp;#x3D;\begin{bmatrix}p_1&amp;amp;1&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;\&amp;amp;p_1&amp;amp;\ddots&amp;amp;&amp;amp;&amp;amp;\bold{0}&amp;amp;\&amp;amp;&amp;amp;\ddots&amp;amp;1\&amp;amp;&amp;amp;&amp;amp;p_1\&amp;amp;&amp;amp;&amp;amp;&amp;amp;p_{r+1}&amp;amp;&amp;amp;\&amp;amp;\bold{0}&amp;amp;&amp;amp;&amp;amp;&amp;amp;\ddots&amp;amp;\&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;p_n\end{bmatrix}\begin{bmatrix}x_1\x_2\\vdots\x_r\x_{r+1}\\vdots\x_n\end{bmatrix}+\begin{bmatrix}0\0\\vdots\1\1\\vdots\1\end{bmatrix}u   \tag{17}$$&lt;/p&gt;
&lt;p&gt;$$y&amp;#x3D;\begin{bmatrix}c_{11}&amp;amp; c_{12}&amp;amp;\cdots&amp;amp; c_{1r}&amp;amp;c_{r+1}&amp;amp;\cdots&amp;amp;c_{n}\end{bmatrix}\begin{bmatrix}x_1\x_2\\vdots\x_r\x_{r+1}\\vdots\x_n\end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;对于重根部分，矩阵$A$中对应的是若尔当块，$B$中为一个只有末行是1其余行为0的矩阵，$C$中对应元素为$r$重极点对应的留数。而对于其中的单极点部分，形式与&lt;a href=&#34;#%E5%B9%B6%E8%81%94%E5%88%86%E8%A7%A3%E6%B3%95&#34;&gt;无重根&lt;/a&gt;时一致。&lt;/p&gt;
&lt;p&gt;拓展到具有多个重极点的情况。矩阵$A$中在对角上补充对应的若尔当块，$B$中对应补充只有末行是1其余行为0的矩阵，$C$中补充对应元素为$r$重极点对应的留数。&lt;/p&gt;
&lt;h2 id=&#34;组合系统&#34;&gt;&lt;a href=&#34;#组合系统&#34; class=&#34;headerlink&#34; title=&#34;组合系统&#34;&gt;&lt;/a&gt;组合系统&lt;/h2&gt;&lt;h3 id=&#34;并联联结&#34;&gt;&lt;a href=&#34;#并联联结&#34; class=&#34;headerlink&#34; title=&#34;并联联结&#34;&gt;&lt;/a&gt;并联联结&lt;/h3&gt;&lt;p&gt;在$n$个子系统并联的并联系统中，组合系统的传递函数矩阵等于子系统传递函数矩阵的和。&lt;/p&gt;
&lt;p&gt;$$G(s)&amp;#x3D;G_1(s)+G_2(s)+\cdots+G_n(s)   \tag{18}$$&lt;/p&gt;
&lt;h3 id=&#34;串联联结&#34;&gt;&lt;a href=&#34;#串联联结&#34; class=&#34;headerlink&#34; title=&#34;串联联结&#34;&gt;&lt;/a&gt;串联联结&lt;/h3&gt;&lt;p&gt;在$n$个子系统串联的串联系统中，组合系统的传递函数矩阵等于子系统传递函数矩阵的积。&lt;/p&gt;
&lt;p&gt;$$G(s)&amp;#x3D;G_n(s)\cdots G_2(s)G_1(s)   \tag{19}$$&lt;/p&gt;
&lt;p&gt;:::info &lt;/p&gt;
&lt;p&gt;注：子系统传递函数矩阵的积遵循左乘原则。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;反馈联结&#34;&gt;&lt;a href=&#34;#反馈联结&#34; class=&#34;headerlink&#34; title=&#34;反馈联结&#34;&gt;&lt;/a&gt;反馈联结&lt;/h3&gt;&lt;p&gt;对于系统 $G_1(s)$，若添加反馈环节（动态反馈$G_2(s)$或常数反馈$H$），则可得到组合系统的传递函数矩阵：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;动态反馈&lt;/strong&gt; 反馈子系统为动态系统$G_2(s)$。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;组合系统的传递函数矩阵为：&lt;/p&gt;
&lt;p&gt;$$G(s)&amp;#x3D;[I+G_2(s)G_1(s)]^{-1}G_1(s)   \tag{20}$$&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;常数反馈&lt;/strong&gt;  反馈环节为常数矩阵$H$。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;组合系统的传递函数矩阵为：&lt;/p&gt;
&lt;p&gt;$$G(s)&amp;#x3D;[I+HG_1(s)]^{-1}G_1(s)   \tag{21}$$&lt;/p&gt;
&lt;h2 id=&#34;线性变换&#34;&gt;&lt;a href=&#34;#线性变换&#34; class=&#34;headerlink&#34; title=&#34;线性变换&#34;&gt;&lt;/a&gt;线性变换&lt;/h2&gt;&lt;h3 id=&#34;系统状态的线性变换&#34;&gt;&lt;a href=&#34;#系统状态的线性变换&#34; class=&#34;headerlink&#34; title=&#34;系统状态的线性变换&#34;&gt;&lt;/a&gt;系统状态的线性变换&lt;/h3&gt;&lt;p&gt;对于一个状态方程$\left{ \begin{matrix} \dot{x}&amp;#x3D;Ax+Bu\y&amp;#x3D;Cx+Du\\end{matrix}\right.$，选择非奇异矩阵$P\in R^{n\times n}$作为变换阵，有$x&amp;#x3D;P\overline{x}$，那么此时状态方程可表示为：&lt;/p&gt;
&lt;p&gt;$$\dot{\overline{x}}&amp;#x3D;P^{-1}\dot{x}&amp;#x3D;P^{-1}[Ax+Bu]&amp;#x3D;P^{-1}AP\overline{x}+P^{-1}Bu&amp;#x3D;\overline{A}\overline{x}+\overline{B}u   \tag{22}$$&lt;/p&gt;
&lt;p&gt;$$y&amp;#x3D;Cx&amp;#x3D;CP\overline{x}&amp;#x3D;\overline{C}\overline{x}    \tag{23}$$&lt;/p&gt;
&lt;p&gt;其中，$\overline{A}&amp;#x3D;P^{-1}AP,\overline{B}&amp;#x3D;P^{-1}B,\overline{C}&amp;#x3D;CP,\overline{D}&amp;#x3D;D$。&lt;/p&gt;
&lt;p&gt;:::info&lt;/p&gt;
&lt;p&gt;该方法通常用于将非对角阵$A$转化为对角阵$\overline{A}$，从而实现状态变量的解耦。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;:::danger no-icon&lt;/p&gt;
&lt;p&gt;线性定常系统的系统矩阵A的特征值是表征系统的动力学特性的重要参量。系统的状态方程可通过适当的线性非奇异变换化为由特征值表征的标准形，对分析系统的结构特性非常直观。 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;特征值互异时，标准形为对角阵。&lt;/li&gt;
&lt;li&gt;特征值非互异时，标准形一般为约当阵。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;状态方程转化为对角标准型&#34;&gt;&lt;a href=&#34;#状态方程转化为对角标准型&#34; class=&#34;headerlink&#34; title=&#34;状态方程转化为对角标准型&#34;&gt;&lt;/a&gt;状态方程转化为对角标准型&lt;/h3&gt;&lt;h3 id=&#34;状态方程转化为若尔当标准型&#34;&gt;&lt;a href=&#34;#状态方程转化为若尔当标准型&#34; class=&#34;headerlink&#34; title=&#34;状态方程转化为若尔当标准型&#34;&gt;&lt;/a&gt;状态方程转化为若尔当标准型&lt;/h3&gt;&lt;h3 id=&#34;状态变换后特征值及传递函数矩阵的不变形&#34;&gt;&lt;a href=&#34;#状态变换后特征值及传递函数矩阵的不变形&#34; class=&#34;headerlink&#34; title=&#34;状态变换后特征值及传递函数矩阵的不变形&#34;&gt;&lt;/a&gt;状态变换后特征值及传递函数矩阵的不变形&lt;/h3&gt;</content>
        <category term="矩阵论" scheme="http://hening25.gitee.io/categories/%E7%9F%A9%E9%98%B5%E8%AE%BA/" />
        <category term="矩阵" scheme="http://hening25.gitee.io/tags/%E7%9F%A9%E9%98%B5/" />
        <category term="相似变换" scheme="http://hening25.gitee.io/tags/%E7%9B%B8%E4%BC%BC%E5%8F%98%E6%8D%A2/" />
        <updated>2024-09-20T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://hening25.gitee.io/2023/12/21/2023-12-21-%E7%8A%B6%E6%80%81%E5%8F%8D%E9%A6%88%E5%92%8C%E7%8A%B6%E6%80%81%E8%A7%82%E6%B5%8B%E5%99%A8/</id>
        <title>06 状态反馈和状态观测器</title>
        <link rel="alternate" href="http://hening25.gitee.io/2023/12/21/2023-12-21-%E7%8A%B6%E6%80%81%E5%8F%8D%E9%A6%88%E5%92%8C%E7%8A%B6%E6%80%81%E8%A7%82%E6%B5%8B%E5%99%A8/"/>
        <content type="html">&lt;p&gt;现代控制理论——06 状态反馈和状态观测器&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h1 id=&#34;状态反馈和状态观测器&#34;&gt;&lt;a href=&#34;#状态反馈和状态观测器&#34; class=&#34;headerlink&#34; title=&#34;状态反馈和状态观测器&#34;&gt;&lt;/a&gt;状态反馈和状态观测器&lt;/h1&gt;&lt;h2 id=&#34;状态反馈&#34;&gt;&lt;a href=&#34;#状态反馈&#34; class=&#34;headerlink&#34; title=&#34;状态反馈&#34;&gt;&lt;/a&gt;状态反馈&lt;/h2&gt;&lt;p&gt;状态反馈的公式可表示为：&lt;/p&gt;
&lt;p&gt;$$u&amp;#x3D;Lv-Kx     \tag{1}$$&lt;/p&gt;
&lt;p&gt;定常系统$\left{\begin{aligned}\dot{x}&amp;amp;&amp;#x3D;Ax+Bu\y&amp;amp;&amp;#x3D;Cx\end{aligned}\right.$ 表示为 $\left{\begin{aligned}\dot{x}&amp;amp;&amp;#x3D;(A-BK)x+BLv\y&amp;amp;&amp;#x3D;Cx\end{aligned}\right.$ 。&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;引入状态反馈并不影响系统的能控性，但有可能影响系统的能观测性。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;极点配置定理&#34;&gt;&lt;a href=&#34;#极点配置定理&#34; class=&#34;headerlink&#34; title=&#34;极点配置定理&#34;&gt;&lt;/a&gt;极点配置定理&lt;/h3&gt;&lt;p&gt;给定系统 $\Sigma:\left{\begin{aligned}\dot{x}&amp;amp;&amp;#x3D;Ax+Bu\y&amp;amp;&amp;#x3D;Cx+Du\end{aligned}\right.$ 通过状态反馈 $u&amp;#x3D;Lv-Kx$ 能使闭环极点位于预先任意指定位置上的充要条件是该系统 $\Sigma$ 完全能控。&lt;/p&gt;
&lt;p&gt;+++info 证明&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;充分性&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;必要性&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h3 id=&#34;单输入系统极点配置算法&#34;&gt;&lt;a href=&#34;#单输入系统极点配置算法&#34; class=&#34;headerlink&#34; title=&#34;单输入系统极点配置算法&#34;&gt;&lt;/a&gt;单输入系统极点配置算法&lt;/h3&gt;&lt;p&gt;求 $1\times n$ 的实向量 $K$，使得矩阵 $(A-bK)$ 的特征值为给定的复共轭成对出现的 $\lambda_1^&lt;em&gt;,\lambda_2^&lt;/em&gt;,\dots,\lambda_n^*$。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;算法1&lt;/strong&gt;  适用于系统维数较高，控制矩阵中非零元素较多的情况。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;计算前先判断系统是否完全可控，即判断 $rank(U_c)&amp;#x3D;n$ 。具体原因见&lt;a href=&#34;#%E6%9E%81%E7%82%B9%E9%85%8D%E7%BD%AE%E5%AE%9A%E7%90%86&#34;&gt;极点配置定理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;求 $A$ 的特征多项式：$a(s)&amp;#x3D;det(sI-A)&amp;#x3D;s^n+a_1s^{n-1}+\dots+a_{n-1}s+a_n$ 。&lt;/li&gt;
&lt;li&gt;求闭环系统的期望特征多项式：$a^&lt;em&gt;(s)&amp;#x3D;(s-\lambda_1^&lt;/em&gt;)(s-\lambda_2^&lt;em&gt;)\dots (s-\lambda_n^&lt;/em&gt;)&amp;#x3D;s^n+a_1^*s^{n-1}+\dots+a_{n-1}s+a_n$ 。&lt;/li&gt;
&lt;li&gt;计算：$\tilde{K}&amp;#x3D;\begin{bmatrix}a_n^&lt;em&gt;-a_n&amp;amp;a_{n-1}^&lt;/em&gt;-a_{n-1}&amp;amp;\dots&amp;amp;a_1^*-a_1\end{bmatrix}$ 。&lt;/li&gt;
&lt;li&gt;计算：$Q&amp;#x3D;\begin{bmatrix}b&amp;amp;Ab&amp;amp;\dots&amp;amp;A^{n-1}b\end{bmatrix}\cdot{}\begin{bmatrix}a_{n-1}&amp;amp;\dots&amp;amp;a_1&amp;amp;1\\vdots&amp;amp;\cdot^{\cdot^{\cdot}}&amp;amp;\cdot^{\cdot^{\cdot}}&amp;amp;\a_1&amp;amp;\cdot^{\cdot^{\cdot}}&amp;amp;0&amp;amp;\1\end{bmatrix}$ 。&lt;/li&gt;
&lt;li&gt;令 $P&amp;#x3D;Q^{-1}$，求 $K&amp;#x3D;\tilde{K}P$ 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id1 例题1&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;给定系统的状态空间表达式 $\dot{x}&amp;#x3D;\begin{bmatrix}0&amp;amp;0&amp;amp;0\1&amp;amp;-1&amp;amp;0\0&amp;amp;1&amp;amp;-1\end{bmatrix}x+\begin{bmatrix}1\0\0\end{bmatrix}u$，求状态反馈矩阵 $K$ 使得反馈后闭环特征值为 $\lambda_1^&lt;em&gt;&amp;#x3D;-2,\lambda_{2,3}^&lt;/em&gt;&amp;#x3D;-1\pm j\sqrt{3}$。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;由于 $rank(U_c)&amp;#x3D;rank(\begin{bmatrix}b&amp;amp;Ab&amp;amp;A^2b\end{bmatrix})&amp;#x3D;rank\begin{bmatrix}1&amp;amp;0&amp;amp;0\0&amp;amp;1&amp;amp;-1\0&amp;amp;0&amp;amp;1\end{bmatrix}&amp;#x3D;3$，故系统完全可控。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$det({sI-A})&amp;#x3D;det\begin{bmatrix}s&amp;amp;0&amp;amp;0\-1&amp;amp;s+1&amp;amp;0\0&amp;amp;-1&amp;amp;s+1\end{bmatrix}&amp;#x3D;s^3+2s^2+s$，得到 $a_1&amp;#x3D;2,a_2&amp;#x3D;1,a_3&amp;#x3D;0$。&lt;/li&gt;
&lt;li&gt;$(s-\lambda_1^&lt;em&gt;)(s-\lambda_2^&lt;/em&gt;)(s-\lambda_3^&lt;em&gt;)&amp;#x3D;(s+2)(s+1+j\sqrt3)(s+1-j\sqrt3)&amp;#x3D;s^3+4s^2+8s+8$，得到 $a_1^&lt;/em&gt;&amp;#x3D;4,a_2^&lt;em&gt;&amp;#x3D;8,a_3^&lt;/em&gt;&amp;#x3D;8$。&lt;/li&gt;
&lt;li&gt;$\tilde{K}&amp;#x3D;\begin{bmatrix}a_3^&lt;em&gt;-a_3&amp;amp;a_2^&lt;/em&gt;-a_2&amp;amp;a_1^*-a_1\end{bmatrix}&amp;#x3D;\begin{bmatrix}8&amp;amp;7&amp;amp;2\end{bmatrix}$ 。&lt;/li&gt;
&lt;li&gt;$Q&amp;#x3D;\begin{bmatrix}b&amp;amp;Ab&amp;amp;A^2b\end{bmatrix}\cdot{}\begin{bmatrix}a_2&amp;amp;a_1&amp;amp;1\a_1&amp;amp;1&amp;amp;0\1&amp;amp;0&amp;amp;0\end{bmatrix}&amp;#x3D;\begin{bmatrix}1&amp;amp;2&amp;amp;1\1&amp;amp;1&amp;amp;0\1&amp;amp;0&amp;amp;0\end{bmatrix}$ 。&lt;/li&gt;
&lt;li&gt;$P&amp;#x3D;Q^{-1}&amp;#x3D;\begin{bmatrix}1&amp;amp;2&amp;amp;1\1&amp;amp;1&amp;amp;0\1&amp;amp;0&amp;amp;0\end{bmatrix}^{-1}&amp;#x3D;\begin{bmatrix}0&amp;amp;0&amp;amp;1\0&amp;amp;1&amp;amp;-1\1&amp;amp;-2&amp;amp;1\end{bmatrix}$， $K&amp;#x3D;\tilde{K}P&amp;#x3D;\begin{bmatrix}8&amp;amp;7&amp;amp;2\end{bmatrix}\begin{bmatrix}0&amp;amp;0&amp;amp;1\0&amp;amp;1&amp;amp;-1\1&amp;amp;-2&amp;amp;1\end{bmatrix}&amp;#x3D;\begin{bmatrix}2&amp;amp;3&amp;amp;3\end{bmatrix}$ 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;算法2&lt;/strong&gt;  适用于系统维数较低，控制矩阵中只有一个非零元素的情况。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;将 $u&amp;#x3D;-Kx$ 代入系统状态方程 $sI-A+bK$，求得相应闭环系统的特征多项式： $a(s)&amp;#x3D;s^n+a_1(K)s^{n-1}+\cdots+a_{n-1}(K)s+a_n(K)$。&lt;/li&gt;
&lt;li&gt;计算理想特征多项式：$a^&lt;em&gt;(x)&amp;#x3D;(s-\lambda_1^&lt;/em&gt;)(s-\lambda_2^&lt;em&gt;)\cdots(s-\lambda_n^&lt;/em&gt;)&amp;#x3D;s^n+a_1^*s^{n-1}+\cdots+a_{n-1}^&lt;em&gt;s+a_n^&lt;/em&gt;$。&lt;/li&gt;
&lt;li&gt;将 $a(s)$ 与 $a^*(s)$ 各项一一对应即可求解。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id2 例题1&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;给定系统的状态空间表达式 $\dot{x}&amp;#x3D;\begin{bmatrix}0&amp;amp;0&amp;amp;0\1&amp;amp;-1&amp;amp;0\0&amp;amp;1&amp;amp;-1\end{bmatrix}x+\begin{bmatrix}1\0\0\end{bmatrix}u$，求状态反馈矩阵 $K$ 使得反馈后闭环特征值为 $\lambda_1^&lt;em&gt;&amp;#x3D;-2,\lambda_{2,3}^&lt;/em&gt;&amp;#x3D;-1\pm j\sqrt{3}$。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;由于 $rank(U_c)&amp;#x3D;rank(\begin{bmatrix}b&amp;amp;Ab&amp;amp;A^2b\end{bmatrix})&amp;#x3D;rank\begin{bmatrix}1&amp;amp;0&amp;amp;0\0&amp;amp;1&amp;amp;-1\0&amp;amp;0&amp;amp;1\end{bmatrix}&amp;#x3D;3$，故系统完全可控。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设所需的状态反馈矩阵 $K$ 为 $K&amp;#x3D;\begin{bmatrix}k_1&amp;amp;k_2&amp;amp;k_3\end{bmatrix}$，则经过状态反馈 $u&amp;#x3D;v-Kx$ 后闭环系统的特征多项式为:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$\begin{aligned}a(s)&amp;amp;&amp;#x3D;det(sI-A+bK)\&amp;amp;&amp;#x3D;det\begin{Bmatrix}\begin{bmatrix}s&amp;amp;0&amp;amp;0\0&amp;amp;s&amp;amp;0\0&amp;amp;0&amp;amp;s\end{bmatrix}-\begin{bmatrix}0&amp;amp;0&amp;amp;0\1&amp;amp;-1&amp;amp;0\0&amp;amp;1&amp;amp;-1\end{bmatrix}+\begin{bmatrix}1\0\0\end{bmatrix}\begin{bmatrix}k_1&amp;amp;k_2&amp;amp;k_3\end{bmatrix}\end{Bmatrix}\&amp;amp;&amp;#x3D;s^3+(2+k_1)s^2+(2k_1+k_2+1)s+(k_1+k_2+k_3)\end{aligned}$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由题，目标闭环期望极点对应的闭环特征多项式为：$a^*(s)&amp;#x3D;(s+2)(s+1+j\sqrt{3})(s+1-j\sqrt{3})&amp;#x3D;s^3+4s^2+8s+8$。&lt;/li&gt;
&lt;li&gt;对比 $a(s)$ 与 $a^*(s)$ ，可得 $2+k_1&amp;#x3D;4,2k_1+k_2+1&amp;#x3D;8,k_1+k_2+k_3&amp;#x3D;8$。解得 $K&amp;#x3D;\begin{bmatrix}k_1&amp;amp;k_2&amp;amp;k_3\end{bmatrix}&amp;#x3D;\begin{bmatrix}2&amp;amp;3&amp;amp;3\end{bmatrix}$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;状态观测器&#34;&gt;&lt;a href=&#34;#状态观测器&#34; class=&#34;headerlink&#34; title=&#34;状态观测器&#34;&gt;&lt;/a&gt;状态观测器&lt;/h2&gt;&lt;h3 id=&#34;状态观测器的存在条件&#34;&gt;&lt;a href=&#34;#状态观测器的存在条件&#34; class=&#34;headerlink&#34; title=&#34;状态观测器的存在条件&#34;&gt;&lt;/a&gt;状态观测器的存在条件&lt;/h3&gt;&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;充分条件：能观测。&lt;/li&gt;
&lt;li&gt;充要条件：不能观测的部分渐进稳定。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt; 给定定常系统 $\Sigma:\left{\begin{aligned}\dot{x}&amp;amp;&amp;#x3D;Ax+Bu\y&amp;amp;&amp;#x3D;Cx\end{aligned}\right.$ ，若状态完全能观测，则状态向量 $x$ 能够由输入 $x$ 和输出 $y$ 表示。&lt;/p&gt;
&lt;p&gt;+++info 证明&lt;/p&gt;
&lt;p&gt;由于 $\left{\begin{aligned}y&amp;amp;&amp;#x3D;Cx\\dot{y}&amp;amp;&amp;#x3D;C\dot{x}&amp;#x3D;CAx+CBu\y^{(n)}&amp;amp;&amp;#x3D;CA\dot{x}+CB\dot{u}&amp;#x3D;CA^2x+CABu+CB\dot{u}\ &amp;amp;\vdots\y^{(n-1)}&amp;amp;&amp;#x3D;CA^{n-1}x+CA^{n-2}Bu+\cdots+CBu^{(n-2)}\end{aligned}\right.$ ，则&lt;/p&gt;
&lt;p&gt;$$\begin{bmatrix}y\\dot{y}-CBu\y^{(n)}-CABu-CB\dot{u}\ \vdots\y^{(n-1)}-CA^{n-2}Bu-\cdots-CBu^{(n-2)}\end{bmatrix}&amp;#x3D;\begin{bmatrix}C\CA\CA^2\\vdots\CA^{n-1}\end{bmatrix}x&amp;#x3D;Nx$$&lt;/p&gt;
&lt;p&gt;当且仅当 $rank(N)&amp;#x3D;n$ 时，上述 $x$ 有唯一解。$N$即是能观性矩阵。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
</content>
        <category term="现代控制理论" scheme="http://hening25.gitee.io/categories/%E7%8E%B0%E4%BB%A3%E6%8E%A7%E5%88%B6%E7%90%86%E8%AE%BA/" />
        <updated>2023-12-20T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://hening25.gitee.io/2023/12/15/2023-12-15-%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9D%8E%E9%9B%85%E6%99%AE%E8%AF%BA%E5%A4%AB%E7%A8%B3%E5%AE%9A%E6%80%A7%E5%88%86%E6%9E%90/</id>
        <title>05 控制系统的李雅普诺夫稳定性分析</title>
        <link rel="alternate" href="http://hening25.gitee.io/2023/12/15/2023-12-15-%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9D%8E%E9%9B%85%E6%99%AE%E8%AF%BA%E5%A4%AB%E7%A8%B3%E5%AE%9A%E6%80%A7%E5%88%86%E6%9E%90/"/>
        <content type="html">&lt;p&gt;现代控制理论——05 控制系统的李雅普诺夫稳定性分析&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h1 id=&#34;控制系统的李雅普诺夫稳定性分析&#34;&gt;&lt;a href=&#34;#控制系统的李雅普诺夫稳定性分析&#34; class=&#34;headerlink&#34; title=&#34;控制系统的李雅普诺夫稳定性分析&#34;&gt;&lt;/a&gt;控制系统的李雅普诺夫稳定性分析&lt;/h1&gt;&lt;h2 id=&#34;李氏稳定性的定义&#34;&gt;&lt;a href=&#34;#李氏稳定性的定义&#34; class=&#34;headerlink&#34; title=&#34;李氏稳定性的定义&#34;&gt;&lt;/a&gt;李氏稳定性的定义&lt;/h2&gt;&lt;p&gt;何为平衡状态？对于一个系统 $\dot{x}&amp;#x3D;f(x,t)$，若果存在状态 $x_e$ 满足 $\dot{x}_e\equiv 0$，那么该状态即为平衡状态。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;稳定&lt;/strong&gt;：对于任意实数 $\varepsilon&amp;gt;0$，都存在一个实数 $\delta&amp;gt;0$ 满足 $||x_0-x_e||\leq\delta$，从任意 $x_0$ 触发的解都能够满足 $||x_t-x_e||\leq\varepsilon$，则称 $x_e$ 在李雅普诺夫意义下是&lt;strong&gt;稳定&lt;/strong&gt;的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;渐进稳定&lt;/strong&gt;：当上述解能够满足 $||x_t-x_e||\leq\mu$，也就是能够收敛到 $x_e$ 时，则称系统&lt;strong&gt;渐进稳定&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不稳定&lt;/strong&gt;：无论 $\delta$ 有多小，都会使得 $||x_t-x_e||&amp;gt;\varepsilon$，则称系统&lt;strong&gt;不稳定&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.imagehub.cc/images/2023/12/15/0dfa81a886d2cba99a38d05364f57ecd.png&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://s1.imagehub.cc/images/2023/12/15/8d8829ffb7da9bc162c4e91874a019f9.png&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://s1.imagehub.cc/images/2023/12/15/f84bc555ea80a021158a0f6dab2b292b.png&#34;&gt; {.gallery}&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;大范围渐进稳定&lt;/strong&gt;：从状态空间中所有初始点出发的轨迹都具有渐进稳定性，那么状态 $x_e$ 为&lt;strong&gt;大范围渐进稳定&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;正定函数&lt;/strong&gt;：对于函数 $V(x)$，在区域 $S$ 内的所有 $x$ 都有：① $V(x)$ 中的各分量的偏导均存在；②$V(0)&amp;#x3D;0$ ；③当 $x\neq0$ 时， $V(x)&amp;gt;0 (V(x)\geq0)$ 。则称该函数是正定(半正定)的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;李雅普诺夫第一方法&#34;&gt;&lt;a href=&#34;#李雅普诺夫第一方法&#34; class=&#34;headerlink&#34; title=&#34;李雅普诺夫第一方法&#34;&gt;&lt;/a&gt;李雅普诺夫第一方法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;线性系统的稳定性判据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;李雅普诺夫稳定的充要条件：系统矩阵 $A$ 的全部特征值实部大于0，即位于复平面左半部。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;非线性系统的稳定性判据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于非线性系统 $\dot{x}&amp;#x3D;f(x)$，讨论其在可能平衡状态 $x_e$ 的稳定性。引入新向量 $y&amp;#x3D;x-x_e$，那么系统的状态方程转换为 $\dot{y}&amp;#x3D;Ay+G(y)y$，其中 $A$ 为雅克比矩阵。 &lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;h2 id=&#34;李雅普诺夫第二方法&#34;&gt;&lt;a href=&#34;#李雅普诺夫第二方法&#34; class=&#34;headerlink&#34; title=&#34;李雅普诺夫第二方法&#34;&gt;&lt;/a&gt;李雅普诺夫第二方法&lt;/h2&gt;&lt;p&gt;对于状态方程为 $\dot{x}&amp;#x3D;f(x,t),f(0,t)&amp;#x3D;0$ 的系统，存在一个具有连续偏导的标量函数 $V(x,t)$，满足&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;$V(x,t)$ 正定，$\dot{V}(x,t)$ 半正定，则系统在原点&lt;strong&gt;一致稳定&lt;/strong&gt;；在此基础上，若对于任意 $t_0$ 和 $x_0\neq0$，在 $t\geq t_0$ 时不恒等于 0，则系统在原点&lt;strong&gt;渐进稳定&lt;/strong&gt;；在此基础上，若随着 $||x||\to \infty$，$V(x,t)\to \infty$，则系统在原点&lt;strong&gt;大范围渐进稳定&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$V(x,t)$ 正定，$\dot{V}(x,t)$ 正定，则系统在原点&lt;strong&gt;不稳定&lt;/strong&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;+++info 例题 &lt;/p&gt;
&lt;p&gt;;;;id1 例题1&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;用李雅普诺夫第二方法判断以下系统的稳定性。&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&amp;amp;\dot{x}_1&amp;#x3D;-(x_1+x_2)-x_2^2\&amp;amp;\dot{x}_2&amp;#x3D;-(x_1+x_2)+x_1x_2\end{aligned}$$&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;系统存在的唯一可能平衡状态为 $x_1&amp;#x3D;0,x_2&amp;#x3D;0$，取标量函数 $V(x)&amp;#x3D;x_1^2+x_2^2$，显然 $V(x)$ 正定，求导有 &lt;/p&gt;
&lt;p&gt;$$\dot{V}(x)&amp;#x3D;2x_1\dot{x}_1+2x_2\dot{x}_2&amp;#x3D;-2(x_1+x_2)^2$$&lt;/p&gt;
&lt;p&gt;负定。除原点外有 $x_1&amp;#x3D;-x_2$ 使得 $\dot{V}(x)&amp;#x3D;0$，但是系统状态仍在转移中，故 $\dot{V}(x)$ 不会恒定等于 0。且随着 $||x||\to \infty$，$V(x)\to \infty$，故系统在原点大范围渐进稳定。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h3 id=&#34;李雅普诺夫方程判断线性系统的稳定性&#34;&gt;&lt;a href=&#34;#李雅普诺夫方程判断线性系统的稳定性&#34; class=&#34;headerlink&#34; title=&#34;李雅普诺夫方程判断线性系统的稳定性&#34;&gt;&lt;/a&gt;李雅普诺夫方程判断线性系统的稳定性&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在连续系统 $\dot{x}&amp;#x3D;Ax$ 中，在平衡状态 $x&amp;#x3D;0$ 处是大范围渐进稳定的充要条件：对于给定的正定对称实矩阵 $Q$，存在一个正定实对称矩阵 $P$ ，满足 $A^TP+PA&amp;#x3D;-Q$。（其中 $x^TPx$ 就是李雅普诺夫函数 ） &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在离散系统 $x(k+1)&amp;#x3D;Gx(k)$，在平衡状态 $x&amp;#x3D;0$ 处是渐进稳定的充要条件：对于给定的正定对称实矩阵 $Q$，存在一个正定实对称矩阵 $P$ ，满足 $G^TPG-P&amp;#x3D;-Q$。（其中 $x^TPx$ 就是李雅普诺夫函数 ）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id2 例题1&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;以下系统的平衡状态在坐标原点，判断其渐进稳定性。&lt;/p&gt;
&lt;p&gt;$$\dot{x}&amp;#x3D;\begin{bmatrix}0&amp;amp;1\-1&amp;amp;-1\end{bmatrix}x$$&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;设 $P&amp;#x3D;\begin{bmatrix}p_{11}&amp;amp;p_{12}\p_{12}&amp;amp;p_{22}\end{bmatrix}$，由 $A^TP+PA&amp;#x3D;-I$ 有，$\begin{bmatrix}0&amp;amp;-1\1&amp;amp;-1\end{bmatrix}\begin{bmatrix}p_{11}&amp;amp;p_{12}\p_{12}&amp;amp;p_{22}\end{bmatrix}+\begin{bmatrix}p_{11}&amp;amp;p_{12}\p_{12}&amp;amp;p_{22}\end{bmatrix}\begin{bmatrix}0&amp;amp;1\-1&amp;amp;-1\end{bmatrix}&amp;#x3D;\begin{bmatrix}-1&amp;amp;0\0&amp;amp;-1\end{bmatrix}$，则 $\left{\begin{aligned}&amp;amp;-2p_{12}&amp;#x3D;-1\&amp;amp;p_{11}-p_{12}-p_{22}&amp;#x3D;0\&amp;amp;2p_{12}-2p_{22}&amp;#x3D;-1\end{aligned} \right.\to \left{\begin{aligned}&amp;amp;p_{11}&amp;#x3D;\frac{3}{2}\&amp;amp;p_{12}&amp;#x3D;1\&amp;amp;p_{22}&amp;#x3D;\frac{1}{2}\end{aligned} \right.$，得到 $P&amp;#x3D;\begin{bmatrix}\frac{3}{2}&amp;amp;\frac{1}{2}\\frac{1}{2}&amp;amp;1\end{bmatrix}$，验证各阶主子行列式是否大于 0：$P_{11}&amp;#x3D;\frac{3}{2}&amp;gt;0$，$P_{22}&amp;#x3D;det\begin{bmatrix}p_{11}&amp;amp;p_{12}\p_{12}&amp;amp;p_{22}\end{bmatrix}&amp;#x3D;\frac{5}{4}&amp;gt;0$，故矩阵 $P$ 正定。故系统在原点大范围渐进稳定。&lt;/p&gt;
&lt;p&gt;;;;id2 例题2&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;以下系统的平衡状态在坐标原点，判断其渐进稳定性。&lt;/p&gt;
&lt;p&gt;$$\begin{bmatrix}x_1(k+1)\x_2(k+1)\end{bmatrix}&amp;#x3D;\begin{bmatrix}0&amp;amp;0.5\-0.5&amp;amp;-1\end{bmatrix}\begin{bmatrix}x_1(k)\x_2(k)\end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;设 $P&amp;#x3D;\begin{bmatrix}p_{11}&amp;amp;p_{12}\p_{12}&amp;amp;p_{22}\end{bmatrix}$，由 $G^TPG-P&amp;#x3D;-I$ 有，$\begin{bmatrix}0&amp;amp;-0.5\0.5&amp;amp;-1\end{bmatrix}\begin{bmatrix}p_{11}&amp;amp;p_{12}\p_{12}&amp;amp;p_{22}\end{bmatrix}\begin{bmatrix}0&amp;amp;0.5\-0.5&amp;amp;-1\end{bmatrix}-\begin{bmatrix}p_{11}&amp;amp;p_{12}\p_{12}&amp;amp;p_{22}\end{bmatrix}&amp;#x3D;\begin{bmatrix}-1&amp;amp;0\0&amp;amp;-1\end{bmatrix}$，得到 $P&amp;#x3D;\begin{bmatrix}\frac{52}{27}&amp;amp;\frac{40}{27}\\frac{40}{27}&amp;amp;\frac{100}{27}\end{bmatrix}$，验证各阶主子行列式均大于 0，故矩阵 $P$ 正定。故系统在原点大范围渐进稳定。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
</content>
        <category term="现代控制理论" scheme="http://hening25.gitee.io/categories/%E7%8E%B0%E4%BB%A3%E6%8E%A7%E5%88%B6%E7%90%86%E8%AE%BA/" />
        <updated>2023-12-14T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://hening25.gitee.io/2023/12/14/2023-12-14_md+shoka%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</id>
        <title>Md+Shoka使用技巧</title>
        <link rel="alternate" href="http://hening25.gitee.io/2023/12/14/2023-12-14_md+shoka%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
        <content type="html">&lt;p&gt;关于Md文件使用Shoka主题渲染的关键技巧&amp;#x2F;基础&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h1 id=&#34;图片显示&#34;&gt;&lt;a href=&#34;#图片显示&#34; class=&#34;headerlink&#34; title=&#34;图片显示&#34;&gt;&lt;/a&gt;图片显示&lt;/h1&gt;&lt;h2 id=&#34;单个图片显示&#34;&gt;&lt;a href=&#34;#单个图片显示&#34; class=&#34;headerlink&#34; title=&#34;单个图片显示&#34;&gt;&lt;/a&gt;单个图片显示&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;图片下方显示标题内容&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;![](https://s1.imagehub.cc/images/2023/11/16/b60b630ac478d2911b6c682866cf5d09.jpeg &amp;quot;芙宁娜&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.imagehub.cc/images/2023/11/16/b60b630ac478d2911b6c682866cf5d09.jpeg&#34; title=&#34;芙宁娜&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;指定图片大小&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;![](https://s1.imagehub.cc/images/2023/11/16/b60b630ac478d2911b6c682866cf5d09.jpeg &amp;quot;芙宁娜200*300&amp;quot;)&amp;#123;height=&amp;quot;200px&amp;quot; width=&amp;quot;300px&amp;quot;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.imagehub.cc/images/2023/11/16/b60b630ac478d2911b6c682866cf5d09.jpeg&#34; title=&#34;芙宁娜200*300&#34;&gt;{height&amp;#x3D;”200px” width&amp;#x3D;”300px”}&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;使用本地图片时，编辑器和Shoka同时渲染出图片&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在&lt;code&gt;_posts&lt;/code&gt;路径下创建一个与md文件同名（不带文件尾缀）的文件夹，将图片放在该文件夹下，调用图片时使用相对路径调用。以本文件为例，文件名为&lt;code&gt;2023-12-14_md+shoka使用技巧.md&lt;/code&gt;，在文件同级目录下创建文件夹&lt;code&gt;2023-12-14_md+shoka使用技巧&lt;/code&gt;，内含图片&lt;code&gt;芙宁娜.jpg&lt;/code&gt;。图片引用小括号内填写（格式问题，就不用代码块了）：&lt;code&gt;2023-12-14_md+shoka使用技巧/芙宁娜.jpg&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;多个图片显示&#34;&gt;&lt;a href=&#34;#多个图片显示&#34; class=&#34;headerlink&#34; title=&#34;多个图片显示&#34;&gt;&lt;/a&gt;多个图片显示&lt;/h2&gt;&lt;p&gt;使用相册图案列表（&lt;strong&gt;注意图片之间不用换行，我这里为了方便看所以分行了&lt;/strong&gt;）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;![](https://s1.imagehub.cc/images/2023/11/16/b60b630ac478d2911b6c682866cf5d09.jpeg)
![](https://s1.imagehub.cc/images/2023/11/16/49ada8b3e781b287ee31af3cc75393fd.jpeg)
![](https://s1.imagehub.cc/images/2023/11/16/ec096dea8315c4068cd0e2aac4ac628f.jpeg)
![](https://s1.imagehub.cc/images/2023/11/16/dbb87c34a09e2edb4e2324cb8f8cf42c.jpeg) &amp;#123;.gallery&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.imagehub.cc/images/2023/11/16/b60b630ac478d2911b6c682866cf5d09.jpeg&#34;&gt;&lt;img data-src=&#34;https://s1.imagehub.cc/images/2023/11/16/49ada8b3e781b287ee31af3cc75393fd.jpeg&#34;&gt; &lt;img data-src=&#34;https://s1.imagehub.cc/images/2023/11/16/ec096dea8315c4068cd0e2aac4ac628f.jpeg&#34;&gt; &lt;img data-src=&#34;https://s1.imagehub.cc/images/2023/11/16/dbb87c34a09e2edb4e2324cb8f8cf42c.jpeg&#34;&gt; {.gallery}&lt;/p&gt;
&lt;p&gt;设置每行高度：data-height，默认为220。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;![](https://s1.imagehub.cc/images/2023/11/16/b60b630ac478d2911b6c682866cf5d09.jpeg)
![](https://s1.imagehub.cc/images/2023/11/16/49ada8b3e781b287ee31af3cc75393fd.jpeg)
![](https://s1.imagehub.cc/images/2023/11/16/ec096dea8315c4068cd0e2aac4ac628f.jpeg)
![](https://s1.imagehub.cc/images/2023/11/16/dbb87c34a09e2edb4e2324cb8f8cf42c.jpeg) &amp;#123;.gallery  data-height=&amp;quot;100&amp;quot;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.imagehub.cc/images/2023/11/16/b60b630ac478d2911b6c682866cf5d09.jpeg&#34;&gt;&lt;img data-src=&#34;https://s1.imagehub.cc/images/2023/11/16/49ada8b3e781b287ee31af3cc75393fd.jpeg&#34;&gt;&lt;img data-src=&#34;https://s1.imagehub.cc/images/2023/11/16/ec096dea8315c4068cd0e2aac4ac628f.jpeg&#34;&gt;&lt;img data-src=&#34;https://s1.imagehub.cc/images/2023/11/16/dbb87c34a09e2edb4e2324cb8f8cf42c.jpeg&#34;&gt; {.gallery  data-height&amp;#x3D;”100”}&lt;/p&gt;
&lt;h1 id=&#34;代码显示&#34;&gt;&lt;a href=&#34;#代码显示&#34; class=&#34;headerlink&#34; title=&#34;代码显示&#34;&gt;&lt;/a&gt;代码显示&lt;/h1&gt;&lt;p&gt;填入基本格式：&lt;code&gt;[language] [title] [url] [link text] [mark] [command]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;language&lt;/code&gt;：语言类型（raw表示空显示代码块）。&lt;code&gt;title&lt;/code&gt;：标题内容。&lt;code&gt;url&lt;/code&gt;：链接。&lt;code&gt;link text&lt;/code&gt;：链接显示内容。&lt;code&gt;mark&lt;/code&gt;：行高亮显示，用法为：&lt;code&gt;mark:2,4,5-8,9&lt;/code&gt;。&lt;code&gt;command&lt;/code&gt;：命令行提示符，用法为：&lt;code&gt;command:(&amp;quot;&amp;gt;&amp;gt; root$&amp;quot;:1,4||&amp;quot;&amp;gt;&amp;gt; host$&amp;quot;:6,7)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;编程语言代码&#34;&gt;&lt;a href=&#34;#编程语言代码&#34; class=&#34;headerlink&#34; title=&#34;编程语言代码&#34;&gt;&lt;/a&gt;编程语言代码&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-raw&#34;&gt;python 示例代码 https://hening25.gitee.io 链接 mark:1,3-4

import math
import numpy as np
import torch
array = np.arrary([1,2,3])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import math
import numpy as np
import torch
array = np.arrary([1,2,3])
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;命令行&#34;&gt;&lt;a href=&#34;#命令行&#34; class=&#34;headerlink&#34; title=&#34;命令行&#34;&gt;&lt;/a&gt;命令行&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-raw&#34;&gt;bash 命令行 https://hening25.gitee.io 链接 command:(&amp;quot;(base) PS D:\&amp;gt; &amp;quot;:1,2,6||&amp;quot;(base) PS D:\Github&amp;gt;&amp;quot;:7)

ls
pwd
Path
----
D:\
cd Github
pwd
Path
----
D:\Github
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls
pwd
Path
----
D:\
cd Github
pwd
Path
----
D:\Github
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;PDF文件显示&#34;&gt;&lt;a href=&#34;#PDF文件显示&#34; class=&#34;headerlink&#34; title=&#34;PDF文件显示&#34;&gt;&lt;/a&gt;PDF文件显示&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&amp;#123;% pdf file_path  600 1000%&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;待办事件&#34;&gt;&lt;a href=&#34;#待办事件&#34; class=&#34;headerlink&#34; title=&#34;待办事件&#34;&gt;&lt;/a&gt;待办事件&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;language-raw&#34;&gt;- [ ] 叉叉
- [x] 勾勾
&amp;#123;.danger&amp;#125;

- [ ] 叉叉
- [x] 勾勾
&amp;#123;.danger&amp;#125;

- [ ] 叉叉
- [x] 默认颜色
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 叉叉&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 勾勾&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;{.danger}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 叉叉&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 勾勾&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;{.primary}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 叉叉&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 默认颜色&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;习题模式&#34;&gt;&lt;a href=&#34;#习题模式&#34; class=&#34;headerlink&#34; title=&#34;习题模式&#34;&gt;&lt;/a&gt;习题模式&lt;/h1&gt;&lt;p&gt;该模式需要在&lt;code&gt;Front Matter&lt;/code&gt;中添加&lt;code&gt;quiz: true&lt;/code&gt;。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;标签&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;#123;.quiz&amp;#125;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选择题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;#123;.quiz .multi&amp;#125;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多选题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;#123;.quiz .true&amp;#125;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正确的判断题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;#123;.quiz .false&amp;#125;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;错误的判断题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;#123;.quiz .fill&amp;#125;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;填空题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]&amp;#123;.gap&amp;#125;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;空白下划线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;[答案内容]&amp;#123;.gap&amp;#125;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;答案内容下划线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;#123;.options&amp;#125;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选择题的选项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;#123;.correct&amp;#125;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选择题的正确选项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;答案解析&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;[8.2]&amp;#123;.mistake&amp;#125;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;错题备注&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;language-raw&#34;&gt;1. 下列定义中合法的是[]&amp;#123;.gap&amp;#125;。&amp;#123;.quiz .multi&amp;#125;
	- `shor _a=1-.1e-1;` &amp;#123;.correct&amp;#125;
	- `double b=1+5e2.5;`
	- `long do=0xfdaL;`
	- `float end_=0.1;` &amp;#123;.correct&amp;#125;
	&amp;#123;.options&amp;#125;
	&amp;gt; - :heavy_check_mark: 正确
	&amp;gt; - :x: 错误
	&amp;gt; - :x: 错误
	&amp;gt; - :heavy_check_mark: 正确
2. -8在内存中的存储形式是[]&amp;#123;.gap&amp;#125;。&amp;#123;.quiz&amp;#125;
	- `11111111 11111000` &amp;#123;.correct&amp;#125;
	- `10000000 00001000`
	- `00000000 00001000`
	- `11111111 11110111`
	&amp;#123;.options&amp;#125;
3. 已知int x=6;则执行x+=x-=x*x语句后，x的值是[-60]&amp;#123;.gap&amp;#125;。&amp;#123;.quiz .fill&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下列定义中合法的是[]{.gap}。{.quiz .multi}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shor _a=1-.1e-1;&lt;/code&gt; {.correct}&lt;/li&gt;
&lt;li&gt;&lt;code&gt;double b=1+5e2.5;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;long do=0xfdaL;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float end_=0.1;&lt;/code&gt; {.correct}&lt;br&gt;{.options}&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;:heavy_check_mark: 正确&lt;/li&gt;
&lt;li&gt;:x: 错误&lt;/li&gt;
&lt;li&gt;:x: 错误&lt;/li&gt;
&lt;li&gt;:heavy_check_mark: 正确&lt;br&gt;{.options}&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-8在内存中的存储形式是[]{.gap}。{.quiz}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;11111111 11111000&lt;/code&gt; {.correct}&lt;/li&gt;
&lt;li&gt;&lt;code&gt;10000000 00001000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;00000000 00001000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;11111111 11110111&lt;/code&gt;&lt;br&gt; {.options}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;已知int x&amp;#x3D;6;则执行x+&amp;#x3D;x-&amp;#x3D;x*x语句后，x的值是[-60]{.gap}。 {.quiz .fill}&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="杂谈" scheme="http://hening25.gitee.io/categories/%E6%9D%82%E8%B0%88/" />
        <updated>2023-12-13T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://hening25.gitee.io/2023/12/06/2023-12-06-%E7%BA%BF%E6%80%A7%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%83%BD%E6%8E%A7%E6%80%A7%E5%92%8C%E8%83%BD%E8%A7%82%E6%B5%8B%E6%80%A7/</id>
        <title>04 线性系统的能控性和能观测性</title>
        <link rel="alternate" href="http://hening25.gitee.io/2023/12/06/2023-12-06-%E7%BA%BF%E6%80%A7%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%83%BD%E6%8E%A7%E6%80%A7%E5%92%8C%E8%83%BD%E8%A7%82%E6%B5%8B%E6%80%A7/"/>
        <content type="html">&lt;p&gt;现代控制理论——04 线性系统的能控性和能观测性&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h1 id=&#34;线性系统的能控性和能观测性&#34;&gt;&lt;a href=&#34;#线性系统的能控性和能观测性&#34; class=&#34;headerlink&#34; title=&#34;线性系统的能控性和能观测性&#34;&gt;&lt;/a&gt;线性系统的能控性和能观测性&lt;/h1&gt;&lt;h2 id=&#34;能控性&#34;&gt;&lt;a href=&#34;#能控性&#34; class=&#34;headerlink&#34; title=&#34;能控性&#34;&gt;&lt;/a&gt;能控性&lt;/h2&gt;&lt;p&gt;能控性的简单理解为输入能够控制系统的状态变量 $x(t)$ 和输出变量 $y(t)$）。&lt;/p&gt;
&lt;p&gt;+++info 例子&lt;/p&gt;
&lt;p&gt;以下图结构图系统为例，输入 $u$ 只能影响 $x_1$ 而不能影响 $x_2$ ，因此可以说该系统中 $x_2$ 不可控， $x_1$ 可控，系统整体不可控。&lt;/p&gt;
&lt;img data-src=&#34;/2023/12/06/2023-12-06-%E7%BA%BF%E6%80%A7%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%83%BD%E6%8E%A7%E6%80%A7%E5%92%8C%E8%83%BD%E8%A7%82%E6%B5%8B%E6%80%A7/01%E8%83%BD%E6%8E%A7%E6%80%A7%E4%BE%8B%E5%AD%90.png&#34; class=&#34;&#34;&gt;{height=&#34;100px&#34; width=&#34;400px&#34;}

&lt;p&gt;+++&lt;/p&gt;
&lt;h3 id=&#34;线性定常系统的能控性定义&#34;&gt;&lt;a href=&#34;#线性定常系统的能控性定义&#34; class=&#34;headerlink&#34; title=&#34;线性定常系统的能控性定义&#34;&gt;&lt;/a&gt;线性定常系统的能控性定义&lt;/h3&gt;&lt;p&gt;对于线性定常系统： &lt;/p&gt;
&lt;p&gt;$$\dot{x}&amp;#x3D;Ax+Bu     \tag{1}$$&lt;/p&gt;
&lt;p&gt; 如果存在输入控制 $u(t)$ 在有限的时间 $[t_0,t_1]$ 内能将系统从初始状态 $x(t_0)$ 转移到任意的状态 $x(t_1)$ 。&lt;/p&gt;
&lt;h3 id=&#34;线性定常系统的能控性判据&#34;&gt;&lt;a href=&#34;#线性定常系统的能控性判据&#34; class=&#34;headerlink&#34; title=&#34;线性定常系统的能控性判据&#34;&gt;&lt;/a&gt;线性定常系统的能控性判据&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;判据1（PHB判据）：对于式（1），系统，该系统完全能控的充要条件为能控性矩阵&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$U_c&amp;#x3D;\begin{bmatrix}B&amp;amp;AB&amp;amp;\cdots&amp;amp;A^{n-1}B\end{bmatrix}   \tag{2}$$&lt;/p&gt;
&lt;p&gt;的秩为 $n$ ，即 $rankU_c &amp;#x3D;n$。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于线性系统，经过线性非奇异变换后，状态能控性不变。（即能控性与系统有关，与状态变量的选取无关）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;A = [1,2,1;0,1,0;1,0,3];   % A矩阵必须为n*n矩阵
B = [1,0;0,1;0,0];         % B矩阵必须为n*k矩阵
[n, ~] = size(A);          % 获取状态变量维数
Uc = [B]; temp = B;
for i = 1:n-1
    temp = A*temp;
    Uc = [Uc,temp];    % 能控矩阵
end
disp(rank(Uc)==n);     % 判断状态变量维数是否与能控矩阵的秩一致
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id1 例题1&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;考察以下系统的能控性。&lt;/p&gt;
&lt;p&gt;$$\begin{bmatrix}\dot{x}_1\\dot{x}_2\\dot{x}_3\end{bmatrix}&amp;#x3D;\begin{bmatrix}1&amp;amp;2&amp;amp;1\0&amp;amp;1&amp;amp;0\1&amp;amp;0&amp;amp;3\end{bmatrix}\begin{bmatrix}x_1\x_2\x_3\end{bmatrix}+\begin{bmatrix}1&amp;amp;0\0&amp;amp;1\0&amp;amp;0\end{bmatrix}\begin{bmatrix}u_1\u_2\end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;由题 $B&amp;#x3D;\begin{bmatrix}1&amp;amp;0\0&amp;amp;1\0&amp;amp;0\end{bmatrix}$， $AB&amp;#x3D;\begin{bmatrix}1&amp;amp;2&amp;amp;1\0&amp;amp;1&amp;amp;0\1&amp;amp;0&amp;amp;3\end{bmatrix}\begin{bmatrix}1&amp;amp;0\0&amp;amp;1\0&amp;amp;0\end{bmatrix}&amp;#x3D;\begin{bmatrix}1&amp;amp;2\0&amp;amp;1\1&amp;amp;0\end{bmatrix}$，$A^2B&amp;#x3D;\begin{bmatrix}1&amp;amp;2&amp;amp;1\0&amp;amp;1&amp;amp;0\1&amp;amp;0&amp;amp;3\end{bmatrix}\begin{bmatrix}1&amp;amp;2\0&amp;amp;1\1&amp;amp;0\end{bmatrix}&amp;#x3D;\begin{bmatrix}2&amp;amp;4\0&amp;amp;1\4&amp;amp;2\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;故 $U_c&amp;#x3D;\begin{bmatrix}1&amp;amp;0&amp;amp;1&amp;amp;2&amp;amp;2&amp;amp;4\0&amp;amp;1&amp;amp;0&amp;amp;1&amp;amp;0&amp;amp;1\0&amp;amp;0&amp;amp;1&amp;amp;0&amp;amp;4&amp;amp;2\end{bmatrix}$，其秩为3，故该系统可控。&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;判据2：对于式（1）系统，若系统矩阵 $A$ 具有互不相同的特征值，则系统状态可控的充要条件是，系统经过线性非奇异变换后，矩阵 $A$ 转换为对角标准型，状态方程为 $\dot{\hat{x}}&amp;#x3D;\begin{bmatrix}\lambda_1&amp;amp;&amp;amp;0\&amp;amp;\ddots&amp;amp;\0&amp;amp;&amp;amp;\lambda_n\end{bmatrix}\hat{x}+\hat{B}u$，其中 $\hat{B}$ 中不含全为0的行。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;+++primary 证明（理解）&lt;/p&gt;
&lt;p&gt;我们把上述的对角标准型状态方程 $\dot{\hat{x}}&amp;#x3D;\begin{bmatrix}\lambda_1&amp;amp;&amp;amp;0\&amp;amp;\ddots&amp;amp;\0&amp;amp;&amp;amp;\lambda_n\end{bmatrix}\hat{x}+\hat{B}u$ 展开：&lt;/p&gt;
&lt;p&gt;$$\left{ \begin{matrix}\dot{\hat{x}}&lt;em&gt;1&amp;#x3D;\lambda_1\hat{x}&lt;em&gt;1+\hat{b}&lt;/em&gt;{11}u_1+\hat{b}&lt;/em&gt;{12}u_2+\cdots+\hat{b}&lt;em&gt;{1p}u_p\\dot{\hat{x}}&lt;em&gt;2&amp;#x3D;\lambda_2\hat{x}&lt;em&gt;2+\hat{b}&lt;/em&gt;{21}u_1+\hat{b}&lt;/em&gt;{22}u_2+\cdots+\hat{b}&lt;/em&gt;{2p}u_p\\vdots\\dot{\hat{x}}&lt;em&gt;n&amp;#x3D;\lambda_n\hat{x}&lt;em&gt;n+\hat{b}&lt;/em&gt;{n1}u_1+\hat{b}&lt;/em&gt;{n2}u_2+\cdots+\hat{b}_{np}u_p\\end{matrix}\right.$$&lt;/p&gt;
&lt;p&gt;从中可以看出状态变量间是解耦的，状态变量间是没有联系的。若 $\hat{B}$ 中存在一行全为0，那么该行对应的状态变量将不受输入的控制，故系统不可控。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为何要转换为对角标准型：若非对角标准型，状态变量间并不是解耦的，那么输入便可通过状态变量间的耦合关系进行控制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id2 例题1&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;判断以下系统的可控性。&lt;/p&gt;
&lt;p&gt;$$\begin{bmatrix}\dot{x}_1\\dot{x}_2\\dot{x}_3\end{bmatrix}&amp;#x3D;\begin{bmatrix}3&amp;amp;0&amp;amp;0\0&amp;amp;-1&amp;amp;0\0&amp;amp;0&amp;amp;-2\end{bmatrix}\begin{bmatrix}x_1\x_2\x_3\end{bmatrix}+\begin{bmatrix}2\1\0\end{bmatrix}u$$&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;该系统不可控，因为状态变量 $x_3$ 不可控。&lt;/p&gt;
&lt;p&gt;;;;id2 例题2&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;判断以下系统的可控性。&lt;/p&gt;
&lt;p&gt;$$\begin{bmatrix}\dot{x}_1\\dot{x}_2\\dot{x}_3\end{bmatrix}&amp;#x3D;\begin{bmatrix}-7&amp;amp;0&amp;amp;0\0&amp;amp;-5&amp;amp;0\0&amp;amp;0&amp;amp;-1\end{bmatrix}\begin{bmatrix}x_1\x_2\x_3\end{bmatrix}+\begin{bmatrix}0&amp;amp;1\4&amp;amp;0\7&amp;amp;5\end{bmatrix}\begin{bmatrix}u_1\u_2\end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;该系统可控。&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;该判据的优点是能够容易判断出能控性，并且能够直接看出不可控的部分，但缺点在于需要等价变换。&lt;/p&gt;
&lt;p&gt;注意，上述判据2存在不适用情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若系统矩阵 $A$ 为对角形但含有相同元素；&lt;/li&gt;
&lt;li&gt;若系统矩阵 $A$ 的若尔当标准型中有两个若尔当块的特征值相同；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;+++info 例子&lt;/p&gt;
&lt;p&gt;对于系统 $\dot{x}&amp;#x3D;\begin{bmatrix}1&amp;amp;0\0&amp;amp;1\end{bmatrix}x+\begin{bmatrix}1\1\end{bmatrix}u$，矩阵 $B$ 中虽然没有全零行，但是矩阵 $A$ 为对角阵且含有相同元素，故该系统不可控。&lt;/p&gt;
&lt;p&gt;对于系统 $\dot{x}&amp;#x3D;\begin{bmatrix}-1&amp;amp;1&amp;amp;0\0&amp;amp;-4&amp;amp;0\0&amp;amp;0&amp;amp;-4\end{bmatrix}x+\begin{bmatrix}0\1\2\end{bmatrix}u$，虽然所有若尔当块的最后一行均没有全零行，但是矩阵 $A$ 为若尔当标准型且存在两个若尔当块的特征值相同，故该系统不可控。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;若系统矩阵 $A$ 具有重特征值 $\lambda_1(m_1重),\lambda_2(m_2重),\cdots,\lambda_k(m_k重)$ 且每个重特征值只有一个若尔当块时时，则系统状态可控的充要条件是，系统经过线性非奇异变换后，系统转换为若尔当标准型，状态方程为 $\dot{\hat{x}}&amp;#x3D;\begin{bmatrix}J_1&amp;amp;0&amp;amp;\cdots&amp;amp;0\0&amp;amp;J_2&amp;amp;\cdots&amp;amp;0\\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\0&amp;amp;0&amp;amp;\cdots&amp;amp;J_n\end{bmatrix}\hat{x}+\hat{B}u$，其中 $\hat{B}$ 中与每个若尔当块 $J_i$ 最后一行对应的行中各元素不全为0。&lt;/p&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id3 例题1&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;判断以下系统的可控性。&lt;/p&gt;
&lt;p&gt;$$\begin{bmatrix}\dot{x}_1\\dot{x}_2\\dot{x}_3\end{bmatrix}&amp;#x3D;\begin{bmatrix}-3&amp;amp;1&amp;amp;0\0&amp;amp;-3&amp;amp;0\0&amp;amp;0&amp;amp;1\end{bmatrix}\begin{bmatrix}x_1\x_2\x_3\end{bmatrix}+\begin{bmatrix}0&amp;amp;0\2&amp;amp;-1\0&amp;amp;3\end{bmatrix}\begin{bmatrix}u_1\u_2\end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;该系统可控。&lt;/p&gt;
&lt;p&gt;;;;id3 例题2&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;判断以下系统的可控性。&lt;/p&gt;
&lt;p&gt;$$\begin{bmatrix}\dot{x}_1\\dot{x}_2\\dot{x}_3\end{bmatrix}&amp;#x3D;\begin{bmatrix}4&amp;amp;1&amp;amp;0\0&amp;amp;4&amp;amp;0\0&amp;amp;0&amp;amp;-2\end{bmatrix}\begin{bmatrix}x_1\x_2\x_3\end{bmatrix}+\begin{bmatrix}4&amp;amp;2\0&amp;amp;0\3&amp;amp;0\end{bmatrix}\begin{bmatrix}u_1\u_2\end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;该系统不可控。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h3 id=&#34;线性定常系统的输出能控性&#34;&gt;&lt;a href=&#34;#线性定常系统的输出能控性&#34; class=&#34;headerlink&#34; title=&#34;线性定常系统的输出能控性&#34;&gt;&lt;/a&gt;线性定常系统的输出能控性&lt;/h3&gt;&lt;p&gt;很多情况下，被控制量往往是系统的输出而非状态变量，因此还需分析输出能控性。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;输出能控性的定义：对于线性定常系统： $\dot{x}&amp;#x3D;Ax+Bu$， 如果存在输入控制 $u(t)$ 在有限的时间 $[t_0,t_1]$ 内能将系统从初始状态 $y(t_0)$ 转移到任意的状态 $y(t_1)$ ，那么可以说明系统是输出的完全可控。&lt;/li&gt;
&lt;li&gt;输出可控性的判据：系统输出完全可控的充要条件是矩阵 $\begin{bmatrix}CB&amp;amp;CAB&amp;amp;CA^2B&amp;amp;\cdots&amp;amp;CA^{n-1}B\end{bmatrix}$ 的秩等于输出的维数，即矩阵 $C$ 的维数。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;A = [-4,1;2,-3];   % A矩阵必须为n*n矩阵
B = [1;2];         % B矩阵必须为n*k矩阵
C = [1,0];         % C矩阵必须为p*n矩阵
[n, ~] = size(A);  % 获取状态变量维数
[p, ~] = size(C);  % 获取输出维数
Uc = [C*B]; temp = eye(n,n);
for i = 1:n-1
    temp = temp*A;
    Uc = [Uc,C*temp*B];
end
disp(rank(Uc)==p);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id4 例题1&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;判断以下系统的状态能控性和输出能控性。&lt;/p&gt;
&lt;p&gt;$$\begin{matrix}\begin{bmatrix}\dot{x}_1\\dot{x}_2\end{bmatrix}&amp;#x3D;\begin{bmatrix}-4&amp;amp;1\2&amp;amp;-3\end{bmatrix}\begin{bmatrix}x_1\x_2\end{bmatrix}+\begin{bmatrix}1\2\end{bmatrix}u\y&amp;#x3D;\begin{bmatrix}1&amp;amp;0\end{bmatrix}\begin{bmatrix}x_1\x_2\end{bmatrix}\end{matrix}$$&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;系统的状态能控性矩阵：$\begin{bmatrix}B&amp;amp;AB\end{bmatrix}&amp;#x3D;\begin{bmatrix}1&amp;amp;-2\2&amp;amp;-4\end{bmatrix}$，秩为1，故系统状态不可控。&lt;/p&gt;
&lt;p&gt;系统的输出能控性矩阵：$\begin{bmatrix}CB&amp;amp;CAB\end{bmatrix}&amp;#x3D;\begin{bmatrix}1&amp;amp;-2\end{bmatrix}$，秩为1，故系统输出可控。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;能观测性&#34;&gt;&lt;a href=&#34;#能观测性&#34; class=&#34;headerlink&#34; title=&#34;能观测性&#34;&gt;&lt;/a&gt;能观测性&lt;/h2&gt;&lt;p&gt;能观测性是指通过对输出的测量来确定系统的状态变量，反映了从系统外部观测系统内部的能力。&lt;/p&gt;
&lt;p&gt;在前面&lt;strong&gt;状态方程的解&lt;/strong&gt;方面的内容中，我们知道线性时不变系统动态方程（取初态时间 $t_0&amp;#x3D;0$）的解为：&lt;/p&gt;
&lt;p&gt;$$x(t)&amp;#x3D;e^{A(t)}x(0)+\int_{0}^te^{A(t-\tau)}Bu(\tau),d\tau,  t\geq0   \tag{3}$$&lt;/p&gt;
&lt;p&gt;上式中，系统矩阵 $A,B$ 以及控制输入 $u(t)$ 已知，因此只需要关注初态 $x(0)$ 即可得到 $x(t)$。&lt;/p&gt;
&lt;h3 id=&#34;线性定常系统的能观性定义&#34;&gt;&lt;a href=&#34;#线性定常系统的能观性定义&#34; class=&#34;headerlink&#34; title=&#34;线性定常系统的能观性定义&#34;&gt;&lt;/a&gt;线性定常系统的能观性定义&lt;/h3&gt;&lt;p&gt;对于线性定常系统： &lt;/p&gt;
&lt;p&gt;$$\left{ \begin{aligned}\dot{x}&amp;amp;&amp;#x3D;Ax+Bu\y&amp;amp;&amp;#x3D;Cx   \end{aligned}\right.  \tag{4}$$&lt;/p&gt;
&lt;p&gt; 如果在任意给定的输入 $u(t)$ 下，根据输出 $y(t)$ 在有限的时间 $[t_0,t_1]$ 内的测量值唯一确定初始状态 $x(t_0)$ ，则称系统在 $t_0$ 时刻可观测。若在任意时刻都可观测，则该系统是状态完全可观测的。&lt;/p&gt;
&lt;h3 id=&#34;线性定常系统的能观性判据&#34;&gt;&lt;a href=&#34;#线性定常系统的能观性判据&#34; class=&#34;headerlink&#34; title=&#34;线性定常系统的能观性判据&#34;&gt;&lt;/a&gt;线性定常系统的能观性判据&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;判据1：对于式（4），系统，该系统完全能控的充要条件为能控性矩阵&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$U_o&amp;#x3D;\begin{bmatrix}C\CA\\vdots\CA^{n-1}\end{bmatrix}   \tag{5}$$&lt;/p&gt;
&lt;p&gt;的秩为 $n$ ，即 $rankU_o &amp;#x3D;n$。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;A = [2,-1;1,-3];   % A矩阵必须为n*n矩阵
B = [-1;1];        % B矩阵必须为n*k矩阵
C = [1,0;-1,0];    % C矩阵必须为p*n矩阵
[n, ~] = size(A);  % 获取状态变量维数
[p, ~] = size(C);  % 获取输出维数
Uo = [C]; %temp = eye(n,n);
for i = 1:n-1
    Uo = [Uo;Uo(end-p+1:end,:)*A];
end
disp(rank(Uo)==p);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id5 例题1&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;判断以下系统的能观测性&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}\begin{bmatrix}\dot{x_1}\\dot{x_2}\end{bmatrix}&amp;amp;&amp;#x3D;\begin{bmatrix}2&amp;amp;-1\1&amp;amp;-3\end{bmatrix}\begin{bmatrix}x_1\x_2\end{bmatrix}+\begin{bmatrix}-1\1\end{bmatrix}u\\begin{bmatrix}y_1\y_2\end{bmatrix}&amp;amp;&amp;#x3D;\begin{bmatrix}1&amp;amp;0\-1&amp;amp;0\end{bmatrix}\begin{bmatrix}x_1\x_2\end{bmatrix} \end{aligned}$$&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;系统的能观性矩阵 $U_o&amp;#x3D;\begin{bmatrix}C\CA\\end{bmatrix}&amp;#x3D;\begin{bmatrix}1&amp;amp;0\-1&amp;amp;0\2&amp;amp;-1\-2&amp;amp;1\end{bmatrix}$ 的秩为2，故该系统能观测。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;判据2：对于式（4）系统，若系统矩阵 $A$ 具有互不相同的特征值，则系统状态可观的充要条件是，系统经过线性非奇异变换后，矩阵 $A$ 转换为对角标准型，状态方程为 $\left{\begin{aligned}\dot{\hat{x}}&amp;amp;&amp;#x3D;\begin{bmatrix}\lambda_1&amp;amp;&amp;amp;0\&amp;amp;\ddots&amp;amp;\0&amp;amp;&amp;amp;\lambda_n\end{bmatrix}\hat{x}\y&amp;amp;&amp;#x3D;\hat{C}\hat{x}\end{aligned}\right.$，其中 $\hat{C}$ 中不含全为0的列。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;若系统矩阵 $A$ 具有重特征值 $\lambda_1(m_1重),\lambda_2(m_2重),\cdots,\lambda_k(m_k重)$ 且每个重特征值只有一个若尔当块时时，则系统状态可控的充要条件是，系统经过线性非奇异变换后，系统转换为若尔当标准型，状态方程为 $\left{\begin{aligned}\dot{\hat{x}}&amp;amp;&amp;#x3D;\begin{bmatrix}J_1&amp;amp;0&amp;amp;\cdots&amp;amp;0\0&amp;amp;J_2&amp;amp;\cdots&amp;amp;0\\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\0&amp;amp;0&amp;amp;\cdots&amp;amp;J_n\end{bmatrix}\hat{x}\y&amp;amp;&amp;#x3D;\hat{C}\hat{x}\end{aligned}\right.$，其中 $\hat{C}$ 中与每个若尔当块 $J_i$ 第一列对应的行中各元素不全为0。&lt;/p&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id6 例题1&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;判断以下系统的能观测性&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}\dot{x}&amp;amp;&amp;#x3D;\begin{bmatrix}-2&amp;amp;0\0&amp;amp;5\end{bmatrix}x\y&amp;amp;&amp;#x3D;\begin{bmatrix}1&amp;amp;3\end{bmatrix}x \end{aligned}$$&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;该系统为对角标准型，不含全为0的列，故系统完全可观测。&lt;/p&gt;
&lt;p&gt;;;;id6 例题2&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;判断以下系统的能观测性&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}\dot{x}&amp;amp;&amp;#x3D;\begin{bmatrix}2&amp;amp;1&amp;amp;0&amp;amp;0\0&amp;amp;2&amp;amp;0&amp;amp;0\0&amp;amp;0&amp;amp;3&amp;amp;1\0&amp;amp;0&amp;amp;0&amp;amp;3\end{bmatrix}x\y&amp;amp;&amp;#x3D;\begin{bmatrix}0&amp;amp;1&amp;amp;1&amp;amp;0\0&amp;amp;1&amp;amp;1&amp;amp;1\end{bmatrix}x \end{aligned}$$&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;该系统为若尔当标准型，第一个若尔当块第一列全为0，故系统不可观测。&lt;/p&gt;
&lt;p&gt;;;;id6 例题3&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;判断以下系统的能观测性&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}\dot{x}&amp;amp;&amp;#x3D;\begin{bmatrix}-3&amp;amp;1&amp;amp;0\0&amp;amp;-3&amp;amp;0\0&amp;amp;0&amp;amp;1\end{bmatrix}x\y&amp;amp;&amp;#x3D;\begin{bmatrix}1&amp;amp;0&amp;amp;0\0&amp;amp;0&amp;amp;-1\end{bmatrix}x \end{aligned}$$&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;该系统为若尔当标准型，所有若尔当块的第一列不全为0，故系统可观测。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;能控性与能观测性的对偶关系&#34;&gt;&lt;a href=&#34;#能控性与能观测性的对偶关系&#34; class=&#34;headerlink&#34; title=&#34;能控性与能观测性的对偶关系&#34;&gt;&lt;/a&gt;能控性与能观测性的对偶关系&lt;/h2&gt;&lt;h3 id=&#34;对偶系统&#34;&gt;&lt;a href=&#34;#对偶系统&#34; class=&#34;headerlink&#34; title=&#34;对偶系统&#34;&gt;&lt;/a&gt;对偶系统&lt;/h3&gt;&lt;p&gt;对于两个系统 $\Sigma_1:\left{ \begin{aligned}\dot{x}&amp;amp;&amp;#x3D;Ax+Bu\y&amp;amp;&amp;#x3D;Cx \end{aligned}  \right.$ ， $\Sigma_2:\left{ \begin{aligned}\dot{z}&amp;amp;&amp;#x3D;A^Tz+C^Tv\w&amp;amp;&amp;#x3D;B^Tz \end{aligned}  \right.$，其中 $x$ 与 $z$ 的维度相同，$u$ 与 $v$ 的维度相同，$y$ 与 $w$ 的维度相同，这两个系统即是对偶系统。&lt;/p&gt;
&lt;img data-src=&#34;/2023/12/06/2023-12-06-%E7%BA%BF%E6%80%A7%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%83%BD%E6%8E%A7%E6%80%A7%E5%92%8C%E8%83%BD%E8%A7%82%E6%B5%8B%E6%80%A7/02%E5%AF%B9%E5%81%B6%E7%B3%BB%E7%BB%9F.png&#34; class=&#34;&#34;&gt;{height=&#34;150px&#34;}

&lt;h3 id=&#34;对偶原理&#34;&gt;&lt;a href=&#34;#对偶原理&#34; class=&#34;headerlink&#34; title=&#34;对偶原理&#34;&gt;&lt;/a&gt;对偶原理&lt;/h3&gt;&lt;p&gt;对于上述两个系统 $\Sigma_1,\Sigma_2$，$\Sigma_1$ 能观 $\Leftrightarrow$ $\Sigma_2$ 能控，$\Sigma_1$ 能控 $\Leftrightarrow$ $\Sigma_2$ 能观。&lt;/p&gt;
&lt;p&gt;+++info 证明&lt;/p&gt;
&lt;p&gt;证明 $\Sigma_1$ 的能观性矩阵与 $\Sigma_2$ 的能控性矩阵一致， $\Sigma_1$ 的能控性矩阵与 $\Sigma_2$ 的能观性矩阵一致。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;进一步分析对偶系统的传递函数可知：$G_{\Sigma_1}(s)&amp;#x3D;[G_{\Sigma_2}(s)]^T$&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2 id=&#34;线性定常系统的结构分解&#34;&gt;&lt;a href=&#34;#线性定常系统的结构分解&#34; class=&#34;headerlink&#34; title=&#34;线性定常系统的结构分解&#34;&gt;&lt;/a&gt;线性定常系统的结构分解&lt;/h2&gt;&lt;p&gt;结构分解就是将系统的可控（可观）和不可控（不可观）的部分分离开，进而理解系统的内部。&lt;/p&gt;
&lt;p&gt;对于系统 $\left{ \begin{aligned}\dot{x}&amp;amp;&amp;#x3D;Ax+Bu\y&amp;amp;&amp;#x3D;Cx \end{aligned}   \right.$，以下将进行能控性分解、能观性分解和标准分解。&lt;/p&gt;
&lt;h3 id=&#34;能控性分解&#34;&gt;&lt;a href=&#34;#能控性分解&#34; class=&#34;headerlink&#34; title=&#34;能控性分解&#34;&gt;&lt;/a&gt;能控性分解&lt;/h3&gt;&lt;p&gt;假设系统不完全可控，即能控性矩阵的秩为 $n_1&amp;lt;n$。存在非奇异矩阵 $T_c$ 进行状态变换 $x&amp;#x3D;T_c\tilde{x}$ ，使得系统的状态空间方程变换为：$\left{ \begin{aligned}\dot{\tilde{x}}&amp;amp;&amp;#x3D;\tilde{A}\tilde{x}+\tilde{B}u\y&amp;amp;&amp;#x3D;\tilde{C}x \end{aligned}   \right.$，其中 $\tilde{A}&amp;#x3D;T_c^{-1}AT_c&amp;#x3D;\begin{bmatrix}\tilde{A}&lt;em&gt;{11}&amp;amp;\tilde{A}&lt;/em&gt;{12}\0&amp;amp;\tilde{A}&lt;em&gt;{22}\end{bmatrix}$，$\tilde{B}&amp;#x3D;T_c^{-1}B&amp;#x3D;\begin{bmatrix}\tilde{B}&lt;/em&gt;{1}\0\end{bmatrix}$，$\tilde{C}&amp;#x3D;CT_c&amp;#x3D;\begin{bmatrix}\tilde{C}&lt;em&gt;{1}&amp;amp;\tilde{C}&lt;em&gt;2\end{bmatrix}$，其中 $\tilde{A}&lt;/em&gt;{11},\tilde{A}&lt;/em&gt;{12},\tilde{A}&lt;em&gt;{22}$ 均为分块矩阵，各自的维数为 $n_1\times n_1,n_1\times (n-n_1),(n-n_1)\times (n-n_1)$，$\tilde{B}&lt;/em&gt;{1}$ 为 $n_1\times p$ 的分块矩阵，$\tilde{C}&lt;em&gt;{1},\tilde{C}&lt;/em&gt;{2}$ 为 $q\times n_1,q\times (n-n_1)$ 的分块矩阵。&lt;/p&gt;
&lt;p&gt;那么系统的 $n_1$ 维能控部分可表示为：$\dot{\tilde{x}}&amp;#x3D;\tilde{A}_{11}\tilde{x}&lt;em&gt;1+\tilde{A}&lt;/em&gt;{12}\tilde{x}_2+\tilde{B}_1u$，$n-n_1$ 维不可控部分可表示为：$\tilde{x}&lt;em&gt;2&amp;#x3D;\tilde{A}&lt;/em&gt;{22}\tilde{x}_2$ 。&lt;/p&gt;
&lt;p&gt;那么变换矩阵 $T_c$ 如何获取呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从能控性矩阵 $U_c&amp;#x3D;\begin{bmatrix}B&amp;amp;AB&amp;amp;\cdots&amp;amp;A^{n-1}B\end{bmatrix}$ 中选取 $n_1$ 个线性无关的列向量作为 $T_c$ 矩阵的前 $n_1$ 列。&lt;/li&gt;
&lt;li&gt;其余 $n-n_1$ 列可在保证 $T_c$ 非奇异的条件下任意选取。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id7 例题1&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;对下列系统进行能控性分解。&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}\dot{x}&amp;amp;&amp;#x3D;\begin{bmatrix}0&amp;amp;0&amp;amp;-1\1&amp;amp;0&amp;amp;-3\0&amp;amp;1&amp;amp;-3\end{bmatrix}x+\begin{bmatrix}1\1\0\end{bmatrix}u\y&amp;amp;&amp;#x3D;\begin{bmatrix}0&amp;amp;1&amp;amp;-2\end{bmatrix}x \end{aligned}$$&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算能控性矩阵的秩。$rank\begin{bmatrix}b&amp;amp;Ab&amp;amp;A^2b\end{bmatrix}&amp;#x3D;rank\begin{bmatrix}1&amp;amp;0&amp;amp;-1\1&amp;amp;1&amp;amp;-3\0&amp;amp;1&amp;amp;-2\end{bmatrix}&amp;#x3D;2&amp;lt;3$，系统不完全可控。&lt;/li&gt;
&lt;li&gt;选取两个线性无关的列向量 $\begin{bmatrix}1\1\0\end{bmatrix}$ 和$\begin{bmatrix}0\1\1\end{bmatrix}$。再任意选取另外一个线性无关的列向量 $\begin{bmatrix}0\0\1\end{bmatrix}$ 构成变换矩阵 $T_c&amp;#x3D;\begin{bmatrix}1&amp;amp;0&amp;amp;0\1&amp;amp;1&amp;amp;0\0&amp;amp;1&amp;amp;1\end{bmatrix}$。&lt;/li&gt;
&lt;li&gt;求逆：$T_c^{-1}&amp;#x3D;\begin{bmatrix}1&amp;amp;0&amp;amp;0\-1&amp;amp;1&amp;amp;0\1&amp;amp;-1&amp;amp;1\end{bmatrix}$。&lt;/li&gt;
&lt;li&gt;利用状态变换 $x&amp;#x3D;T_c\tilde{x}$ ，得到变换后的状态空间表达式：$\left{\begin{aligned}\dot{\tilde{x}}&amp;amp;&amp;#x3D;\begin{bmatrix}0&amp;amp;-1&amp;amp;-1\1&amp;amp;-2&amp;amp;-2\0&amp;amp;0&amp;amp;-1\end{bmatrix}\tilde{x}+\begin{bmatrix}1\0\0\end{bmatrix}u\y&amp;amp;&amp;#x3D;\begin{bmatrix}1&amp;amp;-1&amp;amp;-2\end{bmatrix}\tilde{x} \end{aligned}\right.$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;故可控部分为：$\left{\begin{aligned}&amp;amp;\dot{\tilde{x}}_1&amp;#x3D;\begin{bmatrix}0&amp;amp;-1\1&amp;amp;-2\end{bmatrix}\tilde{x}_1+\begin{bmatrix}1\0\end{bmatrix}u\&amp;amp;y&amp;#x3D;\begin{bmatrix}1&amp;amp;-1\end{bmatrix}\tilde{x}_1 \end{aligned}\right.$。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h3 id=&#34;能观性分解&#34;&gt;&lt;a href=&#34;#能观性分解&#34; class=&#34;headerlink&#34; title=&#34;能观性分解&#34;&gt;&lt;/a&gt;能观性分解&lt;/h3&gt;&lt;p&gt;假设系统不完全能观，即能观性矩阵的秩为 $n_2&amp;lt;n$。存在非奇异矩阵 $T_o$ 进行状态变换 $x&amp;#x3D;T_o\tilde{x}$ ，使得系统的状态空间方程变换为：$\left{ \begin{aligned}\dot{\tilde{x}}&amp;amp;&amp;#x3D;\tilde{A}\tilde{x}+\tilde{B}u\y&amp;amp;&amp;#x3D;\tilde{C}x \end{aligned}   \right.$，其中 $\tilde{A}&amp;#x3D;T_o^{-1}AT_o&amp;#x3D;\begin{bmatrix}\tilde{A}&lt;em&gt;{11}&amp;amp;0\\tilde{A}&lt;/em&gt;{21}&amp;amp;\tilde{A}&lt;em&gt;{22}\end{bmatrix}$，$\tilde{B}&amp;#x3D;T_o^{-1}B&amp;#x3D;\begin{bmatrix}\tilde{B}&lt;/em&gt;{1}\\tilde{B}&lt;em&gt;{2}\end{bmatrix}$，$\tilde{C}&amp;#x3D;CT_o&amp;#x3D;\begin{bmatrix}\tilde{C}&lt;/em&gt;{1}&amp;amp;0\end{bmatrix}$，其中 $\tilde{A}&lt;em&gt;{11},\tilde{A}&lt;/em&gt;{12},\tilde{A}&lt;em&gt;{22}$ 均为分块矩阵，各自的维数为 $n_2\times n_2,(n-n_2)\times n_2,(n-n_2)\times (n-n_2)$，$\tilde{B}&lt;/em&gt;{1},\tilde{B}&lt;em&gt;{2}$ 为 $n_2\times p,(n-n_2)\times p$ 的分块矩阵，$\tilde{C}&lt;/em&gt;{1}$ 为 $q\times n_2$ 的分块矩阵。&lt;/p&gt;
&lt;p&gt;那么系统的 $n_2$ 维能观部分可表示为：$\left{\begin{aligned}&amp;amp;\dot{\tilde{x}}&amp;#x3D;\tilde{A}_{11}\tilde{x}_1+\tilde{B}_1u\&amp;amp;y_1&amp;#x3D;\tilde{C}_1\tilde{x}_1\end{aligned}\right.$，$n-n_2$ 维不可观部分可表示为：$\tilde{x}&lt;em&gt;2&amp;#x3D;\tilde{A}&lt;/em&gt;{21}\tilde{x}&lt;em&gt;1+\tilde{A}&lt;/em&gt;{22}\tilde{x}&lt;em&gt;2+\tilde{B}&lt;/em&gt;{2}u$ 。&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;能观子系统的传递函数矩阵与原系统的传递函数矩阵相同，因为不能观测的部分不能出现在传递函数矩阵中。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;同样关键是变换矩阵 $T_o$ 如何获取。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从能观性矩阵 $U_o&amp;#x3D;\begin{bmatrix}C\CA\\vdots\CA^{n-1}\end{bmatrix}$ 中选取 $n_2$ 个线性无关的行向量作为 $T_o^{-1}$ 矩阵的前 $n_2$ 行。&lt;/li&gt;
&lt;li&gt;其余 $n-n_2$ 列可在保证 $T_o^{-1}$ 非奇异的条件下任意选取。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id8 例题1&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;对下列系统进行能观性分解。&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}\dot{x}&amp;amp;&amp;#x3D;\begin{bmatrix}0&amp;amp;0&amp;amp;-1\1&amp;amp;0&amp;amp;-3\0&amp;amp;1&amp;amp;-3\end{bmatrix}x+\begin{bmatrix}1\1\0\end{bmatrix}u\y&amp;amp;&amp;#x3D;\begin{bmatrix}0&amp;amp;1&amp;amp;-2\end{bmatrix}x \end{aligned}$$&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算能观性矩阵的秩。$rank\begin{bmatrix}C\CA\CA^2\end{bmatrix}&amp;#x3D;rank\begin{bmatrix}0&amp;amp;1&amp;amp;-2\1&amp;amp;-2&amp;amp;3\-2&amp;amp;3&amp;amp;-4\end{bmatrix}&amp;#x3D;2&amp;lt;3$，系统不完全可观。&lt;/li&gt;
&lt;li&gt;选取两个线性无关的行向量 $\begin{bmatrix}0&amp;amp;1&amp;amp;-2\end{bmatrix}$ 和$\begin{bmatrix}1&amp;amp;-2&amp;amp;3\end{bmatrix}$。再任意选取另外一个线性无关的行向量 $\begin{bmatrix}0&amp;amp;0&amp;amp;1\end{bmatrix}$ 构成变换矩阵 $T_o^{-1}&amp;#x3D;\begin{bmatrix}0&amp;amp;1&amp;amp;-2\1&amp;amp;-2&amp;amp;3\0&amp;amp;0&amp;amp;1\end{bmatrix}$。&lt;/li&gt;
&lt;li&gt;求逆：$T_o&amp;#x3D;\begin{bmatrix}2&amp;amp;1&amp;amp;1\1&amp;amp;0&amp;amp;2\0&amp;amp;0&amp;amp;1\end{bmatrix}$。&lt;/li&gt;
&lt;li&gt;利用状态变换 $x&amp;#x3D;T_o\tilde{x}$ ，得到变换后的状态空间表达式：$\left{\begin{aligned}\dot{\tilde{x}}&amp;amp;&amp;#x3D;\begin{bmatrix}0&amp;amp;1&amp;amp;0\-1&amp;amp;-2&amp;amp;0\1&amp;amp;0&amp;amp;-1\end{bmatrix}\tilde{x}+\begin{bmatrix}1\-1\0\end{bmatrix}u\y&amp;amp;&amp;#x3D;\begin{bmatrix}1&amp;amp;0&amp;amp;0\end{bmatrix}\tilde{x} \end{aligned}\right.$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;故可观部分为：$\left{\begin{aligned}&amp;amp;\dot{\tilde{x}}_1&amp;#x3D;\begin{bmatrix}0&amp;amp;-1\-1&amp;amp;-2\end{bmatrix}\tilde{x}_1+\begin{bmatrix}1\-1\end{bmatrix}u\&amp;amp;y&amp;#x3D;\begin{bmatrix}1&amp;amp;0\end{bmatrix}\tilde{x}_1 \end{aligned}\right.$。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;能控性、能观性与传递函数矩阵的关系&#34;&gt;&lt;a href=&#34;#能控性、能观性与传递函数矩阵的关系&#34; class=&#34;headerlink&#34; title=&#34;能控性、能观性与传递函数矩阵的关系&#34;&gt;&lt;/a&gt;能控性、能观性与传递函数矩阵的关系&lt;/h2&gt;&lt;p&gt;在单输入单输出系统中，系统能控能观的充要条件是传递函数中没有零极点相消的现象。&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;推论&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个系统的传递函数所表示的是该系统既能控又能观的那一部分子系统。&lt;/li&gt;
&lt;li&gt;一个系统的传递函数若有零、极点对消现象，则视状态变量的选择不同，系统或是不能控的或是不能观的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2 id=&#34;能控标准型&#34;&gt;&lt;a href=&#34;#能控标准型&#34; class=&#34;headerlink&#34; title=&#34;能控标准型&#34;&gt;&lt;/a&gt;能控标准型&lt;/h2&gt;&lt;p&gt;在单输入单输出系统（$\dot{x}&amp;#x3D;Ax+bu$），若系统矩阵 $A$ 和控制矩阵 $b$ 表示如下，那么其为状态空间表达式的能控标准型。&lt;/p&gt;
&lt;p&gt;$$A&amp;#x3D;\begin{bmatrix}0&amp;amp;1&amp;amp;0&amp;amp;\cdots&amp;amp;0\0&amp;amp;0&amp;amp;1&amp;amp;\cdots&amp;amp;0\\vdots&amp;amp;\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\0&amp;amp;0&amp;amp;0&amp;amp;\cdots&amp;amp;0\-a_n&amp;amp;-a_{n-1}&amp;amp;-a_{n-2}&amp;amp;\cdots&amp;amp;-a_1\end{bmatrix},b&amp;#x3D;\begin{bmatrix}0\0\\vdots\0\1\end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;对于线性定常系统 $\dot{x}&amp;#x3D;Ax+bu$，若其能控，那么必定存在非奇异变换 $\tilde{x}&amp;#x3D;Px$ 将该系统转换为能控标准型 $\dot{\tilde{x}}&amp;#x3D;A_c\tilde{x}+b_cu$（$A_c,b_c$ 符合上述能控标准型）。非奇异变换 $P&amp;#x3D;\begin{bmatrix}p_1\P_1A\\vdots\p_1A^{n-1}\end{bmatrix}$，其中 $p_1$ 由 $p_1&amp;#x3D;\begin{bmatrix}0&amp;amp;0&amp;amp;0&amp;amp;\cdots&amp;amp;0&amp;amp;1\end{bmatrix}\begin{bmatrix}b&amp;amp;Ab&amp;amp;A^{2}b&amp;amp;\cdots&amp;amp;A^{n-1}b\end{bmatrix}^{-1}$ 确定。&lt;/p&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id9 例题1&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;将下列线性定常系统化为能控标准型。&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}\dot{x}&amp;amp;&amp;#x3D;\begin{bmatrix}1&amp;amp;-1\1&amp;amp;0\end{bmatrix}x+\begin{bmatrix}1\1\end{bmatrix}u \end{aligned}$$&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;系统的能控性矩阵为：$U_c&amp;#x3D;\begin{bmatrix}b&amp;amp;Ab\end{bmatrix}&amp;#x3D;\begin{bmatrix}1&amp;amp;0\1&amp;amp;1\end{bmatrix}$，求逆得到 $U_c^{-1}&amp;#x3D;\begin{bmatrix}1&amp;amp;0\-1&amp;amp;1\end{bmatrix}$，进而计算 $p_1&amp;#x3D;\begin{bmatrix}-1&amp;amp;1\end{bmatrix}$。则变换矩阵$P&amp;#x3D;\begin{bmatrix}p_1\p_1A\end{bmatrix}&amp;#x3D;\begin{bmatrix}-1&amp;amp;1\0&amp;amp;1\end{bmatrix}$，求逆得到 $P^{-1}&amp;#x3D;\begin{bmatrix}-1&amp;amp;1\0&amp;amp;1\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;则 $A_c&amp;#x3D;PAP^{-1}&amp;#x3D;\begin{bmatrix}0&amp;amp;1\-1&amp;amp;1\end{bmatrix},b_c&amp;#x3D;Pb&amp;#x3D;\begin{bmatrix}0\1\end{bmatrix}$，则能控标准型表示为：$\dot{\tilde{x}}&amp;#x3D;\begin{bmatrix}0&amp;amp;1\-1&amp;amp;1\end{bmatrix}\tilde{x}+\begin{bmatrix}0\1\end{bmatrix}u$。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;能观测标准型&#34;&gt;&lt;a href=&#34;#能观测标准型&#34; class=&#34;headerlink&#34; title=&#34;能观测标准型&#34;&gt;&lt;/a&gt;能观测标准型&lt;/h2&gt;&lt;p&gt;在单输入单输出系统（$\left{\begin{aligned}&amp;amp;\dot{x}&amp;#x3D;Ax+bu\&amp;amp;y&amp;#x3D;cx\end{aligned}\right.$），若系统矩阵 $A$ 和控制矩阵 $b$ 表示如下，那么其为状态空间表达式的能控标准型。&lt;/p&gt;
&lt;p&gt;$$A&amp;#x3D;\begin{bmatrix}0&amp;amp;0&amp;amp;\cdots&amp;amp;0&amp;amp;-a_n\1&amp;amp;0&amp;amp;\cdots&amp;amp;0&amp;amp;-a_{n-1}\0&amp;amp;1&amp;amp;\cdots&amp;amp;0&amp;amp;-a_{n-2}\\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots&amp;amp;\vdots\0&amp;amp;0&amp;amp;\cdots&amp;amp;0&amp;amp;-a_1\end{bmatrix},c&amp;#x3D;\begin{bmatrix}0&amp;amp;0&amp;amp;\cdots&amp;amp;0&amp;amp;1\end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;对于线性定常系统 $\left{\begin{aligned}&amp;amp;\dot{x}&amp;#x3D;Ax+bu\&amp;amp;y&amp;#x3D;cx\end{aligned}\right.$，若其能观，那么必定存在非奇异变换 $x&amp;#x3D;T\tilde{x}$ 将该系统转换为能控标准型 $\left{\begin{aligned}&amp;amp;\dot{\tilde{x}}&amp;#x3D;A_o\tilde{x}+b_ou\&amp;amp;y&amp;#x3D;c_o\tilde{x}\end{aligned}\right.$（$A_o,c_o$ 符合上述能观标准型）。非奇异变换 $T&amp;#x3D;\begin{bmatrix}T_1&amp;amp;AT_1&amp;amp;\cdots&amp;amp;A^{n-1}T_1\end{bmatrix}$，其中 $T_1$ 由 $T_1&amp;#x3D;\begin{bmatrix}c\cA\cA^{2}\\vdots\cA^{n-1}\end{bmatrix}^{-1}\begin{bmatrix}0\0\\vdots\0\1\end{bmatrix}$ 确定。&lt;/p&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id10 例题1&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;将下列线性定常系统化为能观标准型。&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}\dot{x}&amp;amp;&amp;#x3D;\begin{bmatrix}1&amp;amp;-1\0&amp;amp;2\end{bmatrix}x\y&amp;amp;&amp;#x3D;\begin{bmatrix}-1&amp;amp;-\frac{1}{2}\end{bmatrix}x \end{aligned}$$&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;系统的能观性矩阵为：$U_o&amp;#x3D;\begin{bmatrix}c\cA\end{bmatrix}&amp;#x3D;\begin{bmatrix}-1&amp;amp;-\frac{1}{2}\-1&amp;amp;0\end{bmatrix}$，则 $T_1&amp;#x3D;\begin{bmatrix}c\cA\end{bmatrix}^{-1}\begin{bmatrix}0\1\end{bmatrix}&amp;#x3D;\begin{bmatrix}-1\2\end{bmatrix}$。则变换矩阵$T&amp;#x3D;\begin{bmatrix}T_1\AT_1\end{bmatrix}&amp;#x3D;\begin{bmatrix}-1&amp;amp;-3\2&amp;amp;4\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;则能观标准型表示为：$\left{\begin{aligned}&amp;amp;\dot{\tilde{x}}&amp;#x3D;T^{-1}AT\tilde{x}&amp;#x3D;\begin{bmatrix}0&amp;amp;-2\1&amp;amp;3\end{bmatrix}\tilde{x}\&amp;amp;y&amp;#x3D;cT\tilde{x}&amp;#x3D;\begin{bmatrix}0&amp;amp;1\end{bmatrix}\tilde{x}\end{aligned}\right.$。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
</content>
        <category term="现代控制理论" scheme="http://hening25.gitee.io/categories/%E7%8E%B0%E4%BB%A3%E6%8E%A7%E5%88%B6%E7%90%86%E8%AE%BA/" />
        <category term="能控性" scheme="http://hening25.gitee.io/tags/%E8%83%BD%E6%8E%A7%E6%80%A7/" />
        <category term="能观性" scheme="http://hening25.gitee.io/tags/%E8%83%BD%E8%A7%82%E6%80%A7/" />
        <updated>2023-12-05T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://hening25.gitee.io/2023/12/06/2023-12-06_%E7%89%B9%E5%BE%81%E5%9B%BE%E5%8F%AF%E8%A7%86%E5%8C%96/</id>
        <title>特征图可视化</title>
        <link rel="alternate" href="http://hening25.gitee.io/2023/12/06/2023-12-06_%E7%89%B9%E5%BE%81%E5%9B%BE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
        <content type="html">&lt;p&gt;卷积神经网络各层特征图的可视化&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h1 id=&#34;特征图可视化&#34;&gt;&lt;a href=&#34;#特征图可视化&#34; class=&#34;headerlink&#34; title=&#34;特征图可视化&#34;&gt;&lt;/a&gt;特征图可视化&lt;/h1&gt;&lt;p&gt;代码链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0hueTEyMTYvRmVhdHVyZU1hcFZpc3VhbGl6YXRpb24=&#34;&gt;https://github.com/Hny1216/FeatureMapVisualization&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;速食可直接跳转&lt;a href=&#34;#%E5%BC%95%E7%94%A8%E6%96%B9%E6%B3%95&#34;&gt;引用方法&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;特征图&#34;&gt;&lt;a href=&#34;#特征图&#34; class=&#34;headerlink&#34; title=&#34;特征图&#34;&gt;&lt;/a&gt;特征图&lt;/h2&gt;&lt;p&gt;理解特征图（Feature Map）就需要先理解卷积神经网络（Convolutional Neural Network，CNN）是如何工作的。&lt;/p&gt;
&lt;p&gt;卷积神经网络大体可以分为特征提取层和特征映射层。特征提取层主要由若干卷积层、激活层和池化层组成，特征映射层主要是多层全连接层。在卷积层中，使用不同的卷积核从局部感受野中提取各种特征，每个核生成自己的特征图，多个卷积核得到的特征图在深度方向堆叠得到输出特征图（Feature Maps）。&lt;/p&gt;
&lt;p&gt;以Alexnet为例，其网络结构如下图。其输入图像的大小为 $224\times224\times3$ ，第一个卷积层中卷积核的大小是$5\times5$，共有96个卷积核（分为两批），每个卷积核与输入进行卷积运算得到一张特征图，因此可以得到96张特征图（图中为何是48个特征图？Alexnet设计网络时运算能力不足，因此将网络分为了两批，每一批都是48，因此总特征图就是48*2&amp;#x3D;96张）。&lt;/p&gt;
&lt;img data-src=&#34;/2023/12/06/2023-12-06_%E7%89%B9%E5%BE%81%E5%9B%BE%E5%8F%AF%E8%A7%86%E5%8C%96/01-Alexnet%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84.png&#34; class=&#34;&#34;&gt;



&lt;h2 id=&#34;激活可视化&#34;&gt;&lt;a href=&#34;#激活可视化&#34; class=&#34;headerlink&#34; title=&#34;激活可视化&#34;&gt;&lt;/a&gt;激活可视化&lt;/h2&gt;&lt;p&gt;特征图的激活可视化本质就是可视化特征图，通过观察特征图中被激活的像素位置，从而借此理解卷积神经网络关注输入的那一部分数据信息，进而对卷积神经网络进行解释。&lt;/p&gt;
&lt;p&gt;同样以Alexnet网络的第一层卷积层为例，输入选择一张标签为“balloon”，大小为  $705\times705\times3$ 的图像。输入的三通道图像如下：&lt;/p&gt;
&lt;img data-src=&#34;/2023/12/06/2023-12-06_%E7%89%B9%E5%BE%81%E5%9B%BE%E5%8F%AF%E8%A7%86%E5%8C%96/02-%E8%BE%93%E5%85%A5%E5%9B%BE%E5%83%8F.png&#34; class=&#34;&#34;&gt;

&lt;p&gt;我们可视化浅层网络（Relu1）和深层网络（Relu4，Relu5），来观察网络各层激活了哪些特征（选取了前18个通道）。浅层网络激活的特征信息较多，且与原始数据较为相似，越深层网络所提取到的特征就越抽象，更加注重输入的纹理细节信息。&lt;/p&gt;
&lt;img data-src=&#34;/2023/12/06/2023-12-06_%E7%89%B9%E5%BE%81%E5%9B%BE%E5%8F%AF%E8%A7%86%E5%8C%96/03-Relu1.png&#34; class=&#34;&#34;&gt;

&lt;img data-src=&#34;/2023/12/06/2023-12-06_%E7%89%B9%E5%BE%81%E5%9B%BE%E5%8F%AF%E8%A7%86%E5%8C%96/04-Relu4.png&#34; class=&#34;&#34;&gt;

&lt;img data-src=&#34;/2023/12/06/2023-12-06_%E7%89%B9%E5%BE%81%E5%9B%BE%E5%8F%AF%E8%A7%86%E5%8C%96/05-Relu5.png&#34; class=&#34;&#34;&gt;

&lt;h2 id=&#34;代码解析&#34;&gt;&lt;a href=&#34;#代码解析&#34; class=&#34;headerlink&#34; title=&#34;代码解析&#34;&gt;&lt;/a&gt;代码解析&lt;/h2&gt;&lt;h2 id=&#34;引用方法&#34;&gt;&lt;a href=&#34;#引用方法&#34; class=&#34;headerlink&#34; title=&#34;引用方法&#34;&gt;&lt;/a&gt;引用方法&lt;/h2&gt;&lt;p&gt;本方法实现了一个特征图可视化类，提供了Matlab和Python两种语言的版本，以下根据需要使用合适的语言自行使用。&lt;/p&gt;
&lt;h3 id=&#34;下载&#34;&gt;&lt;a href=&#34;#下载&#34; class=&#34;headerlink&#34; title=&#34;下载&#34;&gt;&lt;/a&gt;下载&lt;/h3&gt;&lt;p&gt;下载链接如下：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0hueTEyMTYvRmVhdHVyZU1hcFZpc3VhbGl6YXRpb24=&#34;&gt;https://github.com/Hny1216/FeatureMapVisualization&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;环境&#34;&gt;&lt;a href=&#34;#环境&#34; class=&#34;headerlink&#34; title=&#34;环境&#34;&gt;&lt;/a&gt;环境&lt;/h3&gt;&lt;p&gt;确保特征图可视化类与运行脚本文件在一个路径即可。&lt;/p&gt;
&lt;h3 id=&#34;运行&#34;&gt;&lt;a href=&#34;#运行&#34; class=&#34;headerlink&#34; title=&#34;运行&#34;&gt;&lt;/a&gt;运行&lt;/h3&gt;&lt;p&gt;;;;id1 Matlab&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;a = alexnet;
Fmv = FeatureMapVisualization(a,isShow=true);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;;;;id1 Python&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import FeatureMapVisualization as Fmv
model = models.alexnet(pretrained=True)
modelLayer = list(model.children())
modelVisualization = Fmv.FeatureMapVisualization(modelLayer)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;;;;&lt;/p&gt;
</content>
        <category term="技能工具" scheme="http://hening25.gitee.io/categories/%E6%8A%80%E8%83%BD%E5%B7%A5%E5%85%B7/" />
        <updated>2023-12-05T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://hening25.gitee.io/2023/11/27/2023-11-27_%E7%AC%AC%E4%B8%80%E7%AF%87%E8%AE%BA%E6%96%87/</id>
        <title>第一篇论文</title>
        <link rel="alternate" href="http://hening25.gitee.io/2023/11/27/2023-11-27_%E7%AC%AC%E4%B8%80%E7%AF%87%E8%AE%BA%E6%96%87/"/>
        <content type="html">&lt;div class=&#34;hbe hbe-container&#34; id=&#34;hexo-blog-encrypt&#34; data-wpm=&#34;Oh, this is an invalid password. Check and try again, please.&#34; data-whm=&#34;OOPS, these decrypted content may changed, but you can still have a look.&#34;&gt;
  &lt;script id=&#34;hbeData&#34; type=&#34;hbeData&#34; data-hmacdigest=&#34;083768b854b2e685d8b2245d2afab260c70463acde536d70c61fbbd32f424dbf&#34;&gt;dcdd4c7f8418aae4a90e26acdd15c23ec5783b2cc8f3469f62f5f61fe907f52eef80494fef149402774d9a3bc0c449fc9d506c8e48b3df0a0ab428caa724b41105798cbb9dab0c42c7caa635732b9af0c4c56d1dfd9250f861951f59ab924a522e68ad3b2911e736f9ee1df34887375b9ce7cf82667088a489ee1b60a6c3a2a46f38d4acc9586603311f7eb5bd361c072ffb2a1cc1d8225ed8511d13107cee82d923a36020801943448e4a6314a2f284e152f5fb7e5cd9d3739402e91edd31b43e9acc88813db4dc5aa1d7b6f0182243d4500b4d0872cce59546761d6e4fdd7538c1dc9d54debebbf8f54800883971f7ec808c7ac670ff4b382031c5b1b2d91dc38169160208384a1177e045c27dee26b565183cabe7a15c17971b9cbce9008735718963d95bb4c481e8c316646c7e76b07ea249163d6ceffd99c58b276e3f129b5a30054a3383ac5928f105b33545b5ecf14e75dae456646571c7eaadabaa5538be9aa04fc3c52cd72ac95c04bcc3ea0894eb3fe3dc3023c6dfd3574cc9e3f1644daca3ad047b7f356d8bee48ac1b2179a91aeac4b28e0e545184dc949df3225ebc475aa958d1904cf0f0b579608b6076b1da49f3c31cf1a7a935f5636a18fa623e152599b99f3f1f1f53b765ee4d28bfd2aacc1fcf28c0df8c92f696a3a889ede584d2e6cb8858a7cec41c5ca55011a8e98d7c01af9f6e44bb8a54189b4b03ab52f401bed05500e28014d0214919a1b2fe809069e71afeba317844006f1d1a3cafe670015f212ea6c28eeb10bd6a57966643a09842bc6589e362099d6b12054fcb65639e8628728e5d8794936351a47a5c0d6589c4e90e2bb385cb1b44e5d596634697b6f6a0f20e4633bf4bbec7970258d4242d99263fc9f5b6e7886558a957582a2c2dca486c48da8bf9f351396acb91aa068de0734a4443efb1bb84cb3cfc8cd4020dce605bcd6f53dc72c4934209ccfe31a147e38991a9d6ae27a1e9d6167ee4c33bdc980d3e6cae9c600668a7bc22d1a98e2650cd850796de49e6522379ce18e59be828ec46be30d2e8226f017988487cbb5d34c09c01f5428854b73a22bb03721c57362c67bca61930968819b36a61e848666fca7cc108e27a98d104769300f4199f9ea756ce1c65104b1a037a9729630f0815a195b7e0edc48919d6784fb868da0a485fd9528b047a7d1435ff9ef6f2f918df5f3ceaeac5353fa9ab0108fc17d26cfae84884d2b293015fc061e934e4a68d4314d51aec63f19262b65d829fa64db22045527d799260fd41bc16d60e3140392781e56963c32bf49130&lt;/script&gt;
  &lt;div class=&#34;hbe hbe-content&#34;&gt;
    &lt;div class=&#34;hbe hbe-input hbe-input-default&#34;&gt;
      &lt;input class=&#34;hbe hbe-input-field hbe-input-field-default&#34; type=&#34;password&#34; id=&#34;hbePass&#34;&gt;
      &lt;label class=&#34;hbe hbe-input-label hbe-input-label-default&#34; for=&#34;hbePass&#34;&gt;
        &lt;span class=&#34;hbe hbe-input-label-content hbe-input-label-content-default&#34;&gt;Hey, password is required here.&lt;/span&gt;
      &lt;/label&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;script data-pjax src=&#34;/lib/hbe.js&#34;&gt;&lt;/script&gt;&lt;link href=&#34;/css/hbe.style.css&#34; rel=&#34;stylesheet&#34; type=&#34;text/css&#34;&gt;</content>
        <category term="杂谈" scheme="http://hening25.gitee.io/categories/%E6%9D%82%E8%B0%88/" />
        <updated>2023-11-26T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://hening25.gitee.io/2023/10/28/2023-10-29-%E7%8A%B6%E6%80%81%E6%96%B9%E7%A8%8B%E7%9A%84%E8%A7%A3/</id>
        <title>03 状态方程的解</title>
        <link rel="alternate" href="http://hening25.gitee.io/2023/10/28/2023-10-29-%E7%8A%B6%E6%80%81%E6%96%B9%E7%A8%8B%E7%9A%84%E8%A7%A3/"/>
        <content type="html">&lt;p&gt;现代控制理论——03 状态方程的解&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h1 id=&#34;状态方程的解&#34;&gt;&lt;a href=&#34;#状态方程的解&#34; class=&#34;headerlink&#34; title=&#34;状态方程的解&#34;&gt;&lt;/a&gt;状态方程的解&lt;/h1&gt;&lt;h2 id=&#34;线性时不变系统齐次状态方程的解&#34;&gt;&lt;a href=&#34;#线性时不变系统齐次状态方程的解&#34; class=&#34;headerlink&#34; title=&#34;线性时不变系统齐次状态方程的解&#34;&gt;&lt;/a&gt;线性时不变系统齐次状态方程的解&lt;/h2&gt;&lt;p&gt;对于$n$维线性时不变系统状态方程：$\bold{\dot{x}}&amp;#x3D;\bold{Ax}(t)+\bold{Bu}(t)$，系统状态方程的解即为系统的运动。当控制输入为$0$时对应的齐次状态方程 $\bold{\dot{x}}&amp;#x3D;\bold{Ax}(t)$ 的解为系统的自由运动。&lt;/p&gt;
&lt;p&gt;对于标量一阶微分方程的齐次方程 $\dot{x}&amp;#x3D;ax(t)$，若初始时刻为$t_0$，则方程的解为$x(t)&amp;#x3D;e^{a(t-t_0)}x(t_0)$，其中指数函数展开为无穷级数：$e^{a(t-t_0)}&amp;#x3D;\sum^{+\infty}_{n&amp;#x3D;0}\frac{1}{n!}a^n(t-t_0)^n$。&lt;/p&gt;
&lt;p&gt;拓展到矢量一阶微分方程的齐次方程 $\bold{\dot{x}}&amp;#x3D;\bold{Ax}(t)$ ，解可以表示为&lt;/p&gt;
&lt;p&gt;$$\bold{x}(t)&amp;#x3D;e^{\bold{A}(t-t_0)}\bold{x}(t_0)     \tag{1}$$&lt;/p&gt;
&lt;p&gt;其中$e^{\bold{A}(t-t_0)}&amp;#x3D;\sum^{+\infty}_{n&amp;#x3D;0}\frac{1}{n!}\bold{A}^n(t-t_0)^n$，称为矩阵指数。&lt;/p&gt;
&lt;h2 id=&#34;矩阵指数&#34;&gt;&lt;a href=&#34;#矩阵指数&#34; class=&#34;headerlink&#34; title=&#34;矩阵指数&#34;&gt;&lt;/a&gt;矩阵指数&lt;/h2&gt;&lt;p&gt;矩阵指数函数表示为：$e^{\bold{A}(t)}&amp;#x3D;\sum^{+\infty}_{n&amp;#x3D;0}\frac{1}{n!}\bold{A}^n(t)^n$，即输入为$0$时的解（零输入响应）。&lt;/p&gt;
&lt;h3 id=&#34;矩阵指数的性质&#34;&gt;&lt;a href=&#34;#矩阵指数的性质&#34; class=&#34;headerlink&#34; title=&#34;矩阵指数的性质&#34;&gt;&lt;/a&gt;矩阵指数的性质&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;矩阵指数的导数：$\frac{d}{dt}e^{\bold{A}t}&amp;#x3D;\bold{A}e^{\bold{A}t}&amp;#x3D;e^{\bold{A}t}\bold{A}$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于$n\times{n}$阶方阵$\bold{A}$和$\bold{B}$，若$\bold{A}\bold{B}&amp;#x3D;\bold{B}\bold{A}$，则$e^{(\bold{A}+\bold{B})t}&amp;#x3D;e^{\bold{A}t}e^{\bold{B}t}$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若$t_1$与$t_2$为独立的自变量，则$e^{\bold{A}(t_1+t_2)}&amp;#x3D;e^{\bold{A}t_1}e^{\bold{A}t_2}$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$e^{\bold{A}*0}&amp;#x3D;\bold{I}$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$e^{\bold{A}t}e^{\bold{-A}t}&amp;#x3D;\bold{I}$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$e^{\bold{P}^{-1}\bold{A}\bold{P}}&amp;#x3D;\bold{P}^{-1}e^{\bold{A}}\bold{P}$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$lim_{t\to0}e^{\bold{A}t}&amp;#x3D;\bold{I}$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若$\bold{A}$为对角矩阵，即$\bold{A}&amp;#x3D;\begin{bmatrix} \lambda_1&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;\lambda_2&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;\lambda_n\end{bmatrix}$，则$e^{\bold{A}t}&amp;#x3D;\begin{bmatrix} e^{\lambda_1t}&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;e^{\lambda_2t}&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;e^{\lambda_nt}\end{bmatrix}$。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;+++primary  证明&lt;/p&gt;
&lt;p&gt;$e^{\bold{A}t}&amp;#x3D;\bold{I}+\bold{A}t+\frac{1}{2!}\bold{A}^2t^2+\cdots$&lt;/p&gt;
&lt;p&gt;$&amp;#x3D;\begin{bmatrix} 1&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;1&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;1\end{bmatrix}+\begin{bmatrix} \lambda_1&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;\lambda_2&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;\lambda_n\end{bmatrix}t+\frac{1}{2!}\begin{bmatrix} \lambda_1^2&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;\lambda_2^2&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;\lambda_n^2\end{bmatrix}t^2+\cdots$&lt;/p&gt;
&lt;p&gt;$&amp;#x3D;\begin{bmatrix} \sum^{+\infty}&lt;em&gt;{n&amp;#x3D;0}\frac{1}{n!}\lambda_1^nt^n&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;\sum^{+\infty}&lt;/em&gt;{n&amp;#x3D;0}\frac{1}{n!}\lambda_2^nt^n&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;\sum^{+\infty}_{n&amp;#x3D;0}\frac{1}{n!}\lambda_n^nt^n\end{bmatrix}&amp;#x3D;\begin{bmatrix} e^{\lambda_1t}&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;e^{\lambda_2t}&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;e^{\lambda_nt}\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;若$\bold{A}$为$m\times{m}$的若尔当块，即$\bold{A}&amp;#x3D;\begin{bmatrix} \lambda&amp;amp;1&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;\lambda&amp;amp;1&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\lambda&amp;amp;\ddots&amp;amp;\vdots\0&amp;amp;0&amp;amp;\cdots&amp;amp;\lambda&amp;amp;1\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;0&amp;amp;\lambda\end{bmatrix}&lt;em&gt;{m\times{m}}$，则$e^{\bold{A}t}&amp;#x3D;e^{\lambda t}\begin{bmatrix} 1&amp;amp;t&amp;amp;\frac{t^{2}}{2!}&amp;amp;\cdots&amp;amp;\frac{t^{m-1}}{(m-1)!}\ 0&amp;amp;1&amp;amp;t&amp;amp;\cdots&amp;amp;\frac{t^{m-2}}{(m-2)!}\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\ddots&amp;amp;\vdots\0&amp;amp;0&amp;amp;\cdots&amp;amp;1&amp;amp;t\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;0&amp;amp;1\end{bmatrix}&lt;/em&gt;{m\times{m}}$。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;+++primary 若尔当块&lt;/p&gt;
&lt;p&gt;形如$\begin{bmatrix} \lambda&amp;amp;1&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;\lambda&amp;amp;1&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\lambda&amp;amp;\ddots&amp;amp;\vdots\0&amp;amp;0&amp;amp;\cdots&amp;amp;\lambda&amp;amp;1\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;0&amp;amp;\lambda\end{bmatrix}_{m\times{m}}$为$m$阶若尔当矩阵，1阶若尔当矩阵为$\lambda$。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;若$\bold{A}$为一个有多个若尔当块的若尔当矩阵（即若当标准型），即$\bold{A}&amp;#x3D;\begin{bmatrix} \bold{A}_1&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;\bold{A}_2&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;\bold{A}_n\end{bmatrix}$，则$e^{\bold{A}t}&amp;#x3D;\begin{bmatrix} e^{\bold{A}_1t}&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;e^{\bold{A}_2t}&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;e^{\bold{A}_nt}\end{bmatrix}$。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;矩阵指数的计算&#34;&gt;&lt;a href=&#34;#矩阵指数的计算&#34; class=&#34;headerlink&#34; title=&#34;矩阵指数的计算&#34;&gt;&lt;/a&gt;矩阵指数的计算&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;定义计算：$e^{\bold{A}t}&amp;#x3D;\sum^{+\infty}_{n&amp;#x3D;0}\frac{1}{n!}\bold{A}^n(t)^n$。该方法适用于计算机运算。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;+++info  例题&lt;/p&gt;
&lt;p&gt;;;;id1 例题1&lt;/p&gt;
&lt;p&gt;:::info &lt;/p&gt;
&lt;p&gt;已知$\bold{A}&amp;#x3D;\begin{bmatrix} 0&amp;amp;1\-1&amp;amp;0\end{bmatrix}$，求$e^{\bold{A}t}$。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;由定义，&lt;/p&gt;
&lt;p&gt;$\begin{aligned}e^{\bold{A}t}&amp;amp;&amp;#x3D;\bold{I}+\bold{A}t+\frac{1}{2!}+\cdots&amp;#x3D;\begin{bmatrix}1&amp;amp;0\0&amp;amp;1\end{bmatrix}+\begin{bmatrix}0&amp;amp;t\-t&amp;amp;0\end{bmatrix}+\frac{1}{2!}\begin{bmatrix}-t^2&amp;amp;0\0&amp;amp;-t^2\end{bmatrix}+\cdots\&amp;amp;&amp;#x3D;\begin{bmatrix}1-\frac{t^2}{2!}+\cdots&amp;amp;t-\frac{t^3}{3!}+\cdots\-t+\frac{t^3}{3!}-\cdots&amp;amp;1-\frac{t^2}{2!}+\cdots\end{bmatrix}&amp;#x3D;\begin{bmatrix} \cos{t}&amp;amp;\sin{t}\-\sin{t}&amp;amp;\cos{t}\end{bmatrix}\end{aligned}$.&lt;/p&gt;
&lt;p&gt;;;; &lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;拉氏变换法：利用拉氏变换在频域中求解齐次状态方程的解。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;设线性时不变齐次状态方程为 $\bold{\dot{x}}&amp;#x3D;\bold{Ax}(t)$，$\bold{x}(0)&amp;#x3D;\bold{x}_0$，$t\geq{t_0}$。&lt;/p&gt;
&lt;p&gt;作拉氏变换有 $s\bold{X}(s)-\bold{x}(0)&amp;#x3D;\bold{AX}(s)$，即 $(s\bold{I}-\bold{A})\bold{X}(s)&amp;#x3D;\bold{x}(0)$，那么 &lt;/p&gt;
&lt;p&gt;$$\bold{X}(s) &amp;#x3D;(s\bold{I}-\bold{A})^{-1}\bold{x}(0)$$&lt;/p&gt;
&lt;p&gt;取拉氏逆变换有 $\bold{x}(0)&amp;#x3D;L^{-1}[(s\bold{I}-\bold{A})^{-1}\bold{x}(0)]&amp;#x3D;L^{-1}[(s\bold{I}-\bold{A})^{-1}]\bold{x}(0)$，因此 &lt;/p&gt;
&lt;p&gt;$$e^{\bold{A}t}&amp;#x3D;L^{-1}[(s\bold{I}-\bold{A})^{-1}]     \tag{2}$$&lt;/p&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id2 例题1&lt;/p&gt;
&lt;p&gt;:::info&lt;/p&gt;
&lt;p&gt;计算矩阵 $\bold{A}&amp;#x3D;\begin{bmatrix}0&amp;amp;1\-2&amp;amp;-3\end{bmatrix}$的矩阵指数。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;由拉氏变换法，$(s\bold{I}-\bold{A})&amp;#x3D;\begin{bmatrix} s&amp;amp;-1\2&amp;amp;s+3\end{bmatrix}$，则$(s\bold{I}-\bold{A})^{-1}&amp;#x3D;\begin{bmatrix}\frac{s+3}{(s+1)(s+2)}&amp;amp;\frac{1}{(s+1)(s+2)}\\frac{-2}{(s+1)(s+2)}&amp;amp;\frac{s}{(s+1)(s+2)}\end{bmatrix}$，&lt;/p&gt;
&lt;p&gt;则 $e^{\bold{A}t}&amp;#x3D;L^{-1}\begin{bmatrix}\frac{s+3}{(s+1)(s+2)}&amp;amp;\frac{1}{(s+1)(s+2)}\\frac{-2}{(s+1)(s+2)}&amp;amp;\frac{s}{(s+1)(s+2)}\end{bmatrix}&amp;#x3D;\begin{bmatrix}2e^{-t}&amp;amp;e^{-t}-e^{-2t}\-2e^{-t}+2e^{-2t}&amp;amp;-e^{-t}+2e^{-2t}\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;将矩阵化为对角标准型或若尔当标准型。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;若$\bold{A}&amp;#x3D;\begin{bmatrix} \lambda_1&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;\lambda_2&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;\lambda_n\end{bmatrix}$为对角矩阵，则$e^{\bold{A}t}$也为对角矩阵（&lt;a href=&#34;#%E7%9F%A9%E9%98%B5%E6%8C%87%E6%95%B0%E7%9A%84%E6%80%A7%E8%B4%A8&#34;&gt;性质8&lt;/a&gt;），即$e^{\bold{A}t}&amp;#x3D;\begin{bmatrix} e^{\lambda_1t}&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;e^{\lambda_2t}&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;e^{\lambda_nt}\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;（1）当矩阵$\bold{A}$的 $n$ 个特征值 $\lambda_1,\lambda_2\dots\lambda_n$ 均两两互异时，则可确定变换阵 $\bold{P}$ 及其逆矩阵 $\bold{P}^{-1}$ ，使得矩阵$\bold{A}$对角化：$\bold{A} &amp;#x3D; \bold{P}\begin{bmatrix}\lambda_1&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;\lambda_2&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;\lambda_n\end{bmatrix}\bold{P}^{-1}$，则有 &lt;/p&gt;
&lt;p&gt;$$e^{\bold{A}t}&amp;#x3D;\bold{P}\begin{bmatrix} e^{\lambda_1t}&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;e^{\lambda_2t}&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;e^{\lambda_nt}\end{bmatrix}\bold{P}^{-1}   \tag{3}$$&lt;/p&gt;
&lt;p&gt;+++primary 解题步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;求解系统矩阵$\bold{A}$的特征值 $\lambda_1,\lambda_2\dots\lambda_n$ 。（特征值两两互异）&lt;/li&gt;
&lt;li&gt;求解特征值对应的特征向量$p_1,p_2\dots p_n$，构造变换阵 $\bold{P}$ 并求解其逆矩阵 $\bold{P}^{-1}$ 。&lt;/li&gt;
&lt;li&gt;求解矩阵指数 $e^{\bold{A}t}&amp;#x3D;\bold{P}\begin{bmatrix} e^{\lambda_1t}&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;e^{\lambda_2t}&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;e^{\lambda_nt}\end{bmatrix}\bold{P}^{-1}$。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id3 例题1&lt;/p&gt;
&lt;p&gt;:::info &lt;/p&gt;
&lt;p&gt;试用化为对角标准型法求解矩阵$\bold{A}&amp;#x3D;\begin{bmatrix}0&amp;amp;1\-2&amp;amp;-3\end{bmatrix}$的矩阵指数 $e^{\bold{A}t}$。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;求解特征值$|\lambda\bold{I}-\bold{A}|&amp;#x3D;\begin{vmatrix}\lambda&amp;amp;-1\2&amp;amp;\lambda+3\end{vmatrix}&amp;#x3D;(\lambda+1)(\lambda+2)$，得到特征值为$\lambda_1&amp;#x3D;-1$，$\lambda_2&amp;#x3D;-2$。继而求解特征向量$p_1&amp;#x3D;\begin{bmatrix}1\-1\end{bmatrix}$，$p_2&amp;#x3D;\begin{bmatrix}1\-2\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;故变换矩阵 $\bold{P}&amp;#x3D;\begin{bmatrix}1&amp;amp;1\-1&amp;amp;-2\end{bmatrix}$，求逆有 $\bold{P}^{-1}&amp;#x3D;\begin{bmatrix}2&amp;amp;1\-1&amp;amp;-1\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;则矩阵指数为 $e^{\bold{A}t}&amp;#x3D;\bold{P}\begin{bmatrix} e^{-t}&amp;amp;0\ 0&amp;amp;e^{-2t}\end{bmatrix}\bold{P}^{-1}&amp;#x3D;\begin{bmatrix} 2e^{-t}-e^{-2t}&amp;amp;e^{-t}-e^{-2t}\ -2e^{-t}+2e^{-2t}&amp;amp;-e^{-t}+2e^{-2t}\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;;;;id3 例题2&lt;/p&gt;
&lt;p&gt;:::info &lt;/p&gt;
&lt;p&gt;试用化为对角标准型法求解矩阵$\bold{A}&amp;#x3D;\begin{bmatrix}0&amp;amp;1&amp;amp;-1\-6&amp;amp;-11&amp;amp;6\-6&amp;amp;-11&amp;amp;5\end{bmatrix}$的矩阵指数 $e^{\bold{A}t}$。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;求解特征值$|\lambda\bold{I}-\bold{A}|&amp;#x3D;\begin{vmatrix}\lambda&amp;amp;-1&amp;amp;1\6&amp;amp;\lambda+11&amp;amp;-6\6&amp;amp;11&amp;amp;\lambda-5\end{vmatrix}&amp;#x3D;(\lambda+1)(\lambda+2)(\lambda+3)$，得到特征值为$\lambda_1&amp;#x3D;-1$，$\lambda_2&amp;#x3D;-2$，$\lambda_3&amp;#x3D;-3$。继而求解特征向量$p_1&amp;#x3D;\begin{bmatrix}1\0\1\end{bmatrix}$，$p_2&amp;#x3D;\begin{bmatrix}1\2\4\end{bmatrix}$，$p_3&amp;#x3D;\begin{bmatrix}1\6\9\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;故变换矩阵 $\bold{P}&amp;#x3D;\begin{bmatrix}1&amp;amp;1&amp;amp;1\0&amp;amp;2&amp;amp;6\1&amp;amp;4&amp;amp;9\end{bmatrix}$，求逆有 $\bold{P}^{-1}&amp;#x3D;\begin{bmatrix}3&amp;amp;\frac{5}{2}&amp;amp;-2\-3&amp;amp;-4&amp;amp;3\1&amp;amp;\frac{3}{2}&amp;amp;-1\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;则矩阵指数为 &lt;/p&gt;
&lt;p&gt;$\begin{aligned}e^{\bold{A}t}&amp;amp;&amp;#x3D;\bold{P}\begin{bmatrix} e^{-t}&amp;amp;0&amp;amp;0\ 0&amp;amp;e^{-2t}&amp;amp;0\0&amp;amp;0&amp;amp;e^{-3t}\end{bmatrix}\bold{P}^{-1}&amp;#x3D;\begin{bmatrix}1&amp;amp;1&amp;amp;1\0&amp;amp;2&amp;amp;6\1&amp;amp;4&amp;amp;9\end{bmatrix}\begin{bmatrix} e^{-t}&amp;amp;0&amp;amp;0\ 0&amp;amp;e^{-2t}&amp;amp;0\0&amp;amp;0&amp;amp;e^{-3t}\end{bmatrix}\begin{bmatrix}3&amp;amp;\frac{5}{2}&amp;amp;-2\-3&amp;amp;-4&amp;amp;3\1&amp;amp;\frac{3}{2}&amp;amp;-1\end{bmatrix}\&amp;amp;&amp;#x3D;\begin{bmatrix} 3e^{-t}-3e^{-2t}+e^{-3t}&amp;amp;\frac{5}{2}e^{-t}-4e^{-2t}+\frac{3}{2}e^{-3t}&amp;amp;-2e^{-t}+3e^{-2t}-e^{-3t}\ -6e^{-t}+6e^{-3t}&amp;amp;-8e^{-2t}+9e^{-3t}&amp;amp;6e^{-2t}-6e^{-3t}\3e^{-t}-12e^{-2t}+9e^{-3t}&amp;amp;\frac{5}{2}e^{-t}-16e^{-2t}+\frac{27}{2}e^{-3t}&amp;amp;-2e^{-t}+12e^{-2t}-9e^{-3t}\end{bmatrix}\end{aligned}$。&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;（2）当 $n\times{n}$ 矩阵$\bold{A}$有$n$重特征根时，存在线性非奇异变换 $\bold{P}$ 及其逆矩阵 $\bold{P}^{-1}$ ，将矩阵 $\bold{A}$ 转化为若尔当标准型：$\bold{A} &amp;#x3D; \bold{P}\begin{bmatrix}\lambda&amp;amp;1&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;\lambda&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;1\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;\lambda\end{bmatrix}_{n\times{n}}\bold{P}^{-1}$，则有 &lt;/p&gt;
&lt;p&gt;$$e^{\bold{A}t}&amp;#x3D;\bold{P}e^{\lambda t}\begin{bmatrix} 1&amp;amp;t&amp;amp;\frac{t^2}{2!}&amp;amp;\cdots&amp;amp;\frac{t^{n-1}}{(n-1)!}\ 0&amp;amp;1&amp;amp;t&amp;amp;\cdots&amp;amp;\frac{t^{n-2}}{(n-2)!}\  \vdots&amp;amp;\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\0&amp;amp;0&amp;amp;0&amp;amp;\cdots&amp;amp;t\ 0&amp;amp;0&amp;amp;0&amp;amp;\cdots&amp;amp;1\end{bmatrix}_{n\times{n}}\bold{P}^{-1}   \tag{4}$$&lt;/p&gt;
&lt;p&gt;拓展到一般情况，矩阵$\bold{A}$同时存在重特征根和单特征根时,以有三重根$\lambda_1$、两重根$\lambda_2$和单根$\lambda_3$的矩阵$\bold{A}$为例，若存在变换阵 $\bold{P}$ 及其逆矩阵 $\bold{P}^{-1}$ ，将矩阵 $\bold{A}$ 转化为若尔当标准型：$\bold{A} &amp;#x3D; \bold{P}\begin{bmatrix}\lambda_1&amp;amp;1&amp;amp;&amp;amp;&amp;amp;&amp;amp;\bold{0}\ &amp;amp;\lambda_1&amp;amp;1&amp;amp;&amp;amp;&amp;amp;\  &amp;amp;&amp;amp;\lambda_1&amp;amp;&amp;amp;&amp;amp;\&amp;amp;&amp;amp;&amp;amp;\lambda_2&amp;amp;1&amp;amp;\&amp;amp;&amp;amp;&amp;amp;&amp;amp;\lambda_2&amp;amp;\\bold{0}&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;\lambda_1\end{bmatrix}\bold{P}^{-1}$，则有 &lt;/p&gt;
&lt;p&gt;$$e^{\bold{A}t}&amp;#x3D;\bold{P}\begin{bmatrix}e^{\lambda_1t}&amp;amp;te^{\lambda_1t}&amp;amp;\frac{1}{2}t^2e^{\lambda_1t}&amp;amp;0&amp;amp;0&amp;amp;0\ 0&amp;amp;e^{\lambda_1t}&amp;amp;te^{\lambda_1t}&amp;amp;0&amp;amp;0&amp;amp;0\  0&amp;amp;0&amp;amp;e^{\lambda_1t}&amp;amp;0&amp;amp;0&amp;amp;0\0&amp;amp;0&amp;amp;0&amp;amp;e^{\lambda_2t}&amp;amp;te^{\lambda_2t}&amp;amp;0\0&amp;amp;0&amp;amp;0&amp;amp;0&amp;amp;e^{\lambda_2t}&amp;amp;0\0&amp;amp;0&amp;amp;0&amp;amp;0&amp;amp;0&amp;amp;e^{\lambda_3t}\end{bmatrix}\bold{P}^{-1}     \tag{5}$$&lt;/p&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id4 例题1&lt;/p&gt;
&lt;p&gt;:::info &lt;/p&gt;
&lt;p&gt;试求矩阵$\bold{A}&amp;#x3D;\begin{bmatrix}0&amp;amp;6&amp;amp;-5\1&amp;amp;0&amp;amp;2\3&amp;amp;2&amp;amp;4\end{bmatrix}$的矩阵指数。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;求解特征值$|\lambda\bold{I}-\bold{A}|&amp;#x3D;\begin{vmatrix}\lambda&amp;amp;-6&amp;amp;5\-1&amp;amp;\lambda&amp;amp;-2\-3&amp;amp;-2&amp;amp;\lambda-4\end{vmatrix}&amp;#x3D;(\lambda-1)^2(\lambda-2)$，得到特征值为$\lambda_1&amp;#x3D;\lambda_2&amp;#x3D;1$，$\lambda_3&amp;#x3D;2$。继而求解特征向量和广义特征向量$p_1&amp;#x3D;\begin{bmatrix}1\-\frac{3}{7}\-\frac{5}{7}\end{bmatrix}$，$p_2&amp;#x3D;\begin{bmatrix}1\-\frac{22}{49}\-\frac{46}{49}\end{bmatrix}$，$p_3&amp;#x3D;\begin{bmatrix}2\-1\-2\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;故变换矩阵 $\bold{P}&amp;#x3D;\begin{bmatrix}1&amp;amp;1&amp;amp;2\-\frac{3}{7}&amp;amp;-\frac{22}{49}&amp;amp;-1\-\frac{5}{7}&amp;amp;-\frac{46}{49}&amp;amp;-2\end{bmatrix}$，求逆有 $\bold{P}^{-1}&amp;#x3D;\begin{bmatrix}2&amp;amp;-6&amp;amp;5\7&amp;amp;28&amp;amp;-7\-4&amp;amp;-11&amp;amp;1\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;则矩阵指数为&lt;/p&gt;
&lt;p&gt; $\begin{aligned}e^{\bold{A}t}&amp;amp;&amp;#x3D;\bold{P}\begin{bmatrix} e^{-t}&amp;amp;te^{-t}&amp;amp;0\ 0&amp;amp;e^{t}&amp;amp;0\0&amp;amp;0&amp;amp;e^{2t}\end{bmatrix}\bold{P}^{-1}\&amp;amp;&amp;#x3D;\begin{bmatrix} 9e^{t}+7te^{t}-8e^{2t}&amp;amp;22e^{t}+28te^{t}+-22e^{2t}&amp;amp;-2e^{t}-7te^{t}+2e^{2t}\ -4e^{t}-3te^{t}+4e^{2t}&amp;amp;-10e^{t}-12te^{t}+11e^{2t}&amp;amp;e^{t}+3te^{t}-e^{2t}\-8e^{t}-5te^{t}+8e^{2t}&amp;amp;-22e^{t}-20te^{t}-22e^{2t}&amp;amp;3e^{t}+5te^{t}-2e^{2t}\end{bmatrix}\end{aligned}$。&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;化矩阵指数为矩阵$\bold{A}$的有限项。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;该方法将矩阵指数表示为$e^{\bold{A}t}&amp;#x3D;a_0(t)\bold{I}+a_1(t)\bold{A}+\cdots+a_{n-1}\bold{A}^{n-1}$。&lt;/p&gt;
&lt;p&gt;当特征值两两互异时，&lt;/p&gt;
&lt;p&gt;$$\begin{bmatrix}a_0(t)\a_1(t)\\vdots\a_{n-1}(t)\end{bmatrix}&amp;#x3D;\begin{bmatrix}1&amp;amp;\lambda_1&amp;amp;\cdots&amp;amp;\lambda_1^{n-1}\1&amp;amp;\lambda_2&amp;amp;\cdots&amp;amp;\lambda_2^{n-1}\\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\1&amp;amp;\lambda_n&amp;amp;\cdots&amp;amp;\lambda_n^{n-1}\end{bmatrix}^{-1}\begin{bmatrix}e^{\lambda_1t}\e^{\lambda_2t}\\vdots\e^{\lambda_nt}\end{bmatrix}    \tag{6}$$&lt;/p&gt;
&lt;p&gt;当存在重特征值时（以三重根$\lambda_1$和二重根$\lambda_2$，其余根为单根为例），&lt;/p&gt;
&lt;p&gt;$$\begin{bmatrix}a_0(t)\a_1(t)\a_2(t)\a_3(t)\a_4(t)\a_5(t)\\vdots\a_{n-1}(t)\end{bmatrix}&amp;#x3D;\begin{bmatrix}0&amp;amp;0&amp;amp;1&amp;amp;3\lambda_1&amp;amp;\cdots&amp;amp;\frac{(n-1)(n-2)}{2!}\lambda_1^{n-3}\0&amp;amp;1&amp;amp;2\lambda_1&amp;amp;3\lambda_1^2&amp;amp;\cdots&amp;amp;\frac{(n-1)}{1!}\lambda_1^{n-2}\1&amp;amp;\lambda_1&amp;amp;\lambda_1^2&amp;amp;\lambda_1^3&amp;amp;\cdots&amp;amp;\lambda_1^{n-1}\0&amp;amp;1&amp;amp;2\lambda_2&amp;amp;3\lambda_2^2&amp;amp;\cdots&amp;amp;\frac{(n-1)}{1!}\lambda_2^{n-2}\1&amp;amp;\lambda_2&amp;amp;\lambda_2^2&amp;amp;\lambda_2^3&amp;amp;\cdots&amp;amp;\lambda_2^{n-1}\1&amp;amp;\lambda_3&amp;amp;\lambda_3^2&amp;amp;\lambda_3^3&amp;amp;\cdots&amp;amp;\lambda_3^{n-1}\\vdots&amp;amp;\vdots&amp;amp;\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\1&amp;amp;\lambda_n&amp;amp;\lambda_n^2&amp;amp;\lambda_n^3&amp;amp;\cdots&amp;amp;\lambda_n^{n-1}\end{bmatrix}^{-1}\begin{bmatrix}\frac{1}{2!}t^2e^{\lambda_1t}\\frac{1}{1!}te^{\lambda_1t}\e^{\lambda_1t}\\frac{1}{1!}te^{\lambda_2t}\e^{\lambda_2t}\e^{\lambda_3t}\\vdots\e^{\lambda_{n-3}t}\end{bmatrix}     \tag{7}$$&lt;/p&gt;
&lt;p&gt;+++primary 证明：Cayley-Hamilton定理&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;+++primary 解题步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;求解系统矩阵$\bold{A}$的特征值 $\lambda_1,\lambda_2\dots\lambda_n$ 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;求解有限项，根据特征值的互异性分情况分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当特征值两两互异时，直接根据$\begin{bmatrix}a_0(t)\a_1(t)\\vdots\a_{n-1}(t)\end{bmatrix}&amp;#x3D;\begin{bmatrix}1&amp;amp;\lambda_1&amp;amp;\cdots&amp;amp;\lambda_1^{n-1}\1&amp;amp;\lambda_2&amp;amp;\cdots&amp;amp;\lambda_2^{n-1}\\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\1&amp;amp;\lambda_n&amp;amp;\cdots&amp;amp;\lambda_n^{n-1}\end{bmatrix}^{-1}\begin{bmatrix}e^{\lambda_1t}\e^{\lambda_2t}\\vdots\e^{\lambda_nt}\end{bmatrix}$求解有限项。&lt;/li&gt;
&lt;li&gt;当特征值存在重根时，对于单根部分列写方程：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$e^{\lambda_it}&amp;#x3D;a_0(t)+a_1(t)\lambda_i+\cdots+a_{n-1}(t)\lambda_i^{n-1}$$&lt;/p&gt;
&lt;p&gt;而对于$k$重根部分在列写方程$e^{\lambda_it}&amp;#x3D;a_0(t)+a_1(t)\lambda_i+\cdots+a_{k-1}(t)\lambda_i^{k-1}$外还需要补充方程：&lt;/p&gt;
&lt;p&gt;$$\left{ \begin{matrix} te^{\lambda_it}&amp;#x3D;a_1(t)+2a_2(t)\lambda_i+\cdots+(k-1)a_{k-1}(t)\lambda_i^{k-2}\t^2e^{\lambda_it}&amp;#x3D;2a_2(t)+6a_3(t)\lambda_i+\cdots+(k-1)(k-2)a_{k-1}(t)\lambda_i^{k-3} \\vdots\t^{k-1}e^{\lambda_it}&amp;#x3D;(k-1)!a_{k-1}(t) \\end{matrix}\right.$$&lt;/p&gt;
&lt;p&gt;联立$n$条方程求解有限项&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;代入求解矩阵指数：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$e^{\bold{A}t}&amp;#x3D;a_0(t)\bold{I}+a_1(t)\bold{A}+\cdots+a_{n-1}\bold{A}^{n-1}$$&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id5 例题1&lt;/p&gt;
&lt;p&gt;:::info &lt;/p&gt;
&lt;p&gt;试求矩阵$\bold{A}&amp;#x3D;\begin{bmatrix}0&amp;amp;1&amp;amp;0\0&amp;amp;0&amp;amp;1\2&amp;amp;3&amp;amp;0\end{bmatrix}$的矩阵指数，利用化为有限项法求解。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;求解特征值$|\lambda\bold{I}-\bold{A}|&amp;#x3D;\begin{vmatrix}\lambda&amp;amp;-1&amp;amp;0\0&amp;amp;\lambda&amp;amp;-1\-2&amp;amp;-3&amp;amp;\lambda\end{vmatrix}&amp;#x3D;(\lambda+1)^2(\lambda-2)$，得到特征值为$\lambda_{1,2}&amp;#x3D;-1$，$\lambda_3&amp;#x3D;2$。&lt;/p&gt;
&lt;p&gt;对于单根 $\lambda_3&amp;#x3D;2$，有 $e^{2t}&amp;#x3D;a_0(t)+2a_1(t)+4a_2(t)$，&lt;/p&gt;
&lt;p&gt;对于二重根$\lambda_{1,2}&amp;#x3D;-1$，有 $e^{-t}&amp;#x3D;a_0(t)-a_1(t)+a_2(t)$，还需要补充方程：&lt;/p&gt;
&lt;p&gt;$$ te^{-t}&amp;#x3D;a_1(t)-2a_2(t)$$&lt;/p&gt;
&lt;p&gt;联立三组方程解得：&lt;/p&gt;
&lt;p&gt;$$\left{ \begin{matrix} a_0(t)&amp;#x3D;\frac{1}{9}(e^{2t}+8e^{-t}+6te^{-t})\ a_1(t)&amp;#x3D;\frac{1}{9}(2e^{2t}-2e^{-t}+3te^{-t}) \ a_3(t)&amp;#x3D;\frac{1}{9}(e^{2t}-e^{-t}-3te^{-t}) \\end{matrix}\right.$$&lt;/p&gt;
&lt;p&gt; $$\begin{aligned}e^{\bold{A}t}&amp;amp;&amp;#x3D;a_0(t)\bold{I}+a_1(t)\bold{A}+\cdots+a_{n-1}\bold{A}^{n-1}\&amp;amp;&amp;#x3D;\frac{1}{9}\begin{bmatrix} e^{2t}+(8+6t)e^{-t}&amp;amp;e^{2t}-(2-3t)e^{-t}&amp;amp;e^{2t}-(1+3t)e^{-t}\ 2e^{2t}-(2+6t)e^{-t}&amp;amp;4e^{2t}+(5-3t)e^{-t}&amp;amp;2e^{2t}-(2-3t)e^{-t}\4e^{2t}+(6-4t)e^{-t}&amp;amp;8e^{2t}+(3-8t)e^{-t}&amp;amp;4e^{2t}+(5-3t)e^{-t}\end{bmatrix}\end{aligned}$$&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;线性时不变系统非齐次状态方程的解&#34;&gt;&lt;a href=&#34;#线性时不变系统非齐次状态方程的解&#34; class=&#34;headerlink&#34; title=&#34;线性时不变系统非齐次状态方程的解&#34;&gt;&lt;/a&gt;线性时不变系统非齐次状态方程的解&lt;/h2&gt;&lt;p&gt;动态系统在控制的作用下的运动称为受控运动。线性时不变系统非齐次状态方程的解即为线性时不变系统的受控运动。考虑系统 $\dot{x}(t)&amp;#x3D;Ax(t)+Bu(t),x(0),t\geq0$，其动态响应形式为：&lt;/p&gt;
&lt;p&gt;$$x(t)&amp;#x3D;e^{A(t-t_0)}x(t_0)+\int_{t_0}^te^{A(t-\tau)}Bu(\tau),d\tau,  t\geq0   \tag{8}$$&lt;/p&gt;
&lt;p&gt;可理解为由两部分组成：一部分是由初始状态引起的系统自由运动，即零输入响应；另外一部分是由控制输入所产生的受控运动，即零状态响应。&lt;/p&gt;
&lt;p&gt;+++primary 推导过程&lt;/p&gt;
&lt;p&gt;对于系统$\dot{x}(t)&amp;#x3D;Ax(t)+Bu(t),x(0),t\geq0$，左乘$e^{-At}$后求导可得：&lt;/p&gt;
&lt;p&gt;$$\frac{d}{dt}[e^{-At}x(t)]&amp;#x3D;e^{-At}[\dot{x}(t)-Ax(t)]&amp;#x3D;e^{-At}Bu(t)$$&lt;/p&gt;
&lt;p&gt;两边积分得：&lt;/p&gt;
&lt;p&gt;$$\int_0^t{\frac{d}{dt}[e^{-At}x(t)]}d\tau&amp;#x3D;\int_0^te^{-At}Bu(t)d\tau$$&lt;/p&gt;
&lt;p&gt;$$e^{-At}x(t)-x(0)I&amp;#x3D;\int_0^te^{-At}Bu(t)d\tau$$&lt;/p&gt;
&lt;p&gt;$$x(t)&amp;#x3D;e^{A(t-t_0)}x(t_0)+\int_{t_0}^te^{A(t-\tau)}Bu(\tau),d\tau,  t\geq0$$&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;线性时不变系统的状态转移矩阵&#34;&gt;&lt;a href=&#34;#线性时不变系统的状态转移矩阵&#34; class=&#34;headerlink&#34; title=&#34;线性时不变系统的状态转移矩阵&#34;&gt;&lt;/a&gt;线性时不变系统的状态转移矩阵&lt;/h2&gt;&lt;p&gt;在线性时不变系统解 $x(t)&amp;#x3D;e^{A(t-t_0)}x(t_0)+\int_{t_0}^te^{A(t-\tau)}Bu(\tau),d\tau,  t\geq0$ 中，定义状态转移矩阵$\Phi(t,t_0)&amp;#x3D;e^{A(t-t_0)}$。&lt;/p&gt;
&lt;p&gt;+++ 注&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;线性时不变系统的状态转移矩阵可记为：$\Phi(t,t_0)&amp;#x3D;\Phi{(t-t_0)}$。&lt;/li&gt;
&lt;li&gt;$x(t)$是由初始值引起的零输入解和控制产生的零状态解的叠加。&lt;/li&gt;
&lt;li&gt;解的结构显示了从$x(t_0)$到$x(t)$的一种变换关系。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;+++ 线性连续系统的状态转移矩阵&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于线性连续系统的状态方程：$\dot{x}(t)&amp;#x3D;A(t)x(t)+B(t)u(t),x(t_0)&amp;#x3D;x_0,A(t)\in{R^{n\times{n}}}$，那么称满足以下矩阵方程的解$\Phi(t,t_0)$为系统的状态转移矩阵。&lt;/p&gt;
&lt;p&gt;$$\dot{\Phi}(t,t_0)&amp;#x3D;A(t)\Phi(t,t_0),\Phi(t_0,t_0)&amp;#x3D;I,t\geq{t_0}    \tag{9}$$&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;状态转移矩阵的性质&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;$\frac{d\Phi(t,t_0)}{dt}&amp;#x3D;A(t)\Phi(t,t_0),\Phi(t_0,t_0)&amp;#x3D;I$&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;$\Phi(t_2,t_1)\Phi(t_1,t_0)&amp;#x3D;\Phi(t_2,t_0)$&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;$\Phi(mt)&amp;#x3D;\Phi(t+t+\cdots+t)&amp;#x3D;[\Phi(t)]^m$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;线性时变系统状态方程的解&#34;&gt;&lt;a href=&#34;#线性时变系统状态方程的解&#34; class=&#34;headerlink&#34; title=&#34;线性时变系统状态方程的解*&#34;&gt;&lt;/a&gt;线性时变系统状态方程的解*&lt;/h2&gt;&lt;h3 id=&#34;线性时变系统齐次状态方程的解&#34;&gt;&lt;a href=&#34;#线性时变系统齐次状态方程的解&#34; class=&#34;headerlink&#34; title=&#34;线性时变系统齐次状态方程的解&#34;&gt;&lt;/a&gt;线性时变系统齐次状态方程的解&lt;/h3&gt;&lt;h3 id=&#34;线性时变系统的状态转移矩阵&#34;&gt;&lt;a href=&#34;#线性时变系统的状态转移矩阵&#34; class=&#34;headerlink&#34; title=&#34;线性时变系统的状态转移矩阵&#34;&gt;&lt;/a&gt;线性时变系统的状态转移矩阵&lt;/h3&gt;&lt;h3 id=&#34;线性时变系统非齐次状态方程的解&#34;&gt;&lt;a href=&#34;#线性时变系统非齐次状态方程的解&#34; class=&#34;headerlink&#34; title=&#34;线性时变系统非齐次状态方程的解&#34;&gt;&lt;/a&gt;线性时变系统非齐次状态方程的解&lt;/h3&gt;&lt;h2 id=&#34;线性连续系统的时间离散化&#34;&gt;&lt;a href=&#34;#线性连续系统的时间离散化&#34; class=&#34;headerlink&#34; title=&#34;线性连续系统的时间离散化&#34;&gt;&lt;/a&gt;线性连续系统的时间离散化&lt;/h2&gt;&lt;p&gt;线性连续系统的时间离散化问题本质上就是在一定的采样方式和保持方式下，由系统的连续时间状态空间描述来得到对应的离散时间状态空间描述，并建立两者的系数矩阵间的关系式。&lt;/p&gt;
&lt;h3 id=&#34;近似离散化&#34;&gt;&lt;a href=&#34;#近似离散化&#34; class=&#34;headerlink&#34; title=&#34;近似离散化&#34;&gt;&lt;/a&gt;近似离散化&lt;/h3&gt;&lt;p&gt;考虑以下线性时变系统：$\dot{x}(t)&amp;#x3D;A(t)x(t)+B(t)u(t)$，当采样周期$T$较小且精度要求不高时，可将其离散化为：&lt;/p&gt;
&lt;p&gt;$$\dot{x}(kT)\approx \frac{1}{T}[x((k+1)T)-x(kT)]    \tag{10}$$&lt;/p&gt;
&lt;p&gt;令$t&amp;#x3D;kT$，有&lt;/p&gt;
&lt;p&gt;$$\frac{1}{T}[x((k+1)T)-x(kT)]&amp;#x3D;A(kT)x(kT)+B(kT)u(kT)$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}x[(k+1)T]&amp;amp;&amp;#x3D;[I+TA(kT)]x(kT)+TB(kT)u(kT)\&amp;amp;&amp;#x3D;G(kT)x(kT)+H(kT)u(kT)\end{aligned}$$&lt;/p&gt;
&lt;p&gt;其中，$G(kT)&amp;#x3D;I+TA(kT)$，$H(kT)&amp;#x3D;TB(kT)$。&lt;/p&gt;
&lt;p&gt;:::info&lt;/p&gt;
&lt;p&gt;注：一般而言，当采样周期为系统最小时间系数的$\frac{1}{10}$左右，近似度已经足够。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id6 例题1&lt;/p&gt;
&lt;p&gt;:::info &lt;/p&gt;
&lt;p&gt;系统的状态方程为$\dot{x}(t)&amp;#x3D;A(t)x(t)+B(t)u(t)$，其中$A(t)&amp;#x3D;\begin{bmatrix}0&amp;amp;5(1-e^{-5t})\0&amp;amp;5(e^{-5t}-1)\end{bmatrix}$，$B(t)&amp;#x3D;\begin{bmatrix}5&amp;amp;5e^{-5t}\0&amp;amp;5(1-e^{-5t})\end{bmatrix}$。试求采样周期为$T&amp;#x3D;0.2s$时的离散状态方程。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;直接代入公式有：&lt;/p&gt;
&lt;p&gt;$$G(kT)&amp;#x3D;I+TA(kT)&amp;#x3D;\begin{bmatrix}1&amp;amp;1-e^{-k}\0&amp;amp;e^{-k}\end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;$$H(kT)&amp;#x3D;TB(kT)&amp;#x3D;\begin{bmatrix}1&amp;amp;e^{-k}\0&amp;amp;1-e^{-k}\end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;那么，离散状态方程为：$x[(k+1)T]&amp;#x3D;G(kT)x(kT)+H(kT)u(kT)$&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;;;;id6 例题2&lt;/p&gt;
&lt;p&gt;:::info&lt;/p&gt;
&lt;p&gt;将状态方程$\dot{x}&amp;#x3D;\begin{bmatrix}0&amp;amp;1\-2&amp;amp;-3\end{bmatrix}x+\begin{bmatrix}0\1\end{bmatrix}u$ 近似离散化，$T&amp;#x3D;0.2s$。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;由题：$G&amp;#x3D;I+TA&amp;#x3D;\begin{bmatrix}1&amp;amp;0\0&amp;amp;1\end{bmatrix}+0.2\begin{bmatrix}0&amp;amp;1\-2&amp;amp;-3\end{bmatrix}&amp;#x3D;\begin{bmatrix}1&amp;amp;0.2\-0.4&amp;amp;0.4\end{bmatrix}$，$H&amp;#x3D;0.2\begin{bmatrix}0\1\end{bmatrix}&amp;#x3D;\begin{bmatrix}0\0.2\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;故离散状态方程为：&lt;/p&gt;
&lt;p&gt;$$$x[0.2(k+1)]&amp;#x3D;\begin{bmatrix}1&amp;amp;0.2\-0.4&amp;amp;0.4\end{bmatrix}x(0.2k)+\begin{bmatrix}0\0.2\end{bmatrix}u(0.2k)$$$&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h3 id=&#34;线性时不变系统状态方程的离散化&#34;&gt;&lt;a href=&#34;#线性时不变系统状态方程的离散化&#34; class=&#34;headerlink&#34; title=&#34;线性时不变系统状态方程的离散化&#34;&gt;&lt;/a&gt;线性时不变系统状态方程的离散化&lt;/h3&gt;&lt;p&gt;在线性时不变系统中，$\dot{x}(t)&amp;#x3D;A(x)+B(u)$，其时间离散化状态方程为：&lt;/p&gt;
&lt;p&gt;$$x[(k+1)T]&amp;#x3D;Gx(kT)+Hu(kT)    \tag{11}$$&lt;/p&gt;
&lt;p&gt;其中$G&amp;#x3D;e^{AT}$，$H&amp;#x3D;(\int_0^Te^{AT}dt)B$。假设条件为：(1)等采样周期$T$；(2)$u(t)\equiv u(kT),kT\leq t\leq (k+1)T$。&lt;/p&gt;
&lt;p&gt;+++primary 推导证明&lt;/p&gt;
&lt;p&gt;对于线性时不变系统 $\dot{x}(t)&amp;#x3D;A(x)+B(u)$，其状态方程的解为：&lt;/p&gt;
&lt;p&gt;$$x(t)&amp;#x3D;e^{A(t-t_0)}x(t_0)+\int e^{A(t-\tau)}Bu(\tau)d\tau    \tag{12}$$&lt;/p&gt;
&lt;p&gt;假设：(1)等采样周期$T$；(2)$x(k)&amp;#x3D;[x(t)]&lt;em&gt;{t&amp;#x3D;kT}$，$u(k)&amp;#x3D;[u(t)]&lt;/em&gt;{t&amp;#x3D;kT}$&lt;/p&gt;
&lt;p&gt;那么令 $t&amp;#x3D;(k+1)T$，$t_0&amp;#x3D;kT$，有：&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}x[(k+1)T]&amp;amp;&amp;#x3D;e^{AT}x(kT)+\int_{kT}^{(k+1)T}e^{A[(k+1)T-\tau]}Bu(\tau)d\tau\&amp;amp;&amp;#x3D;e^{AT}x(kT)+\int_{kT}^{(k+1)T}e^{A[(k+1)T-\tau]}Bd\tau \cdot u(kT)\end{aligned}$$&lt;/p&gt;
&lt;p&gt;令 $t&amp;#x3D;(k+1)T-\tau$，$d\tau &amp;#x3D;-dt$，有：&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}x[(k+1)T]&amp;amp;&amp;#x3D;e^{AT}x(kT)+\int_{0}^{\tau}e^{A(t)}Bdt\cdot u(kT)\&amp;amp;&amp;#x3D;e^{AT}x(kT)+\int_{0}^{\tau}e^{A(t)}dt\cdot Bu(kT)\end{aligned}$$&lt;/p&gt;
&lt;p&gt;令$G&amp;#x3D;e^{AT}$，$H&amp;#x3D;(\int_0^Te^{AT}dt)B$，有线性时不变系统的离散状态方程为：&lt;/p&gt;
&lt;p&gt;$$x[(k+1)T]&amp;#x3D;Gx(kT)+Hu(kT)$$&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;+++primary 解题步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;求解矩阵指数，方法见&lt;a href=&#34;#%E7%9F%A9%E9%98%B5%E6%8C%87%E6%95%B0%E7%9A%84%E8%AE%A1%E7%AE%97&#34;&gt;矩阵指数的计算&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;求解系数矩阵：$G&amp;#x3D;e^{AT}$，$H&amp;#x3D;(\int_0^Te^{AT}dt)B$。&lt;/li&gt;
&lt;li&gt;列写时间离散化状态方程：$x[(k+1)T]&amp;#x3D;Gx(kT)+Hu(kT)$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id7 例题1&lt;/p&gt;
&lt;p&gt;:::info&lt;/p&gt;
&lt;p&gt;将状态方程$\dot{x}&amp;#x3D;\begin{bmatrix}0&amp;amp;1\0&amp;amp;-2\end{bmatrix}x+\begin{bmatrix}0\1\end{bmatrix}u$ 离散化，$T&amp;#x3D;0.1s$。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;利用拉氏变换法求解矩阵指数函数。取拉氏变换有：&lt;/p&gt;
&lt;p&gt;$$[sI-A]^{-1}&amp;#x3D;\begin{bmatrix}s&amp;amp;-1\0&amp;amp;s+2\end{bmatrix}^{-1}&amp;#x3D;\begin{bmatrix}\frac{1}{s}&amp;amp;\frac{1}{s(s+2)}\0&amp;amp;\frac{1}{s+2}\end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;取拉氏逆变换得到矩阵指数函数：&lt;/p&gt;
&lt;p&gt;$$e^{At}&amp;#x3D;L^{-1}[sI-A]^{-1}&amp;#x3D;\begin{bmatrix}1&amp;amp;0.5(1-e^{-2T})\0&amp;amp;e^{-2T}\end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;进而求解系数矩阵：&lt;/p&gt;
&lt;p&gt;$$G&amp;#x3D;e^{AT}&amp;#x3D;\begin{bmatrix}1&amp;amp;0.5(1-e^{-2T})\0&amp;amp;e^{-2T}\end{bmatrix}&amp;#x3D;\begin{bmatrix}1&amp;amp;0.091\0&amp;amp;0.819\end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}H&amp;amp;&amp;#x3D;(\int_0^Te^{AT}dt)B&amp;#x3D;\Bigg[\int_0^T\begin{bmatrix}1&amp;amp;0.5(1-e^{-2T})\0&amp;amp;e^{-2T}\end{bmatrix}dt\Bigg]\begin{bmatrix}0\1\end{bmatrix}\&amp;amp;&amp;#x3D;\begin{bmatrix}T&amp;amp;0.5T+0.25e^{-2T}-0.25\0&amp;amp;-0.5e^{-2T}+0.5\end{bmatrix}\begin{bmatrix}0\1\end{bmatrix}&amp;#x3D;\begin{bmatrix}0.005\0.091\end{bmatrix}\end{aligned}$$&lt;/p&gt;
&lt;p&gt;故时间离散化状态方程为：&lt;/p&gt;
&lt;p&gt;$x[0.1(k+1)]&amp;#x3D;\begin{bmatrix}1&amp;amp;0.091\0&amp;amp;0.819\end{bmatrix}x(0.1k)+\begin{bmatrix}0.005\0.091\end{bmatrix}u(0.1k)$&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;线性离散系统状态方程的解&#34;&gt;&lt;a href=&#34;#线性离散系统状态方程的解&#34; class=&#34;headerlink&#34; title=&#34;线性离散系统状态方程的解&#34;&gt;&lt;/a&gt;线性离散系统状态方程的解&lt;/h2&gt;&lt;p&gt;离散系统的差分方程形状态方程有两种解法：递推法和z变换法。其中递推法在时变系统和时不变系统中都适用，而z变换法只适用于时不变系统。&lt;/p&gt;
&lt;h3 id=&#34;递推法&#34;&gt;&lt;a href=&#34;#递推法&#34; class=&#34;headerlink&#34; title=&#34;递推法&#34;&gt;&lt;/a&gt;递推法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;在线性时变系统中，$x(k+1)&amp;#x3D;G(k)x(k)+H(k)u(k)$，有：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$\left{ \begin{matrix} x(1)&amp;#x3D;G(0)x(0)+H(0)u(0)\ x(2)&amp;#x3D;G(1)x(1)+H(1)u(1) \ x(3)&amp;#x3D;G(2)x(2)+H(2)u(2) \\vdots \end{matrix}\right.$$&lt;/p&gt;
&lt;p&gt;给定初始条件$x(0)$和输入序列$u(0),u(1),\cdots$后即可求解$x(k)$。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;在线性时不变系统中，$x(k+1)&amp;#x3D;Gx(k)+Hu(k)$，其中$G,H$均为常数矩阵，因此：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$x(k)&amp;#x3D;G^kx(0)+\sum_{i&amp;#x3D;0}^{k-1}G^{k-1-i}Hu(i)    \tag{13}$$&lt;/p&gt;
&lt;p&gt;上式称为线性时不变离散系统的状态转移方程，其中$\Phi(k)&amp;#x3D;G^k$称为线性时不变离散系统的状态转移矩阵。&lt;/p&gt;
&lt;p&gt;状态转移矩阵的性质：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$\Phi(k+1)&amp;#x3D;G\Phi{k},\Phi(0)&amp;#x3D;I$&lt;/li&gt;
&lt;li&gt;$\Phi(k_2-k_0)&amp;#x3D;\Phi(k_2-k_1)\Phi(k_1-k_0)$&lt;/li&gt;
&lt;li&gt;$\Phi^{-1}(k)&amp;#x3D;\Phi(-k)$&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;z-变换法&#34;&gt;&lt;a href=&#34;#z-变换法&#34; class=&#34;headerlink&#34; title=&#34;z 变换法&#34;&gt;&lt;/a&gt;z 变换法&lt;/h3&gt;&lt;p&gt;考虑时不变离散系统：$x(k+1)&amp;#x3D;Gx(k)+Hu(k)$，取z变换有：&lt;/p&gt;
&lt;p&gt;$$zx(z)-zx(0)&amp;#x3D;Gx(z)+Hu(z)$$&lt;/p&gt;
&lt;p&gt;$$z(z)&amp;#x3D;(zI-G)^{-1}zx(0)+(zI-G)^{-1}Hu(z)   \tag{14}$$&lt;/p&gt;
&lt;p&gt;取z逆变换有：&lt;/p&gt;
&lt;p&gt;$$x(k)&amp;#x3D;z^{-1}\Big[(zI-G)^{-1}z\Big]x(0)+z^{-1}\Big[(zI-G)^{-1}Hu(z)\Big]    \tag{15} $$&lt;/p&gt;
&lt;p&gt;对比公式（13）和公式（15），由解的唯一性可知，&lt;/p&gt;
&lt;p&gt;$$z^{-1}\Big[(zI-G)^{-1}z\Big]&amp;#x3D;G^k    \tag{16}$$&lt;/p&gt;
&lt;p&gt;$$z^{-1}\Big[(zI-G)^{-1}Hu(z)\Big]&amp;#x3D;\sum_{i&amp;#x3D;0}^{k-1}G^{k-1-i}Hu(i)   \tag{17}$$&lt;/p&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id8 例题1&lt;/p&gt;
&lt;p&gt;:::info &lt;/p&gt;
&lt;p&gt;考虑离散系统：$x(k+1)&amp;#x3D;Gx(k)+Hu(k)$，其中$G&amp;#x3D;\begin{bmatrix}0&amp;amp;1\-0.16&amp;amp;-1\end{bmatrix}$，$H&amp;#x3D;\begin{bmatrix}1\1\end{bmatrix}$，初始条件为$x(0)&amp;#x3D;\begin{bmatrix}1\-1\end{bmatrix}$，试求当$u(k)&amp;#x3D;1$时状态方程的解。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;用z变换法求解，先计算$(zI-G)^{-1}$，有&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}(zI-G)^{-1}&amp;amp;&amp;#x3D;\begin{bmatrix}z&amp;amp;-1\0.16&amp;amp;z+1\end{bmatrix}^{-1}&amp;#x3D;\frac{1}{(z+0.2)(z+0.8)}\begin{bmatrix}z+1&amp;amp;1\-0.16&amp;amp;z\end{bmatrix}\&amp;amp;&amp;#x3D;\begin{bmatrix}\frac{4}{3}\times \frac{1}{z+0.2}-\frac{1}{3}\times \frac{1}{z+0.8}&amp;amp;\frac{5}{3}\times \frac{1}{z+0.2}-\frac{5}{3}\times \frac{1}{z+0.8}\-\frac{0.8}{3}\times \frac{1}{z+0.2}+\frac{0.8}{3}\times \frac{1}{z+0.8}&amp;amp;-\frac{1}{3}\times \frac{1}{z+0.2}+\frac{4}{3}\times \frac{1}{z+0.8}\end{bmatrix}\end{aligned}$$&lt;/p&gt;
&lt;p&gt;由于$u(k)&amp;#x3D;1$，则$u(z)&amp;#x3D;\frac{z}{z-1}$，故$zx(0)+Hu(z)&amp;#x3D;\begin{bmatrix}z\-z\end{bmatrix}+\begin{bmatrix}\frac{z}{z-1}\\frac{z}{z-1}\end{bmatrix}&amp;#x3D;\begin{bmatrix}\frac{z^2}{z-1}\\frac{-z^2+2z}{z-1}\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;那么代入公式（15）有：&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}x(z)&amp;amp;&amp;#x3D;(zI-G)^{-1}[zx(0)+Hu(z)]\&amp;amp;&amp;#x3D;\begin{bmatrix}-\frac{17}{6}\times \frac{z}{z+0.2}+\frac{22}{9}\times \frac{z}{z+0.8}+\frac{25}{18}\times \frac{z}{z-1}\\frac{3.4}{6}\times \frac{z}{z+0.2}-\frac{17.6}{9}\times \frac{z}{z+0.8}+\frac{7}{18}\times \frac{z}{z-1}\end{bmatrix}\end{aligned}$$&lt;/p&gt;
&lt;p&gt;求z逆变换有：&lt;/p&gt;
&lt;p&gt;$$x(k)&amp;#x3D;\begin{bmatrix}-\frac{17}{6}(-0.2)^k+\frac{22}{9}(-0.8)^k+\frac{25}{18}\\frac{3.4}{6}(-0.2)^k-\frac{17.6}{9}(-0.2)^k+\frac{7}{18}\end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
</content>
        <category term="现代控制理论" scheme="http://hening25.gitee.io/categories/%E7%8E%B0%E4%BB%A3%E6%8E%A7%E5%88%B6%E7%90%86%E8%AE%BA/" />
        <category term="状态方程的解" scheme="http://hening25.gitee.io/tags/%E7%8A%B6%E6%80%81%E6%96%B9%E7%A8%8B%E7%9A%84%E8%A7%A3/" />
        <category term="矩阵指数" scheme="http://hening25.gitee.io/tags/%E7%9F%A9%E9%98%B5%E6%8C%87%E6%95%B0/" />
        <category term="状态转移矩阵" scheme="http://hening25.gitee.io/tags/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E7%9F%A9%E9%98%B5/" />
        <category term="离散化" scheme="http://hening25.gitee.io/tags/%E7%A6%BB%E6%95%A3%E5%8C%96/" />
        <updated>2023-10-27T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://hening25.gitee.io/2023/10/28/2023-10-29-test/</id>
        <title>test</title>
        <link rel="alternate" href="http://hening25.gitee.io/2023/10/28/2023-10-29-test/"/>
        <content type="html">&lt;p&gt;现代控制理论——03 状态方程的解&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;+++primary 证明&lt;/p&gt;
&lt;p&gt;test&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;+++primary  证明&lt;/p&gt;
&lt;p&gt;$e^{\bold{A}t}&amp;#x3D;\bold{I}+\bold{A}t+\frac{1}{2!}\bold{A}^2t^2+\cdots$&lt;/p&gt;
&lt;p&gt;$&amp;#x3D;\begin{bmatrix} 1&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;1&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;1\end{bmatrix}+\begin{bmatrix} \lambda_1&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;\lambda_2&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;\lambda_n\end{bmatrix}t+\frac{1}{2!}\begin{bmatrix} \lambda_1^2&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;\lambda_2^2&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;\lambda_n^2\end{bmatrix}t^2+\cdots$&lt;/p&gt;
&lt;p&gt;$&amp;#x3D;\begin{bmatrix} \sum^{+\infty}&lt;em&gt;{n&amp;#x3D;0}\frac{1}{n!}\lambda_1^nt^n&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;\sum^{+\infty}&lt;/em&gt;{n&amp;#x3D;0}\frac{1}{n!}\lambda_2^nt^n&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;\sum^{+\infty}_{n&amp;#x3D;0}\frac{1}{n!}\lambda_n^nt^n\end{bmatrix}&amp;#x3D;\begin{bmatrix} e^{\lambda_1t}&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;e^{\lambda_2t}&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;e^{\lambda_nt}\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;若$\bold{A}$为$m\times{m}$的若尔当块，即$\bold{A}&amp;#x3D;\begin{bmatrix} \lambda&amp;amp;1&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;\lambda&amp;amp;1&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\lambda&amp;amp;\ddots&amp;amp;\vdots\0&amp;amp;0&amp;amp;\cdots&amp;amp;\lambda&amp;amp;1\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;0&amp;amp;\lambda\end{bmatrix}&lt;em&gt;{m\times{m}}$，则$e^{\bold{A}t}&amp;#x3D;e^{\lambda t}\begin{bmatrix} 1&amp;amp;t&amp;amp;\frac{t^{2}}{2!}&amp;amp;\cdots&amp;amp;\frac{t^{m-1}}{(m-1)!}\ 0&amp;amp;1&amp;amp;t&amp;amp;\cdots&amp;amp;\frac{t^{m-2}}{(m-2)!}\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\ddots&amp;amp;\vdots\0&amp;amp;0&amp;amp;\cdots&amp;amp;1&amp;amp;t\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;0&amp;amp;1\end{bmatrix}&lt;/em&gt;{m\times{m}}$。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;+++primary 若尔当块&lt;/p&gt;
&lt;p&gt;形如$\begin{bmatrix} \lambda&amp;amp;1&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;\lambda&amp;amp;1&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\lambda&amp;amp;\ddots&amp;amp;\vdots\0&amp;amp;0&amp;amp;\cdots&amp;amp;\lambda&amp;amp;1\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;0&amp;amp;\lambda\end{bmatrix}_{m\times{m}}$为$m$阶若尔当矩阵，1阶若尔当矩阵为$\lambda$。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;若$\bold{A}$为一个有多个若尔当块的若尔当矩阵（即若当标准型），即$\bold{A}&amp;#x3D;\begin{bmatrix} \bold{A}_1&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;\bold{A}_2&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;\bold{A}_n\end{bmatrix}$，则$e^{\bold{A}t}&amp;#x3D;\begin{bmatrix} e^{\bold{A}_1t}&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;e^{\bold{A}_2t}&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;e^{\bold{A}_nt}\end{bmatrix}$。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;矩阵指数的计算&#34;&gt;&lt;a href=&#34;#矩阵指数的计算&#34; class=&#34;headerlink&#34; title=&#34;矩阵指数的计算&#34;&gt;&lt;/a&gt;矩阵指数的计算&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;定义计算：$e^{\bold{A}t}&amp;#x3D;\sum^{+\infty}_{n&amp;#x3D;0}\frac{1}{n!}\bold{A}^n(t)^n$。该方法适用于计算机运算。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;+++info  例题&lt;/p&gt;
&lt;p&gt;;;;id1 例题1&lt;/p&gt;
&lt;p&gt;:::info &lt;/p&gt;
&lt;p&gt;已知$\bold{A}&amp;#x3D;\begin{bmatrix} 0&amp;amp;1\-1&amp;amp;0\end{bmatrix}$，求$e^{\bold{A}t}$。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;由定义，&lt;/p&gt;
&lt;p&gt;$\begin{aligned}e^{\bold{A}t}&amp;amp;&amp;#x3D;\bold{I}+\bold{A}t+\frac{1}{2!}+\cdots&amp;#x3D;\begin{bmatrix}1&amp;amp;0\0&amp;amp;1\end{bmatrix}+\begin{bmatrix}0&amp;amp;t\-t&amp;amp;0\end{bmatrix}+\frac{1}{2!}\begin{bmatrix}-t^2&amp;amp;0\0&amp;amp;-t^2\end{bmatrix}+\cdots\&amp;amp;&amp;#x3D;\begin{bmatrix}1-\frac{t^2}{2!}+\cdots&amp;amp;t-\frac{t^3}{3!}+\cdots\-t+\frac{t^3}{3!}-\cdots&amp;amp;1-\frac{t^2}{2!}+\cdots\end{bmatrix}&amp;#x3D;\begin{bmatrix} \cos{t}&amp;amp;\sin{t}\-\sin{t}&amp;amp;\cos{t}\end{bmatrix}\end{aligned}$.&lt;/p&gt;
&lt;p&gt;;;; &lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;拉氏变换法：利用拉氏变换在频域中求解齐次状态方程的解。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;设线性时不变齐次状态方程为 $\bold{\dot{x}}&amp;#x3D;\bold{Ax}(t)$，$\bold{x}(0)&amp;#x3D;\bold{x}_0$，$t\geq{t_0}$。&lt;/p&gt;
&lt;p&gt;作拉氏变换有 $s\bold{X}(s)-\bold{x}(0)&amp;#x3D;\bold{AX}(s)$，即 $(s\bold{I}-\bold{A})\bold{X}(s)&amp;#x3D;\bold{x}(0)$，那么 &lt;/p&gt;
&lt;p&gt;$$\bold{X}(s) &amp;#x3D;(s\bold{I}-\bold{A})^{-1}\bold{x}(0)$$&lt;/p&gt;
&lt;p&gt;取拉氏逆变换有 $\bold{x}(0)&amp;#x3D;L^{-1}[(s\bold{I}-\bold{A})^{-1}\bold{x}(0)]&amp;#x3D;L^{-1}[(s\bold{I}-\bold{A})^{-1}]\bold{x}(0)$，因此 &lt;/p&gt;
&lt;p&gt;$$e^{\bold{A}t}&amp;#x3D;L^{-1}[(s\bold{I}-\bold{A})^{-1}]     \tag{2}$$&lt;/p&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id2 例题1&lt;/p&gt;
&lt;p&gt;:::info&lt;/p&gt;
&lt;p&gt;计算矩阵 $\bold{A}&amp;#x3D;\begin{bmatrix}0&amp;amp;1\-2&amp;amp;-3\end{bmatrix}$的矩阵指数。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;由拉氏变换法，$(s\bold{I}-\bold{A})&amp;#x3D;\begin{bmatrix} s&amp;amp;-1\2&amp;amp;s+3\end{bmatrix}$，则$(s\bold{I}-\bold{A})^{-1}&amp;#x3D;\begin{bmatrix}\frac{s+3}{(s+1)(s+2)}&amp;amp;\frac{1}{(s+1)(s+2)}\\frac{-2}{(s+1)(s+2)}&amp;amp;\frac{s}{(s+1)(s+2)}\end{bmatrix}$，&lt;/p&gt;
&lt;p&gt;则 $e^{\bold{A}t}&amp;#x3D;L^{-1}\begin{bmatrix}\frac{s+3}{(s+1)(s+2)}&amp;amp;\frac{1}{(s+1)(s+2)}\\frac{-2}{(s+1)(s+2)}&amp;amp;\frac{s}{(s+1)(s+2)}\end{bmatrix}&amp;#x3D;\begin{bmatrix}2e^{-t}&amp;amp;e^{-t}-e^{-2t}\-2e^{-t}+2e^{-2t}&amp;amp;-e^{-t}+2e^{-2t}\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;将矩阵化为对角标准型或若尔当标准型。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;若$\bold{A}&amp;#x3D;\begin{bmatrix} \lambda_1&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;\lambda_2&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;\lambda_n\end{bmatrix}$为对角矩阵，则$e^{\bold{A}t}$也为对角矩阵（&lt;a href=&#34;#%E7%9F%A9%E9%98%B5%E6%8C%87%E6%95%B0%E7%9A%84%E6%80%A7%E8%B4%A8&#34;&gt;性质8&lt;/a&gt;），即$e^{\bold{A}t}&amp;#x3D;\begin{bmatrix} e^{\lambda_1t}&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;e^{\lambda_2t}&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;e^{\lambda_nt}\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;（1）当矩阵$\bold{A}$的 $n$ 个特征值 $\lambda_1,\lambda_2\dots\lambda_n$ 均两两互异时，则可确定变换阵 $\bold{P}$ 及其逆矩阵 $\bold{P}^{-1}$ ，使得矩阵$\bold{A}$对角化：$\bold{A} &amp;#x3D; \bold{P}\begin{bmatrix}\lambda_1&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;\lambda_2&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;\lambda_n\end{bmatrix}\bold{P}^{-1}$，则有 &lt;/p&gt;
&lt;p&gt;$$e^{\bold{A}t}&amp;#x3D;\bold{P}\begin{bmatrix} e^{\lambda_1t}&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;e^{\lambda_2t}&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;e^{\lambda_nt}\end{bmatrix}\bold{P}^{-1}   \tag{3}$$&lt;/p&gt;
&lt;p&gt;+++primary 解题步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;求解系统矩阵$\bold{A}$的特征值 $\lambda_1,\lambda_2\dots\lambda_n$ 。（特征值两两互异）&lt;/li&gt;
&lt;li&gt;求解特征值对应的特征向量$p_1,p_2\dots p_n$，构造变换阵 $\bold{P}$ 并求解其逆矩阵 $\bold{P}^{-1}$ 。&lt;/li&gt;
&lt;li&gt;求解矩阵指数 $e^{\bold{A}t}&amp;#x3D;\bold{P}\begin{bmatrix} e^{\lambda_1t}&amp;amp;0&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;e^{\lambda_2t}&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;e^{\lambda_nt}\end{bmatrix}\bold{P}^{-1}$。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id3 例题1&lt;/p&gt;
&lt;p&gt;:::info &lt;/p&gt;
&lt;p&gt;试用化为对角标准型法求解矩阵$\bold{A}&amp;#x3D;\begin{bmatrix}0&amp;amp;1\-2&amp;amp;-3\end{bmatrix}$的矩阵指数 $e^{\bold{A}t}$。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;求解特征值$|\lambda\bold{I}-\bold{A}|&amp;#x3D;\begin{vmatrix}\lambda&amp;amp;-1\2&amp;amp;\lambda+3\end{vmatrix}&amp;#x3D;(\lambda+1)(\lambda+2)$，得到特征值为$\lambda_1&amp;#x3D;-1$，$\lambda_2&amp;#x3D;-2$。继而求解特征向量$p_1&amp;#x3D;\begin{bmatrix}1\-1\end{bmatrix}$，$p_2&amp;#x3D;\begin{bmatrix}1\-2\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;故变换矩阵 $\bold{P}&amp;#x3D;\begin{bmatrix}1&amp;amp;1\-1&amp;amp;-2\end{bmatrix}$，求逆有 $\bold{P}^{-1}&amp;#x3D;\begin{bmatrix}2&amp;amp;1\-1&amp;amp;-1\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;则矩阵指数为 $e^{\bold{A}t}&amp;#x3D;\bold{P}\begin{bmatrix} e^{-t}&amp;amp;0\ 0&amp;amp;e^{-2t}\end{bmatrix}\bold{P}^{-1}&amp;#x3D;\begin{bmatrix} 2e^{-t}-e^{-2t}&amp;amp;e^{-t}-e^{-2t}\ -2e^{-t}+2e^{-2t}&amp;amp;-e^{-t}+2e^{-2t}\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;;;;id3 例题2&lt;/p&gt;
&lt;p&gt;:::info &lt;/p&gt;
&lt;p&gt;试用化为对角标准型法求解矩阵$\bold{A}&amp;#x3D;\begin{bmatrix}0&amp;amp;1&amp;amp;-1\-6&amp;amp;-11&amp;amp;6\-6&amp;amp;-11&amp;amp;5\end{bmatrix}$的矩阵指数 $e^{\bold{A}t}$。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;求解特征值$|\lambda\bold{I}-\bold{A}|&amp;#x3D;\begin{vmatrix}\lambda&amp;amp;-1&amp;amp;1\6&amp;amp;\lambda+11&amp;amp;-6\6&amp;amp;11&amp;amp;\lambda-5\end{vmatrix}&amp;#x3D;(\lambda+1)(\lambda+2)(\lambda+3)$，得到特征值为$\lambda_1&amp;#x3D;-1$，$\lambda_2&amp;#x3D;-2$，$\lambda_3&amp;#x3D;-3$。继而求解特征向量$p_1&amp;#x3D;\begin{bmatrix}1\0\1\end{bmatrix}$，$p_2&amp;#x3D;\begin{bmatrix}1\2\4\end{bmatrix}$，$p_3&amp;#x3D;\begin{bmatrix}1\6\9\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;故变换矩阵 $\bold{P}&amp;#x3D;\begin{bmatrix}1&amp;amp;1&amp;amp;1\0&amp;amp;2&amp;amp;6\1&amp;amp;4&amp;amp;9\end{bmatrix}$，求逆有 $\bold{P}^{-1}&amp;#x3D;\begin{bmatrix}3&amp;amp;\frac{5}{2}&amp;amp;-2\-3&amp;amp;-4&amp;amp;3\1&amp;amp;\frac{3}{2}&amp;amp;-1\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;则矩阵指数为 &lt;/p&gt;
&lt;p&gt;$\begin{aligned}e^{\bold{A}t}&amp;amp;&amp;#x3D;\bold{P}\begin{bmatrix} e^{-t}&amp;amp;0&amp;amp;0\ 0&amp;amp;e^{-2t}&amp;amp;0\0&amp;amp;0&amp;amp;e^{-3t}\end{bmatrix}\bold{P}^{-1}&amp;#x3D;\begin{bmatrix}1&amp;amp;1&amp;amp;1\0&amp;amp;2&amp;amp;6\1&amp;amp;4&amp;amp;9\end{bmatrix}\begin{bmatrix} e^{-t}&amp;amp;0&amp;amp;0\ 0&amp;amp;e^{-2t}&amp;amp;0\0&amp;amp;0&amp;amp;e^{-3t}\end{bmatrix}\begin{bmatrix}3&amp;amp;\frac{5}{2}&amp;amp;-2\-3&amp;amp;-4&amp;amp;3\1&amp;amp;\frac{3}{2}&amp;amp;-1\end{bmatrix}\&amp;amp;&amp;#x3D;\begin{bmatrix} 3e^{-t}-3e^{-2t}+e^{-3t}&amp;amp;\frac{5}{2}e^{-t}-4e^{-2t}+\frac{3}{2}e^{-3t}&amp;amp;-2e^{-t}+3e^{-2t}-e^{-3t}\ -6e^{-t}+6e^{-3t}&amp;amp;-8e^{-2t}+9e^{-3t}&amp;amp;6e^{-2t}-6e^{-3t}\3e^{-t}-12e^{-2t}+9e^{-3t}&amp;amp;\frac{5}{2}e^{-t}-16e^{-2t}+\frac{27}{2}e^{-3t}&amp;amp;-2e^{-t}+12e^{-2t}-9e^{-3t}\end{bmatrix}\end{aligned}$。&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;（2）当 $n\times{n}$ 矩阵$\bold{A}$有$n$重特征根时，存在线性非奇异变换 $\bold{P}$ 及其逆矩阵 $\bold{P}^{-1}$ ，将矩阵 $\bold{A}$ 转化为若尔当标准型：$\bold{A} &amp;#x3D; \bold{P}\begin{bmatrix}\lambda&amp;amp;1&amp;amp;\cdots&amp;amp;0\ 0&amp;amp;\lambda&amp;amp;\cdots&amp;amp;0\  \vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;1\ 0&amp;amp;0&amp;amp;\cdots&amp;amp;\lambda\end{bmatrix}_{n\times{n}}\bold{P}^{-1}$，则有 &lt;/p&gt;
&lt;p&gt;$$e^{\bold{A}t}&amp;#x3D;\bold{P}e^{\lambda t}\begin{bmatrix} 1&amp;amp;t&amp;amp;\frac{t^2}{2!}&amp;amp;\cdots&amp;amp;\frac{t^{n-1}}{(n-1)!}\ 0&amp;amp;1&amp;amp;t&amp;amp;\cdots&amp;amp;\frac{t^{n-2}}{(n-2)!}\  \vdots&amp;amp;\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\0&amp;amp;0&amp;amp;0&amp;amp;\cdots&amp;amp;t\ 0&amp;amp;0&amp;amp;0&amp;amp;\cdots&amp;amp;1\end{bmatrix}_{n\times{n}}\bold{P}^{-1}   \tag{4}$$&lt;/p&gt;
&lt;p&gt;拓展到一般情况，矩阵$\bold{A}$同时存在重特征根和单特征根时,以有三重根$\lambda_1$、两重根$\lambda_2$和单根$\lambda_3$的矩阵$\bold{A}$为例，若存在变换阵 $\bold{P}$ 及其逆矩阵 $\bold{P}^{-1}$ ，将矩阵 $\bold{A}$ 转化为若尔当标准型：$\bold{A} &amp;#x3D; \bold{P}\begin{bmatrix}\lambda_1&amp;amp;1&amp;amp;&amp;amp;&amp;amp;&amp;amp;\bold{0}\ &amp;amp;\lambda_1&amp;amp;1&amp;amp;&amp;amp;&amp;amp;\  &amp;amp;&amp;amp;\lambda_1&amp;amp;&amp;amp;&amp;amp;\&amp;amp;&amp;amp;&amp;amp;\lambda_2&amp;amp;1&amp;amp;\&amp;amp;&amp;amp;&amp;amp;&amp;amp;\lambda_2&amp;amp;\\bold{0}&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;\lambda_1\end{bmatrix}\bold{P}^{-1}$，则有 &lt;/p&gt;
&lt;p&gt;$$e^{\bold{A}t}&amp;#x3D;\bold{P}\begin{bmatrix}e^{\lambda_1t}&amp;amp;te^{\lambda_1t}&amp;amp;\frac{1}{2}t^2e^{\lambda_1t}&amp;amp;0&amp;amp;0&amp;amp;0\ 0&amp;amp;e^{\lambda_1t}&amp;amp;te^{\lambda_1t}&amp;amp;0&amp;amp;0&amp;amp;0\  0&amp;amp;0&amp;amp;e^{\lambda_1t}&amp;amp;0&amp;amp;0&amp;amp;0\0&amp;amp;0&amp;amp;0&amp;amp;e^{\lambda_2t}&amp;amp;te^{\lambda_2t}&amp;amp;0\0&amp;amp;0&amp;amp;0&amp;amp;0&amp;amp;e^{\lambda_2t}&amp;amp;0\0&amp;amp;0&amp;amp;0&amp;amp;0&amp;amp;0&amp;amp;e^{\lambda_3t}\end{bmatrix}\bold{P}^{-1}     \tag{5}$$&lt;/p&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id4 例题1&lt;/p&gt;
&lt;p&gt;:::info &lt;/p&gt;
&lt;p&gt;试求矩阵$\bold{A}&amp;#x3D;\begin{bmatrix}0&amp;amp;6&amp;amp;-5\1&amp;amp;0&amp;amp;2\3&amp;amp;2&amp;amp;4\end{bmatrix}$的矩阵指数。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;求解特征值$|\lambda\bold{I}-\bold{A}|&amp;#x3D;\begin{vmatrix}\lambda&amp;amp;-6&amp;amp;5\-1&amp;amp;\lambda&amp;amp;-2\-3&amp;amp;-2&amp;amp;\lambda-4\end{vmatrix}&amp;#x3D;(\lambda-1)^2(\lambda-2)$，得到特征值为$\lambda_1&amp;#x3D;\lambda_2&amp;#x3D;1$，$\lambda_3&amp;#x3D;2$。继而求解特征向量和广义特征向量$p_1&amp;#x3D;\begin{bmatrix}1\-\frac{3}{7}\-\frac{5}{7}\end{bmatrix}$，$p_2&amp;#x3D;\begin{bmatrix}1\-\frac{22}{49}\-\frac{46}{49}\end{bmatrix}$，$p_3&amp;#x3D;\begin{bmatrix}2\-1\-2\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;故变换矩阵 $\bold{P}&amp;#x3D;\begin{bmatrix}1&amp;amp;1&amp;amp;2\-\frac{3}{7}&amp;amp;-\frac{22}{49}&amp;amp;-1\-\frac{5}{7}&amp;amp;-\frac{46}{49}&amp;amp;-2\end{bmatrix}$，求逆有 $\bold{P}^{-1}&amp;#x3D;\begin{bmatrix}2&amp;amp;-6&amp;amp;5\7&amp;amp;28&amp;amp;-7\-4&amp;amp;-11&amp;amp;1\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;则矩阵指数为&lt;/p&gt;
&lt;p&gt; $\begin{aligned}e^{\bold{A}t}&amp;amp;&amp;#x3D;\bold{P}\begin{bmatrix} e^{-t}&amp;amp;te^{-t}&amp;amp;0\ 0&amp;amp;e^{t}&amp;amp;0\0&amp;amp;0&amp;amp;e^{2t}\end{bmatrix}\bold{P}^{-1}\&amp;amp;&amp;#x3D;\begin{bmatrix} 9e^{t}+7te^{t}-8e^{2t}&amp;amp;22e^{t}+28te^{t}+-22e^{2t}&amp;amp;-2e^{t}-7te^{t}+2e^{2t}\ -4e^{t}-3te^{t}+4e^{2t}&amp;amp;-10e^{t}-12te^{t}+11e^{2t}&amp;amp;e^{t}+3te^{t}-e^{2t}\-8e^{t}-5te^{t}+8e^{2t}&amp;amp;-22e^{t}-20te^{t}-22e^{2t}&amp;amp;3e^{t}+5te^{t}-2e^{2t}\end{bmatrix}\end{aligned}$。&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;化矩阵指数为矩阵$\bold{A}$的有限项。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;该方法将矩阵指数表示为$e^{\bold{A}t}&amp;#x3D;a_0(t)\bold{I}+a_1(t)\bold{A}+\cdots+a_{n-1}\bold{A}^{n-1}$。&lt;/p&gt;
&lt;p&gt;当特征值两两互异时，&lt;/p&gt;
&lt;p&gt;$$\begin{bmatrix}a_0(t)\a_1(t)\\vdots\a_{n-1}(t)\end{bmatrix}&amp;#x3D;\begin{bmatrix}1&amp;amp;\lambda_1&amp;amp;\cdots&amp;amp;\lambda_1^{n-1}\1&amp;amp;\lambda_2&amp;amp;\cdots&amp;amp;\lambda_2^{n-1}\\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\1&amp;amp;\lambda_n&amp;amp;\cdots&amp;amp;\lambda_n^{n-1}\end{bmatrix}^{-1}\begin{bmatrix}e^{\lambda_1t}\e^{\lambda_2t}\\vdots\e^{\lambda_nt}\end{bmatrix}    \tag{6}$$&lt;/p&gt;
&lt;p&gt;当存在重特征值时（以三重根$\lambda_1$和二重根$\lambda_2$，其余根为单根为例），&lt;/p&gt;
&lt;p&gt;$$\begin{bmatrix}a_0(t)\a_1(t)\a_2(t)\a_3(t)\a_4(t)\a_5(t)\\vdots\a_{n-1}(t)\end{bmatrix}&amp;#x3D;\begin{bmatrix}0&amp;amp;0&amp;amp;1&amp;amp;3\lambda_1&amp;amp;\cdots&amp;amp;\frac{(n-1)(n-2)}{2!}\lambda_1^{n-3}\0&amp;amp;1&amp;amp;2\lambda_1&amp;amp;3\lambda_1^2&amp;amp;\cdots&amp;amp;\frac{(n-1)}{1!}\lambda_1^{n-2}\1&amp;amp;\lambda_1&amp;amp;\lambda_1^2&amp;amp;\lambda_1^3&amp;amp;\cdots&amp;amp;\lambda_1^{n-1}\0&amp;amp;1&amp;amp;2\lambda_2&amp;amp;3\lambda_2^2&amp;amp;\cdots&amp;amp;\frac{(n-1)}{1!}\lambda_2^{n-2}\1&amp;amp;\lambda_2&amp;amp;\lambda_2^2&amp;amp;\lambda_2^3&amp;amp;\cdots&amp;amp;\lambda_2^{n-1}\1&amp;amp;\lambda_3&amp;amp;\lambda_3^2&amp;amp;\lambda_3^3&amp;amp;\cdots&amp;amp;\lambda_3^{n-1}\\vdots&amp;amp;\vdots&amp;amp;\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\1&amp;amp;\lambda_n&amp;amp;\lambda_n^2&amp;amp;\lambda_n^3&amp;amp;\cdots&amp;amp;\lambda_n^{n-1}\end{bmatrix}^{-1}\begin{bmatrix}\frac{1}{2!}t^2e^{\lambda_1t}\\frac{1}{1!}te^{\lambda_1t}\e^{\lambda_1t}\\frac{1}{1!}te^{\lambda_2t}\e^{\lambda_2t}\e^{\lambda_3t}\\vdots\e^{\lambda_{n-3}t}\end{bmatrix}     \tag{7}$$&lt;/p&gt;
&lt;p&gt;+++primary 证明：Cayley-Hamilton定理&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;+++primary 解题步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;求解系统矩阵$\bold{A}$的特征值 $\lambda_1,\lambda_2\dots\lambda_n$ 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;求解有限项，根据特征值的互异性分情况分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当特征值两两互异时，直接根据$\begin{bmatrix}a_0(t)\a_1(t)\\vdots\a_{n-1}(t)\end{bmatrix}&amp;#x3D;\begin{bmatrix}1&amp;amp;\lambda_1&amp;amp;\cdots&amp;amp;\lambda_1^{n-1}\1&amp;amp;\lambda_2&amp;amp;\cdots&amp;amp;\lambda_2^{n-1}\\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\1&amp;amp;\lambda_n&amp;amp;\cdots&amp;amp;\lambda_n^{n-1}\end{bmatrix}^{-1}\begin{bmatrix}e^{\lambda_1t}\e^{\lambda_2t}\\vdots\e^{\lambda_nt}\end{bmatrix}$求解有限项。&lt;/li&gt;
&lt;li&gt;当特征值存在重根时，对于单根部分列写方程：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$e^{\lambda_it}&amp;#x3D;a_0(t)+a_1(t)\lambda_i+\cdots+a_{n-1}(t)\lambda_i^{n-1}$$&lt;/p&gt;
&lt;p&gt;而对于$k$重根部分在列写方程$e^{\lambda_it}&amp;#x3D;a_0(t)+a_1(t)\lambda_i+\cdots+a_{k-1}(t)\lambda_i^{k-1}$外还需要补充方程：&lt;/p&gt;
&lt;p&gt;$$\left{ \begin{matrix} te^{\lambda_it}&amp;#x3D;a_1(t)+2a_2(t)\lambda_i+\cdots+(k-1)a_{k-1}(t)\lambda_i^{k-2}\t^2e^{\lambda_it}&amp;#x3D;2a_2(t)+6a_3(t)\lambda_i+\cdots+(k-1)(k-2)a_{k-1}(t)\lambda_i^{k-3} \\vdots\t^{k-1}e^{\lambda_it}&amp;#x3D;(k-1)!a_{k-1}(t) \\end{matrix}\right.$$&lt;/p&gt;
&lt;p&gt;联立$n$条方程求解有限项&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;代入求解矩阵指数：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$e^{\bold{A}t}&amp;#x3D;a_0(t)\bold{I}+a_1(t)\bold{A}+\cdots+a_{n-1}\bold{A}^{n-1}$$&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id5 例题1&lt;/p&gt;
&lt;p&gt;:::info &lt;/p&gt;
&lt;p&gt;试求矩阵$\bold{A}&amp;#x3D;\begin{bmatrix}0&amp;amp;1&amp;amp;0\0&amp;amp;0&amp;amp;1\2&amp;amp;3&amp;amp;0\end{bmatrix}$的矩阵指数，利用化为有限项法求解。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;求解特征值$|\lambda\bold{I}-\bold{A}|&amp;#x3D;\begin{vmatrix}\lambda&amp;amp;-1&amp;amp;0\0&amp;amp;\lambda&amp;amp;-1\-2&amp;amp;-3&amp;amp;\lambda\end{vmatrix}&amp;#x3D;(\lambda+1)^2(\lambda-2)$，得到特征值为$\lambda_{1,2}&amp;#x3D;-1$，$\lambda_3&amp;#x3D;2$。&lt;/p&gt;
&lt;p&gt;对于单根 $\lambda_3&amp;#x3D;2$，有 $e^{2t}&amp;#x3D;a_0(t)+2a_1(t)+4a_2(t)$，&lt;/p&gt;
&lt;p&gt;对于二重根$\lambda_{1,2}&amp;#x3D;-1$，有 $e^{-t}&amp;#x3D;a_0(t)-a_1(t)+a_2(t)$，还需要补充方程：&lt;/p&gt;
&lt;p&gt;$$ te^{-t}&amp;#x3D;a_1(t)-2a_2(t)$$&lt;/p&gt;
&lt;p&gt;联立三组方程解得：&lt;/p&gt;
&lt;p&gt;$$\left{ \begin{matrix} a_0(t)&amp;#x3D;\frac{1}{9}(e^{2t}+8e^{-t}+6te^{-t})\ a_1(t)&amp;#x3D;\frac{1}{9}(2e^{2t}-2e^{-t}+3te^{-t}) \ a_3(t)&amp;#x3D;\frac{1}{9}(e^{2t}-e^{-t}-3te^{-t}) \\end{matrix}\right.$$&lt;/p&gt;
&lt;p&gt; $$\begin{aligned}e^{\bold{A}t}&amp;amp;&amp;#x3D;a_0(t)\bold{I}+a_1(t)\bold{A}+\cdots+a_{n-1}\bold{A}^{n-1}\&amp;amp;&amp;#x3D;\frac{1}{9}\begin{bmatrix} e^{2t}+(8+6t)e^{-t}&amp;amp;e^{2t}-(2-3t)e^{-t}&amp;amp;e^{2t}-(1+3t)e^{-t}\ 2e^{2t}-(2+6t)e^{-t}&amp;amp;4e^{2t}+(5-3t)e^{-t}&amp;amp;2e^{2t}-(2-3t)e^{-t}\4e^{2t}+(6-4t)e^{-t}&amp;amp;8e^{2t}+(3-8t)e^{-t}&amp;amp;4e^{2t}+(5-3t)e^{-t}\end{bmatrix}\end{aligned}$$&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;线性时不变系统非齐次状态方程的解&#34;&gt;&lt;a href=&#34;#线性时不变系统非齐次状态方程的解&#34; class=&#34;headerlink&#34; title=&#34;线性时不变系统非齐次状态方程的解&#34;&gt;&lt;/a&gt;线性时不变系统非齐次状态方程的解&lt;/h2&gt;&lt;p&gt;动态系统在控制的作用下的运动称为受控运动。线性时不变系统非齐次状态方程的解即为线性时不变系统的受控运动。考虑系统 $\dot{x}(t)&amp;#x3D;Ax(t)+Bu(t),x(0),t\geq0$，其动态响应形式为：&lt;/p&gt;
&lt;p&gt;$$x(t)&amp;#x3D;e^{A(t-t_0)}x(t_0)+\int_{t_0}^te^{A(t-\tau)}Bu(\tau),d\tau,  t\geq0   \tag{8}$$&lt;/p&gt;
&lt;p&gt;可理解为由两部分组成：一部分是由初始状态引起的系统自由运动，即零输入响应；另外一部分是由控制输入所产生的受控运动，即零状态响应。&lt;/p&gt;
&lt;p&gt;+++primary 推导过程&lt;/p&gt;
&lt;p&gt;对于系统$\dot{x}(t)&amp;#x3D;Ax(t)+Bu(t),x(0),t\geq0$，左乘$e^{-At}$后求导可得：&lt;/p&gt;
&lt;p&gt;$$\frac{d}{dt}[e^{-At}x(t)]&amp;#x3D;e^{-At}[\dot{x}(t)-Ax(t)]&amp;#x3D;e^{-At}Bu(t)$$&lt;/p&gt;
&lt;p&gt;两边积分得：&lt;/p&gt;
&lt;p&gt;$$\int_0^t{\frac{d}{dt}[e^{-At}x(t)]}d\tau&amp;#x3D;\int_0^te^{-At}Bu(t)d\tau$$&lt;/p&gt;
&lt;p&gt;$$e^{-At}x(t)-x(0)I&amp;#x3D;\int_0^te^{-At}Bu(t)d\tau$$&lt;/p&gt;
&lt;p&gt;$$x(t)&amp;#x3D;e^{A(t-t_0)}x(t_0)+\int_{t_0}^te^{A(t-\tau)}Bu(\tau),d\tau,  t\geq0$$&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;线性时不变系统的状态转移矩阵&#34;&gt;&lt;a href=&#34;#线性时不变系统的状态转移矩阵&#34; class=&#34;headerlink&#34; title=&#34;线性时不变系统的状态转移矩阵&#34;&gt;&lt;/a&gt;线性时不变系统的状态转移矩阵&lt;/h2&gt;&lt;p&gt;在线性时不变系统解 $x(t)&amp;#x3D;e^{A(t-t_0)}x(t_0)+\int_{t_0}^te^{A(t-\tau)}Bu(\tau),d\tau,  t\geq0$ 中，定义状态转移矩阵$\Phi(t,t_0)&amp;#x3D;e^{A(t-t_0)}$。&lt;/p&gt;
&lt;p&gt;+++ 注&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;线性时不变系统的状态转移矩阵可记为：$\Phi(t,t_0)&amp;#x3D;\Phi{(t-t_0)}$。&lt;/li&gt;
&lt;li&gt;$x(t)$是由初始值引起的零输入解和控制产生的零状态解的叠加。&lt;/li&gt;
&lt;li&gt;解的结构显示了从$x(t_0)$到$x(t)$的一种变换关系。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;+++ 线性连续系统的状态转移矩阵&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于线性连续系统的状态方程：$\dot{x}(t)&amp;#x3D;A(t)x(t)+B(t)u(t),x(t_0)&amp;#x3D;x_0,A(t)\in{R^{n\times{n}}}$，那么称满足以下矩阵方程的解$\Phi(t,t_0)$为系统的状态转移矩阵。&lt;/p&gt;
&lt;p&gt;$$\dot{\Phi}(t,t_0)&amp;#x3D;A(t)\Phi(t,t_0),\Phi(t_0,t_0)&amp;#x3D;I,t\geq{t_0}    \tag{9}$$&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;状态转移矩阵的性质&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;$\frac{d\Phi(t,t_0)}{dt}&amp;#x3D;A(t)\Phi(t,t_0),\Phi(t_0,t_0)&amp;#x3D;I$&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;$\Phi(t_2,t_1)\Phi(t_1,t_0)&amp;#x3D;\Phi(t_2,t_0)$&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;$\Phi(mt)&amp;#x3D;\Phi(t+t+\cdots+t)&amp;#x3D;[\Phi(t)]^m$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;线性时变系统状态方程的解&#34;&gt;&lt;a href=&#34;#线性时变系统状态方程的解&#34; class=&#34;headerlink&#34; title=&#34;线性时变系统状态方程的解*&#34;&gt;&lt;/a&gt;线性时变系统状态方程的解*&lt;/h2&gt;&lt;h3 id=&#34;线性时变系统齐次状态方程的解&#34;&gt;&lt;a href=&#34;#线性时变系统齐次状态方程的解&#34; class=&#34;headerlink&#34; title=&#34;线性时变系统齐次状态方程的解&#34;&gt;&lt;/a&gt;线性时变系统齐次状态方程的解&lt;/h3&gt;&lt;h3 id=&#34;线性时变系统的状态转移矩阵&#34;&gt;&lt;a href=&#34;#线性时变系统的状态转移矩阵&#34; class=&#34;headerlink&#34; title=&#34;线性时变系统的状态转移矩阵&#34;&gt;&lt;/a&gt;线性时变系统的状态转移矩阵&lt;/h3&gt;&lt;h3 id=&#34;线性时变系统非齐次状态方程的解&#34;&gt;&lt;a href=&#34;#线性时变系统非齐次状态方程的解&#34; class=&#34;headerlink&#34; title=&#34;线性时变系统非齐次状态方程的解&#34;&gt;&lt;/a&gt;线性时变系统非齐次状态方程的解&lt;/h3&gt;&lt;h2 id=&#34;线性连续系统的时间离散化&#34;&gt;&lt;a href=&#34;#线性连续系统的时间离散化&#34; class=&#34;headerlink&#34; title=&#34;线性连续系统的时间离散化&#34;&gt;&lt;/a&gt;线性连续系统的时间离散化&lt;/h2&gt;&lt;p&gt;线性连续系统的时间离散化问题本质上就是在一定的采样方式和保持方式下，由系统的连续时间状态空间描述来得到对应的离散时间状态空间描述，并建立两者的系数矩阵间的关系式。&lt;/p&gt;
&lt;h3 id=&#34;近似离散化&#34;&gt;&lt;a href=&#34;#近似离散化&#34; class=&#34;headerlink&#34; title=&#34;近似离散化&#34;&gt;&lt;/a&gt;近似离散化&lt;/h3&gt;&lt;p&gt;考虑以下线性时变系统：$\dot{x}(t)&amp;#x3D;A(t)x(t)+B(t)u(t)$，当采样周期$T$较小且精度要求不高时，可将其离散化为：&lt;/p&gt;
&lt;p&gt;$$\dot{x}(kT)\approx \frac{1}{T}[x((k+1)T)-x(kT)]    \tag{10}$$&lt;/p&gt;
&lt;p&gt;令$t&amp;#x3D;kT$，有&lt;/p&gt;
&lt;p&gt;$$\frac{1}{T}[x((k+1)T)-x(kT)]&amp;#x3D;A(kT)x(kT)+B(kT)u(kT)$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}x[(k+1)T]&amp;amp;&amp;#x3D;[I+TA(kT)]x(kT)+TB(kT)u(kT)\&amp;amp;&amp;#x3D;G(kT)x(kT)+H(kT)u(kT)\end{aligned}$$&lt;/p&gt;
&lt;p&gt;其中，$G(kT)&amp;#x3D;I+TA(kT)$，$H(kT)&amp;#x3D;TB(kT)$。&lt;/p&gt;
&lt;p&gt;:::info&lt;/p&gt;
&lt;p&gt;注：一般而言，当采样周期为系统最小时间系数的$\frac{1}{10}$左右，近似度已经足够。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id6 例题1&lt;/p&gt;
&lt;p&gt;:::info &lt;/p&gt;
&lt;p&gt;系统的状态方程为$\dot{x}(t)&amp;#x3D;A(t)x(t)+B(t)u(t)$，其中$A(t)&amp;#x3D;\begin{bmatrix}0&amp;amp;5(1-e^{-5t})\0&amp;amp;5(e^{-5t}-1)\end{bmatrix}$，$B(t)&amp;#x3D;\begin{bmatrix}5&amp;amp;5e^{-5t}\0&amp;amp;5(1-e^{-5t})\end{bmatrix}$。试求采样周期为$T&amp;#x3D;0.2s$时的离散状态方程。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;直接代入公式有：&lt;/p&gt;
&lt;p&gt;$$G(kT)&amp;#x3D;I+TA(kT)&amp;#x3D;\begin{bmatrix}1&amp;amp;1-e^{-k}\0&amp;amp;e^{-k}\end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;$$H(kT)&amp;#x3D;TB(kT)&amp;#x3D;\begin{bmatrix}1&amp;amp;e^{-k}\0&amp;amp;1-e^{-k}\end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;那么，离散状态方程为：$x[(k+1)T]&amp;#x3D;G(kT)x(kT)+H(kT)u(kT)$&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;;;;id6 例题2&lt;/p&gt;
&lt;p&gt;:::info&lt;/p&gt;
&lt;p&gt;将状态方程$\dot{x}&amp;#x3D;\begin{bmatrix}0&amp;amp;1\-2&amp;amp;-3\end{bmatrix}x+\begin{bmatrix}0\1\end{bmatrix}u$ 近似离散化，$T&amp;#x3D;0.2s$。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;由题：$G&amp;#x3D;I+TA&amp;#x3D;\begin{bmatrix}1&amp;amp;0\0&amp;amp;1\end{bmatrix}+0.2\begin{bmatrix}0&amp;amp;1\-2&amp;amp;-3\end{bmatrix}&amp;#x3D;\begin{bmatrix}1&amp;amp;0.2\-0.4&amp;amp;0.4\end{bmatrix}$，$H&amp;#x3D;0.2\begin{bmatrix}0\1\end{bmatrix}&amp;#x3D;\begin{bmatrix}0\0.2\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;故离散状态方程为：&lt;/p&gt;
&lt;p&gt;$$$x[0.2(k+1)]&amp;#x3D;\begin{bmatrix}1&amp;amp;0.2\-0.4&amp;amp;0.4\end{bmatrix}x(0.2k)+\begin{bmatrix}0\0.2\end{bmatrix}u(0.2k)$$$&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h3 id=&#34;线性时不变系统状态方程的离散化&#34;&gt;&lt;a href=&#34;#线性时不变系统状态方程的离散化&#34; class=&#34;headerlink&#34; title=&#34;线性时不变系统状态方程的离散化&#34;&gt;&lt;/a&gt;线性时不变系统状态方程的离散化&lt;/h3&gt;&lt;p&gt;在线性时不变系统中，$\dot{x}(t)&amp;#x3D;A(x)+B(u)$，其时间离散化状态方程为：&lt;/p&gt;
&lt;p&gt;$$x[(k+1)T]&amp;#x3D;Gx(kT)+Hu(kT)    \tag{11}$$&lt;/p&gt;
&lt;p&gt;其中$G&amp;#x3D;e^{AT}$，$H&amp;#x3D;(\int_0^Te^{AT}dt)B$。假设条件为：(1)等采样周期$T$；(2)$u(t)\equiv u(kT),kT\leq t\leq (k+1)T$。&lt;/p&gt;
&lt;p&gt;+++primary 推导证明&lt;/p&gt;
&lt;p&gt;对于线性时不变系统 $\dot{x}(t)&amp;#x3D;A(x)+B(u)$，其状态方程的解为：&lt;/p&gt;
&lt;p&gt;$$x(t)&amp;#x3D;e^{A(t-t_0)}x(t_0)+\int e^{A(t-\tau)}Bu(\tau)d\tau    \tag{12}$$&lt;/p&gt;
&lt;p&gt;假设：(1)等采样周期$T$；(2)$x(k)&amp;#x3D;[x(t)]&lt;em&gt;{t&amp;#x3D;kT}$，$u(k)&amp;#x3D;[u(t)]&lt;/em&gt;{t&amp;#x3D;kT}$&lt;/p&gt;
&lt;p&gt;那么令 $t&amp;#x3D;(k+1)T$，$t_0&amp;#x3D;kT$，有：&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}x[(k+1)T]&amp;amp;&amp;#x3D;e^{AT}x(kT)+\int_{kT}^{(k+1)T}e^{A[(k+1)T-\tau]}Bu(\tau)d\tau\&amp;amp;&amp;#x3D;e^{AT}x(kT)+\int_{kT}^{(k+1)T}e^{A[(k+1)T-\tau]}Bd\tau \cdot u(kT)\end{aligned}$$&lt;/p&gt;
&lt;p&gt;令 $t&amp;#x3D;(k+1)T-\tau$，$d\tau &amp;#x3D;-dt$，有：&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}x[(k+1)T]&amp;amp;&amp;#x3D;e^{AT}x(kT)+\int_{0}^{\tau}e^{A(t)}Bdt\cdot u(kT)\&amp;amp;&amp;#x3D;e^{AT}x(kT)+\int_{0}^{\tau}e^{A(t)}dt\cdot Bu(kT)\end{aligned}$$&lt;/p&gt;
&lt;p&gt;令$G&amp;#x3D;e^{AT}$，$H&amp;#x3D;(\int_0^Te^{AT}dt)B$，有线性时不变系统的离散状态方程为：&lt;/p&gt;
&lt;p&gt;$$x[(k+1)T]&amp;#x3D;Gx(kT)+Hu(kT)$$&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;+++primary 解题步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;求解矩阵指数，方法见&lt;a href=&#34;#%E7%9F%A9%E9%98%B5%E6%8C%87%E6%95%B0%E7%9A%84%E8%AE%A1%E7%AE%97&#34;&gt;矩阵指数的计算&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;求解系数矩阵：$G&amp;#x3D;e^{AT}$，$H&amp;#x3D;(\int_0^Te^{AT}dt)B$。&lt;/li&gt;
&lt;li&gt;列写时间离散化状态方程：$x[(k+1)T]&amp;#x3D;Gx(kT)+Hu(kT)$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id7 例题1&lt;/p&gt;
&lt;p&gt;:::info&lt;/p&gt;
&lt;p&gt;将状态方程$\dot{x}&amp;#x3D;\begin{bmatrix}0&amp;amp;1\0&amp;amp;-2\end{bmatrix}x+\begin{bmatrix}0\1\end{bmatrix}u$ 离散化，$T&amp;#x3D;0.1s$。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;利用拉氏变换法求解矩阵指数函数。取拉氏变换有：&lt;/p&gt;
&lt;p&gt;$$[sI-A]^{-1}&amp;#x3D;\begin{bmatrix}s&amp;amp;-1\0&amp;amp;s+2\end{bmatrix}^{-1}&amp;#x3D;\begin{bmatrix}\frac{1}{s}&amp;amp;\frac{1}{s(s+2)}\0&amp;amp;\frac{1}{s+2}\end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;取拉氏逆变换得到矩阵指数函数：&lt;/p&gt;
&lt;p&gt;$$e^{At}&amp;#x3D;L^{-1}[sI-A]^{-1}&amp;#x3D;\begin{bmatrix}1&amp;amp;0.5(1-e^{-2T})\0&amp;amp;e^{-2T}\end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;进而求解系数矩阵：&lt;/p&gt;
&lt;p&gt;$$G&amp;#x3D;e^{AT}&amp;#x3D;\begin{bmatrix}1&amp;amp;0.5(1-e^{-2T})\0&amp;amp;e^{-2T}\end{bmatrix}&amp;#x3D;\begin{bmatrix}1&amp;amp;0.091\0&amp;amp;0.819\end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}H&amp;amp;&amp;#x3D;(\int_0^Te^{AT}dt)B&amp;#x3D;\Bigg[\int_0^T\begin{bmatrix}1&amp;amp;0.5(1-e^{-2T})\0&amp;amp;e^{-2T}\end{bmatrix}dt\Bigg]\begin{bmatrix}0\1\end{bmatrix}\&amp;amp;&amp;#x3D;\begin{bmatrix}T&amp;amp;0.5T+0.25e^{-2T}-0.25\0&amp;amp;-0.5e^{-2T}+0.5\end{bmatrix}\begin{bmatrix}0\1\end{bmatrix}&amp;#x3D;\begin{bmatrix}0.005\0.091\end{bmatrix}\end{aligned}$$&lt;/p&gt;
&lt;p&gt;故时间离散化状态方程为：&lt;/p&gt;
&lt;p&gt;$x[0.1(k+1)]&amp;#x3D;\begin{bmatrix}1&amp;amp;0.091\0&amp;amp;0.819\end{bmatrix}x(0.1k)+\begin{bmatrix}0.005\0.091\end{bmatrix}u(0.1k)$&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;线性离散系统状态方程的解&#34;&gt;&lt;a href=&#34;#线性离散系统状态方程的解&#34; class=&#34;headerlink&#34; title=&#34;线性离散系统状态方程的解&#34;&gt;&lt;/a&gt;线性离散系统状态方程的解&lt;/h2&gt;&lt;p&gt;离散系统的差分方程形状态方程有两种解法：递推法和z变换法。其中递推法在时变系统和时不变系统中都适用，而z变换法只适用于时不变系统。&lt;/p&gt;
&lt;h3 id=&#34;递推法&#34;&gt;&lt;a href=&#34;#递推法&#34; class=&#34;headerlink&#34; title=&#34;递推法&#34;&gt;&lt;/a&gt;递推法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;在线性时变系统中，$x(k+1)&amp;#x3D;G(k)x(k)+H(k)u(k)$，有：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$\left{ \begin{matrix} x(1)&amp;#x3D;G(0)x(0)+H(0)u(0)\ x(2)&amp;#x3D;G(1)x(1)+H(1)u(1) \ x(3)&amp;#x3D;G(2)x(2)+H(2)u(2) \\vdots \end{matrix}\right.$$&lt;/p&gt;
&lt;p&gt;给定初始条件$x(0)$和输入序列$u(0),u(1),\cdots$后即可求解$x(k)$。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;在线性时不变系统中，$x(k+1)&amp;#x3D;Gx(k)+Hu(k)$，其中$G,H$均为常数矩阵，因此：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$x(k)&amp;#x3D;G^kx(0)+\sum_{i&amp;#x3D;0}^{k-1}G^{k-1-i}Hu(i)    \tag{13}$$&lt;/p&gt;
&lt;p&gt;上式称为线性时不变离散系统的状态转移方程，其中$\Phi(k)&amp;#x3D;G^k$称为线性时不变离散系统的状态转移矩阵。&lt;/p&gt;
&lt;p&gt;状态转移矩阵的性质：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$\Phi(k+1)&amp;#x3D;G\Phi{k},\Phi(0)&amp;#x3D;I$&lt;/li&gt;
&lt;li&gt;$\Phi(k_2-k_0)&amp;#x3D;\Phi(k_2-k_1)\Phi(k_1-k_0)$&lt;/li&gt;
&lt;li&gt;$\Phi^{-1}(k)&amp;#x3D;\Phi(-k)$&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;z-变换法&#34;&gt;&lt;a href=&#34;#z-变换法&#34; class=&#34;headerlink&#34; title=&#34;z 变换法&#34;&gt;&lt;/a&gt;z 变换法&lt;/h3&gt;&lt;p&gt;考虑时不变离散系统：$x(k+1)&amp;#x3D;Gx(k)+Hu(k)$，取z变换有：&lt;/p&gt;
&lt;p&gt;$$zx(z)-zx(0)&amp;#x3D;Gx(z)+Hu(z)$$&lt;/p&gt;
&lt;p&gt;$$z(z)&amp;#x3D;(zI-G)^{-1}zx(0)+(zI-G)^{-1}Hu(z)   \tag{14}$$&lt;/p&gt;
&lt;p&gt;取z逆变换有：&lt;/p&gt;
&lt;p&gt;$$x(k)&amp;#x3D;z^{-1}\Big[(zI-G)^{-1}z\Big]x(0)+z^{-1}\Big[(zI-G)^{-1}Hu(z)\Big]    \tag{15} $$&lt;/p&gt;
&lt;p&gt;对比公式（13）和公式（15），由解的唯一性可知，&lt;/p&gt;
&lt;p&gt;$$z^{-1}\Big[(zI-G)^{-1}z\Big]&amp;#x3D;G^k    \tag{16}$$&lt;/p&gt;
&lt;p&gt;$$z^{-1}\Big[(zI-G)^{-1}Hu(z)\Big]&amp;#x3D;\sum_{i&amp;#x3D;0}^{k-1}G^{k-1-i}Hu(i)   \tag{17}$$&lt;/p&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id8 例题1&lt;/p&gt;
&lt;p&gt;:::info &lt;/p&gt;
&lt;p&gt;考虑离散系统：$x(k+1)&amp;#x3D;Gx(k)+Hu(k)$，其中$G&amp;#x3D;\begin{bmatrix}0&amp;amp;1\-0.16&amp;amp;-1\end{bmatrix}$，$H&amp;#x3D;\begin{bmatrix}1\1\end{bmatrix}$，初始条件为$x(0)&amp;#x3D;\begin{bmatrix}1\-1\end{bmatrix}$，试求当$u(k)&amp;#x3D;1$时状态方程的解。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;用z变换法求解，先计算$(zI-G)^{-1}$，有&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}(zI-G)^{-1}&amp;amp;&amp;#x3D;\begin{bmatrix}z&amp;amp;-1\0.16&amp;amp;z+1\end{bmatrix}^{-1}&amp;#x3D;\frac{1}{(z+0.2)(z+0.8)}\begin{bmatrix}z+1&amp;amp;1\-0.16&amp;amp;z\end{bmatrix}\&amp;amp;&amp;#x3D;\begin{bmatrix}\frac{4}{3}\times \frac{1}{z+0.2}-\frac{1}{3}\times \frac{1}{z+0.8}&amp;amp;\frac{5}{3}\times \frac{1}{z+0.2}-\frac{5}{3}\times \frac{1}{z+0.8}\-\frac{0.8}{3}\times \frac{1}{z+0.2}+\frac{0.8}{3}\times \frac{1}{z+0.8}&amp;amp;-\frac{1}{3}\times \frac{1}{z+0.2}+\frac{4}{3}\times \frac{1}{z+0.8}\end{bmatrix}\end{aligned}$$&lt;/p&gt;
&lt;p&gt;由于$u(k)&amp;#x3D;1$，则$u(z)&amp;#x3D;\frac{z}{z-1}$，故$zx(0)+Hu(z)&amp;#x3D;\begin{bmatrix}z\-z\end{bmatrix}+\begin{bmatrix}\frac{z}{z-1}\\frac{z}{z-1}\end{bmatrix}&amp;#x3D;\begin{bmatrix}\frac{z^2}{z-1}\\frac{-z^2+2z}{z-1}\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;那么代入公式（15）有：&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}x(z)&amp;amp;&amp;#x3D;(zI-G)^{-1}[zx(0)+Hu(z)]\&amp;amp;&amp;#x3D;\begin{bmatrix}-\frac{17}{6}\times \frac{z}{z+0.2}+\frac{22}{9}\times \frac{z}{z+0.8}+\frac{25}{18}\times \frac{z}{z-1}\\frac{3.4}{6}\times \frac{z}{z+0.2}-\frac{17.6}{9}\times \frac{z}{z+0.8}+\frac{7}{18}\times \frac{z}{z-1}\end{bmatrix}\end{aligned}$$&lt;/p&gt;
&lt;p&gt;求z逆变换有：&lt;/p&gt;
&lt;p&gt;$$x(k)&amp;#x3D;\begin{bmatrix}-\frac{17}{6}(-0.2)^k+\frac{22}{9}(-0.8)^k+\frac{25}{18}\\frac{3.4}{6}(-0.2)^k-\frac{17.6}{9}(-0.2)^k+\frac{7}{18}\end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
</content>
        <category term="现代控制理论" scheme="http://hening25.gitee.io/categories/%E7%8E%B0%E4%BB%A3%E6%8E%A7%E5%88%B6%E7%90%86%E8%AE%BA/" />
        <category term="状态方程的解" scheme="http://hening25.gitee.io/tags/%E7%8A%B6%E6%80%81%E6%96%B9%E7%A8%8B%E7%9A%84%E8%A7%A3/" />
        <category term="矩阵指数" scheme="http://hening25.gitee.io/tags/%E7%9F%A9%E9%98%B5%E6%8C%87%E6%95%B0/" />
        <category term="状态转移矩阵" scheme="http://hening25.gitee.io/tags/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E7%9F%A9%E9%98%B5/" />
        <category term="离散化" scheme="http://hening25.gitee.io/tags/%E7%A6%BB%E6%95%A3%E5%8C%96/" />
        <updated>2023-10-27T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://hening25.gitee.io/2023/10/21/2023-10-09_Realistic-fault-detection-of-li-ion-battery-via-dynamical-deep-learning/</id>
        <title>Realistic fault detection of li-ion battery via dynamical deep learning</title>
        <link rel="alternate" href="http://hening25.gitee.io/2023/10/21/2023-10-09_Realistic-fault-detection-of-li-ion-battery-via-dynamical-deep-learning/"/>
        <content type="html">&lt;p&gt;基于动态自编码网络的电池故障检测&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h1 id=&#34;Realistic-fault-detection-of-li-ion-battery-via-dynamical-deep-learning&#34;&gt;&lt;a href=&#34;#Realistic-fault-detection-of-li-ion-battery-via-dynamical-deep-learning&#34; class=&#34;headerlink&#34; title=&#34;Realistic fault detection of li-ion battery via dynamical deep learning&#34;&gt;&lt;/a&gt;Realistic fault detection of li-ion battery via dynamical deep learning&lt;/h1&gt;&lt;p&gt;Article link: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubmF0dXJlLmNvbS9hcnRpY2xlcy9zNDE0NjctMDIzLTQxMjI2LTUucGRm&#34;&gt;Realistic fault detection of li-ion battery via dynamical deep learning (nature.com)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;local link: &lt;a href=&#34;/downloads/2023-10-09_Realistic-fault-detection-of-li-ion-battery-via-dynamical-deep-learning.pdf&#34;&gt;Realistic fault detection of li-ion battery via dynamical deep learning&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Date: 2023-10-09&lt;/p&gt;
&lt;h2 id=&#34;1-论文主旨&#34;&gt;&lt;a href=&#34;#1-论文主旨&#34; class=&#34;headerlink&#34; title=&#34;1.论文主旨&#34;&gt;&lt;/a&gt;1.论文主旨&lt;/h2&gt;&lt;p&gt;​	文章针对当前电池动力电池数据的隐私以及成本问题，提出了一种现实可应用的深度学习框架模型（动态自编码异常检测，Dynamical autoencoder for Anomaly Detection, DyAD ），并且公布了347个电动汽车的690000个&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9maWdzaGFyZS5jb20vYXJ0aWNsZXMvZGF0YXNldC9SZWFsaXN0aWNfZmF1bHRfZGV0ZWN0aW9uX29mX0xpLWlvbl9iYXR0ZXJ5X3ZpYV9keW5hbWljYWxfZGVlcF9sZWFybmluZ19hcHByb2FjaC8yMzY1OTMyMw==&#34;&gt;锂电池充电片段数据&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;​	此前研究面临的问题主要有：（1）传统的数据使用方法（温度、电压的方差等）难以辨认异常与正常汽车，数据关联性表现较弱，ROC在0.5左右；（2）数据直接上传容易泄露，用户隐私难以保护；为此，文章提出了一种可大规模使用的定制深度学习框架。&lt;/p&gt;
&lt;h3 id=&#34;1-1-模型建模&#34;&gt;&lt;a href=&#34;#1-1-模型建模&#34; class=&#34;headerlink&#34; title=&#34;1.1.模型建模&#34;&gt;&lt;/a&gt;1.1.模型建模&lt;/h3&gt;&lt;p&gt;​	不直接上传用户的各项直接数据，而是将用户数据分为系统输入（电流，SOC）和系统响应（电压，温度）两部分，而后在充电站部署编码器，编码器学习系统输入到系统响应的映射关系，编码后的数据上传到云端经过解码后对电动汽车的异常是否做出检测。通过编码-解码架构避免了用户的隐私和厂商的模型细节泄露。&lt;/p&gt;
&lt;h3 id=&#34;1-2-建模细节&#34;&gt;&lt;a href=&#34;#1-2-建模细节&#34; class=&#34;headerlink&#34; title=&#34;1.2.建模细节&#34;&gt;&lt;/a&gt;1.2.建模细节&lt;/h3&gt;&lt;p&gt;​	问题1：传统的深度学习方法通过研究数据分布来检测异常，对不常见的数据表现出较差的检测效果（如恒流充电数据，可能会被误判为正常电池）。&lt;/p&gt;
&lt;p&gt;​	解决方法：在自编码-解码器中，编码器保持不变，编码器学习系统输入和系统响应的映射关系后得到潜在变量；而解码器不再仅仅利用潜在变量进行解码，而是通过潜在变量以及系统输入进行解码。具体理解如下：编码器学习到系统输入与系统响应的映射关系，那么可以用$y&amp;#x3D;f(x)$来表示这一过程，其中$y$是系统响应，$x$是系统输入，而编码器正是通过$x$和$y$学习到映射函数$f$。传统方法便是将$f$得到的潜在变量直接做出检测。然而本文构造了一个解码器$f_1$来模型物理系统，通过系统输入$x$重构了系统响应$y_1&amp;#x3D;f_1(x)$,对比真实响应$y$和重构响应$y_1$得到重构误差损失。其次通过里程进行弱监督从而引入辅助损失，引入KL正则化防止过拟合。三个损失函数共同影响模型的训练过程以及样本的异常情况。&lt;/p&gt;
&lt;p&gt;​	模型包含了三组参数，分别是编码器参数$\theta$，解码器参数$\zeta$和多感知机头部参数$\xi$，前两组参数均通过图卷积神经网络参数化得到。三个损失函数分别定义为：$l_{recon.}$，$l_{reg.}$，$l_{mileage}$。&lt;/p&gt;
&lt;h2 id=&#34;2-复现&#34;&gt;&lt;a href=&#34;#2-复现&#34; class=&#34;headerlink&#34; title=&#34;2.复现&#34;&gt;&lt;/a&gt;2.复现&lt;/h2&gt;&lt;p&gt;数据集以及代码的连接如下：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kaXNrLnBrdS5lZHUuY24vIy9saW5rLzM3RDczM0RGNDA1RDhENzk5OEI4RjU3RTQ0ODc1MTVB&#34;&gt;Code with datasets&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-1-数据集&#34;&gt;&lt;a href=&#34;#2-1-数据集&#34; class=&#34;headerlink&#34; title=&#34;2.1.数据集&#34;&gt;&lt;/a&gt;2.1.数据集&lt;/h3&gt;&lt;p&gt;数据可视化处理过程代码&lt;a href=&#34;/downloads/Code_2023-10-09_data-visualization.zip&#34;&gt;下载链接&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;2-2-模型&#34;&gt;&lt;a href=&#34;#2-2-模型&#34; class=&#34;headerlink&#34; title=&#34;2.2 模型&#34;&gt;&lt;/a&gt;2.2 模型&lt;/h3&gt;&lt;h3 id=&#34;2-3-代码细节&#34;&gt;&lt;a href=&#34;#2-3-代码细节&#34; class=&#34;headerlink&#34; title=&#34;2.3 代码细节&#34;&gt;&lt;/a&gt;2.3 代码细节&lt;/h3&gt;&lt;p&gt;从代码角度来看，这个代码写的太牛辣。那我们就来好好欣赏一下这优雅的代码吧。&lt;/p&gt;
</content>
        <category term="论文文献阅读" scheme="http://hening25.gitee.io/categories/%E8%AE%BA%E6%96%87%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/" />
        <updated>2023-10-20T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://hening25.gitee.io/2023/10/21/2023-10-21-%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%8A%B6%E6%80%81%E7%A9%BA%E9%97%B4%E6%8F%8F%E8%BF%B0/</id>
        <title>02 控制系统的状态空间描述</title>
        <link rel="alternate" href="http://hening25.gitee.io/2023/10/21/2023-10-21-%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%8A%B6%E6%80%81%E7%A9%BA%E9%97%B4%E6%8F%8F%E8%BF%B0/"/>
        <content type="html">&lt;p&gt;现代控制理论——02 控制系统的状态空间描述&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h1 id=&#34;控制系统的状态空间描述&#34;&gt;&lt;a href=&#34;#控制系统的状态空间描述&#34; class=&#34;headerlink&#34; title=&#34;控制系统的状态空间描述&#34;&gt;&lt;/a&gt;控制系统的状态空间描述&lt;/h1&gt;&lt;h2 id=&#34;基本概念&#34;&gt;&lt;a href=&#34;#基本概念&#34; class=&#34;headerlink&#34; title=&#34;基本概念&#34;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;h3 id=&#34;系统的状态空间模型&#34;&gt;&lt;a href=&#34;#系统的状态空间模型&#34; class=&#34;headerlink&#34; title=&#34;系统的状态空间模型&#34;&gt;&lt;/a&gt;系统的状态空间模型&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;线性时变系统的状态空间模型：系数矩阵与时间无关。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$\left{ \begin{matrix} \dot{x}&amp;#x3D;Ax+Bu\y&amp;#x3D;Cx+Du\\end{matrix}\right.   \tag{1}$$&lt;/p&gt;
&lt;p&gt;其中，$u&amp;#x3D;R^r$为输入向量；$y&amp;#x3D;R^m$为输出向量；$x\in R^n$为状态向量。$A,B,C,D$为系数矩阵。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;线性时不变系统的状态空间模型：系数矩阵与时间有关。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$\left{ \begin{matrix} \dot{x}&amp;#x3D;A(t)x+B(t)u\y&amp;#x3D;C(t)x+D(t)u\\end{matrix}\right.   \tag{2}$$&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;离散线性系统的状态空间模型。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$\left{ \begin{matrix} x(k+1)&amp;#x3D;A(k)x(k)+B(k)u(k)\y(k)&amp;#x3D;C(k)x(k)+D(k)u(k)\\end{matrix}\right.   \tag{3}$$&lt;/p&gt;
&lt;h3 id=&#34;状态空间描述的特点&#34;&gt;&lt;a href=&#34;#状态空间描述的特点&#34; class=&#34;headerlink&#34; title=&#34;状态空间描述的特点&#34;&gt;&lt;/a&gt;状态空间描述的特点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;系统的状态变量的个数&amp;#x3D;系统中包含的独立储能元件的个数&amp;#x3D;系统的阶数。&lt;/li&gt;
&lt;li&gt;在给定的系统中，状态变量的选择不唯一，但是状态变量的个数是一致的。&lt;/li&gt;
&lt;li&gt;基于状态变量选取的不同，同一系统可以用不同的动态方程来描述。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;+++primary 证明&lt;/p&gt;
&lt;p&gt;对于一个状态方程$\left{ \begin{matrix} \dot{x}&amp;#x3D;Ax+Bu\y&amp;#x3D;Cx\\end{matrix}\right.$，选择非奇异矩阵$P\in R^{n\times n}$作为变换阵，有$x&amp;#x3D;P\overline{x}$，那么此时状态方程可表示为：&lt;/p&gt;
&lt;p&gt;$$\dot{\overline{x}}&amp;#x3D;P^{-1}\dot{x}&amp;#x3D;P^{-1}[Ax+Bu]&amp;#x3D;P^{-1}AP\overline{x}+P^{-1}Bu&amp;#x3D;\overline{A}\overline{x}+\overline{B}u   \tag{4}$$&lt;/p&gt;
&lt;p&gt;$$y&amp;#x3D;Cx&amp;#x3D;CP\overline{x}&amp;#x3D;\overline{C}\overline{x}    \tag{5}$$、】&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;其中，$\overline{A}&amp;#x3D;P^{-1}AP,\overline{B}&amp;#x3D;P^{-1}B,\overline{C}&amp;#x3D;CP$。&lt;/p&gt;
&lt;p&gt;因此当状态变量 $x$ 改变时，一定存在变换矩阵 $P$ 使得状态方程发生变化。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h3 id=&#34;状态空间模型的建立步骤&#34;&gt;&lt;a href=&#34;#状态空间模型的建立步骤&#34; class=&#34;headerlink&#34; title=&#34;状态空间模型的建立步骤&#34;&gt;&lt;/a&gt;状态空间模型的建立步骤&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;选择状态变量。&lt;/li&gt;
&lt;li&gt;根据物体或其他机理列写微分方程。&lt;/li&gt;
&lt;li&gt;转化为矩阵形式，得到状态空间模型。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;状态空间表达式的系统方框图&#34;&gt;&lt;a href=&#34;#状态空间表达式的系统方框图&#34; class=&#34;headerlink&#34; title=&#34;状态空间表达式的系统方框图&#34;&gt;&lt;/a&gt;状态空间表达式的系统方框图&lt;/h3&gt;&lt;p&gt;公式（1）是线性时不变系统状态空间表达式的一般形式。其系统方框图可表示如下：&lt;/p&gt;
&lt;img data-src=&#34;/2023/10/21/2023-10-21-%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%8A%B6%E6%80%81%E7%A9%BA%E9%97%B4%E6%8F%8F%E8%BF%B0/01%E7%8A%B6%E6%80%81%E7%A9%BA%E9%97%B4%E7%B3%BB%E7%BB%9F%E6%A1%86%E5%9B%BE.png&#34; class=&#34;&#34;&gt;

&lt;h3 id=&#34;状态空间表达式的状态变量图&#34;&gt;&lt;a href=&#34;#状态空间表达式的状态变量图&#34; class=&#34;headerlink&#34; title=&#34;状态空间表达式的状态变量图&#34;&gt;&lt;/a&gt;状态空间表达式的状态变量图&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;状态变量图的基本元素符号&lt;/li&gt;
&lt;/ol&gt;
&lt;img data-src=&#34;/2023/10/21/2023-10-21-%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%8A%B6%E6%80%81%E7%A9%BA%E9%97%B4%E6%8F%8F%E8%BF%B0/02%E7%8A%B6%E6%80%81%E7%A9%BA%E9%97%B4%E5%8F%98%E9%87%8F%E5%9B%BE.png&#34; class=&#34;&#34;&gt;

&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;绘制步骤&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;绘制积分器&lt;/strong&gt;  积分器数量等于状态变量数目。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;由状态方程和输出方程绘制加法器和放大器&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接各元件&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id1 例题1&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;设有三阶系统状态空间表达式如下，试绘制其状态变量图。&lt;/p&gt;
&lt;p&gt;$$\left{ \begin{aligned}\begin{matrix} \dot{x}_1&amp;#x3D;x_2\\dot{x}_2&amp;#x3D;x_3\\dot{x}_3&amp;#x3D;-6x_1-3x_2-2x_3+u\y&amp;#x3D;x_1+x_2\end{matrix}\end{aligned}\right.$$&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;其状态变量图可绘制如下：&lt;/p&gt;
&lt;img data-src=&#34;/2023/10/21/2023-10-21-%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%8A%B6%E6%80%81%E7%A9%BA%E9%97%B4%E6%8F%8F%E8%BF%B0/03%E7%8A%B6%E6%80%81%E7%A9%BA%E9%97%B4%E5%8F%98%E9%87%8F%E5%9B%BE.png&#34; class=&#34;&#34;&gt;

&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;传递函数和传递函数矩阵&#34;&gt;&lt;a href=&#34;#传递函数和传递函数矩阵&#34; class=&#34;headerlink&#34; title=&#34;传递函数和传递函数矩阵&#34;&gt;&lt;/a&gt;传递函数和传递函数矩阵&lt;/h2&gt;&lt;h3 id=&#34;单输入单输出系统&#34;&gt;&lt;a href=&#34;#单输入单输出系统&#34; class=&#34;headerlink&#34; title=&#34;单输入单输出系统&#34;&gt;&lt;/a&gt;单输入单输出系统&lt;/h3&gt;&lt;p&gt;对于单输入单输出系统$\left{ \begin{matrix} \dot{x}&amp;#x3D;Ax+Bu\y&amp;#x3D;Cx+Du\\end{matrix}\right.$，在零初始条件下其传递函数可表示为：&lt;/p&gt;
&lt;p&gt;$$g(s)&amp;#x3D;\frac{Y(s)}{U(s)}&amp;#x3D;C(sI-A)^{-1}B+D    \tag{6}$$&lt;/p&gt;
&lt;p&gt;+++primary 推导&lt;/p&gt;
&lt;p&gt;在系统$\left{ \begin{matrix} \dot{x}&amp;#x3D;Ax+Bu\y&amp;#x3D;Cx+Du\\end{matrix}\right.$ 中，在零初始条件下取拉氏变换有：$\left{ \begin{matrix} sX(s)&amp;#x3D;AX(s)+BU(s)\Y(s)&amp;#x3D;CX(s)+DU(s)\\end{matrix}\right.$，整理得到$\left{ \begin{matrix} X(s)&amp;#x3D;(sI-A)^{-1}BU(s)\Y(s)&amp;#x3D;C(sI-A)^{-1}BU(s)+DU(s)\\end{matrix}\right.$，故$g(s)&amp;#x3D;\frac{Y(s)}{U(s)}&amp;#x3D;C(sI-A)^{-1}B+D$&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;在 $D&amp;#x3D;0$ 时，$g(s)&amp;#x3D;\frac{Y(s)}{U(s)}&amp;#x3D;C(sI-A)^{-1}B&amp;#x3D;\frac{Cadj(sI-A)B}{|sI-A|}$，其中$adj(sI-A)$表示矩阵$sI-A$的伴随矩阵。&lt;/p&gt;
&lt;p&gt;对比自控原理中传递函数的表达式：$g(s)&amp;#x3D;\frac{b_0s^n+b_1s^{n-1}+\cdots +b_{n-1}s+b_n}{s^n+a_1s^{n-1}+\cdots +a_{n-1}s+a_n}$，可知：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;系统矩阵$A$的特征多项式等同于传递函数的分母多项式。&lt;/li&gt;
&lt;li&gt;传递函数的极点就是系统矩阵$A$的特征值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;传递函数的不变性&lt;/strong&gt;  同一系统的状态空间描述不唯一，但传递函数是唯一的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;+++primary 证明：同一系统的不同状态空间描述具有相同的特征值。&lt;/p&gt;
&lt;p&gt;对于同一系统，选择两个不同的状态向量 $x\in{R^n}$ 和 $\overline{x}\in{R^n}$ 分别得到不同的状态空间描述：&lt;/p&gt;
&lt;p&gt;$$\begin{matrix}\left{ \begin{matrix} \dot{x}&amp;#x3D;Ax+Bu\y&amp;#x3D;Cx+Du\\end{matrix}\right.&amp;amp;&amp;amp;&amp;amp;\left{ \begin{matrix} \dot{\overline{x}}&amp;#x3D;\overline{A}\overline{x}+\overline{B}u\y&amp;#x3D;\overline{C}\overline{x}+\overline{D}u\\end{matrix}\right.\end{matrix}$$&lt;/p&gt;
&lt;p&gt;两种状态变量一定存在着可逆变化关系：$x&amp;#x3D;P\overline{x}$，故：&lt;/p&gt;
&lt;p&gt;$$\left{ \begin{matrix} \dot{x}&amp;#x3D;Ax+Bu\y&amp;#x3D;Cx+Du\\end{matrix}\right.\Rightarrow \left{ \begin{matrix} P\dot{\overline{x}}&amp;#x3D;AP\overline{x}+Bu\y&amp;#x3D;CP\overline{x}+Du\\end{matrix}\right.\Rightarrow \left{ \begin{matrix} \dot{\overline{x}}&amp;#x3D;P^{-1}AP\overline{x}+P^{-1}Bu\y&amp;#x3D;CP\overline{x}+Du\\end{matrix}\right.$$&lt;/p&gt;
&lt;p&gt;故 $\overline{A}&amp;#x3D;P^{-1}AP$，所以矩阵 $A$ 与矩阵 $\overline{A}$ 相似，故特征值相同。&lt;/p&gt;
&lt;p&gt;:::info&lt;/p&gt;
&lt;p&gt;相似矩阵具体相同的特征值&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h3 id=&#34;多输入多输出系统&#34;&gt;&lt;a href=&#34;#多输入多输出系统&#34; class=&#34;headerlink&#34; title=&#34;多输入多输出系统&#34;&gt;&lt;/a&gt;多输入多输出系统&lt;/h3&gt;&lt;p&gt;对于多输入多输出系统，输入向量$u&amp;#x3D;[u_1\cdots u_p]^T$，输出向量$y&amp;#x3D;[y_1\dots y_q]^T$。我们把第$i$个输出$y_i$和第$j$个输入$u_j$间的传递函数定义为：$g_{ij}(s)&amp;#x3D;\frac{Y_i(s)}{U_j(s)}$。故系统的输入输出关系可表示为：&lt;/p&gt;
&lt;p&gt;$$\begin{bmatrix}Y_1(s)\Y_2(s)\\vdots\Y_q(s)\end{bmatrix}&amp;#x3D;\begin{bmatrix}g_{11}(s)&amp;amp;g_{12}(s)&amp;amp;\cdots&amp;amp;g_{1p}(s)\g_{21}(s)&amp;amp;g_{22}(s)&amp;amp;\cdots&amp;amp;g_{2p}(s)\\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\g_{q1}(s)&amp;amp;g_{q2}(s)&amp;amp;\cdots&amp;amp;g_{qp}(s)\end{bmatrix}\begin{bmatrix}U_1(s)\U_2(s)\\vdots\U_q(s)\end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;以矩阵的形式表示：$Y(s)&amp;#x3D;G(s)U(s)$，其中 $G(s)$称为传递函数矩阵。&lt;/p&gt;
&lt;p&gt;对于多输入多输出系统$\left{ \begin{matrix} \dot{x}&amp;#x3D;Ax+Bu\y&amp;#x3D;Cx+Du\\end{matrix}\right.$，同样传递函数矩阵为：&lt;/p&gt;
&lt;p&gt;$$G(s)&amp;#x3D;C(sI-A)^{-1}B+D&amp;#x3D;\frac{Cadj(sI-A)B+D|sI-A|}{|sI-A|}$$&lt;/p&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id2 例题1&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;已知系统动态方程为$\begin{bmatrix}\dot{x}_1\\dot{x}_2\end{bmatrix}&amp;#x3D;\begin{bmatrix}0&amp;amp;1\0&amp;amp;-2\end{bmatrix}\begin{bmatrix}x_1\x_2\end{bmatrix}+\begin{bmatrix}1&amp;amp;0\0&amp;amp;1\end{bmatrix}\begin{bmatrix}u_1\u_2\end{bmatrix}$，$\begin{bmatrix}y_1\y_2\end{bmatrix}&amp;#x3D;\begin{bmatrix}1&amp;amp;0\0&amp;amp;1\end{bmatrix}\begin{bmatrix}x_1\x_2\end{bmatrix}$，试求系统的传递函数矩阵。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;由题，$G(s)&amp;#x3D;C(sI-A)^{-1}B+D&amp;#x3D;\begin{bmatrix}1&amp;amp;0\0&amp;amp;1\end{bmatrix}\begin{bmatrix}\frac{1}{s}&amp;amp;\frac{1}{s(s+2)}\0&amp;amp;\frac{1}{s+2}\end{bmatrix}\begin{bmatrix}1&amp;amp;0\0&amp;amp;1\end{bmatrix}&amp;#x3D;\begin{bmatrix}\frac{1}{s}&amp;amp;\frac{1}{s(s+2)}\0&amp;amp;\frac{1}{s+2}\end{bmatrix}$。&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;建立状态空间表达式&#34;&gt;&lt;a href=&#34;#建立状态空间表达式&#34; class=&#34;headerlink&#34; title=&#34;建立状态空间表达式&#34;&gt;&lt;/a&gt;建立状态空间表达式&lt;/h2&gt;&lt;h3 id=&#34;高阶微分方程化为状态空间描述&#34;&gt;&lt;a href=&#34;#高阶微分方程化为状态空间描述&#34; class=&#34;headerlink&#34; title=&#34;高阶微分方程化为状态空间描述&#34;&gt;&lt;/a&gt;高阶微分方程化为状态空间描述&lt;/h3&gt;&lt;p&gt;在单输入单输出线性时不变系统中，系统的输出与输入的关系可用如下高阶微分方程描述：&lt;/p&gt;
&lt;p&gt;$$y^{(n)}+a_1y^{(n-1)}+\cdots +a_{n-1}\dot{y}+a_ny&amp;#x3D;b_0u^{(m)}+b_1u^{(m-1)}+\cdots +b_{m-1}\dot{u}+b_mu    \tag{7}$$&lt;/p&gt;
&lt;p&gt;其中，$m\leq n$。根据微分方程右侧是否含有输入函数的导数（即$m$是否等于0）分两种情况讨论。&lt;/p&gt;
&lt;h4 id=&#34;常微分方程中不含输入函数的导数&#34;&gt;&lt;a href=&#34;#常微分方程中不含输入函数的导数&#34; class=&#34;headerlink&#34; title=&#34;常微分方程中不含输入函数的导数&#34;&gt;&lt;/a&gt;常微分方程中不含输入函数的导数&lt;/h4&gt;&lt;p&gt;若常微分方程中不含有输入函数的导数，即：$y^{(n)}+a_1y^{(n-1)}+\cdots +a_{n-1}\dot{y}+a_ny&amp;#x3D;b_mu$。&lt;/p&gt;
&lt;p&gt;那么可以选取状态变量：&lt;/p&gt;
&lt;p&gt;$$x_1&amp;#x3D;\frac{1}{b_m}y,\quad x_2&amp;#x3D;\frac{1}{b_m}\dot{y},\quad \cdots \quad  x_n&amp;#x3D;\frac{1}{b_m}y^{(n-1)}      \tag{8}$$&lt;/p&gt;
&lt;p&gt;那么就可以得到状态方程（前$n-1$条通过求导获得，最后一条通过原微分方程获得）：&lt;/p&gt;
&lt;p&gt;$$\left{ \begin{matrix} \dot{x}_1&amp;#x3D;x_2\\dot{x}_2&amp;#x3D;x_3\\vdots\\dot{x}&lt;em&gt;n&amp;#x3D;y^{(n)}&amp;#x3D;-a_nx_1-a&lt;/em&gt;{n-1}x_2-\cdots -a_1x_n+u\end{matrix}\right.$$&lt;/p&gt;
&lt;p&gt;输出方程为：$y&amp;#x3D;b_mx_1$。&lt;/p&gt;
&lt;p&gt;以矩阵的形式可表示为：&lt;/p&gt;
&lt;p&gt;$$\dot{x}&amp;#x3D;\begin{bmatrix}0&amp;amp;1&amp;amp;\cdots &amp;amp;0\\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\0&amp;amp;0&amp;amp;\cdots&amp;amp;1\-a_n&amp;amp;-a_{n-1}&amp;amp;\cdots&amp;amp;-a_1\end{bmatrix}x+\begin{bmatrix}0\0\\vdots\1\end{bmatrix}u    \tag{9}$$&lt;/p&gt;
&lt;p&gt;$$y&amp;#x3D;\begin{bmatrix}1&amp;amp;0&amp;amp;\cdots&amp;amp;0\end{bmatrix}x     \tag{10}$$&lt;/p&gt;
&lt;p&gt;+++primary 能控标准型&lt;/p&gt;
&lt;p&gt;形如公式（9）的状态空间模型称为能控标准型。即$A$与$b$可用以下形式表示：&lt;/p&gt;
&lt;p&gt;$$A&amp;#x3D;\begin{bmatrix}0&amp;amp;1&amp;amp;\cdots &amp;amp;0\\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\0&amp;amp;0&amp;amp;\cdots&amp;amp;1\-a_n&amp;amp;-a_{n-1}&amp;amp;\cdots&amp;amp;-a_1\end{bmatrix},\quad b&amp;#x3D;\begin{bmatrix}0\0\\vdots\1\end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;+++info 例题&lt;/p&gt;
&lt;p&gt;;;;id3 例题1&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;设系统的运动方程为：$y^{(3)}+5\ddot{y}+8\dot{y}+6y&amp;#x3D;3u$，试求其状态空间表达式。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;选取状态变量$x_1&amp;#x3D;y,\quad x_2&amp;#x3D;\dot{y},\quad x_3&amp;#x3D;\ddot{y}$，则有状态方程：&lt;/p&gt;
&lt;p&gt;$$\left{ \begin{matrix} \dot{x}_1&amp;#x3D;x_2\\dot{x}_2&amp;#x3D;x_3\\dot{x}_3&amp;#x3D;y^{(3)}&amp;#x3D;-6x_1-8x_2 -5x_3+3u\end{matrix}\right.$$&lt;/p&gt;
&lt;p&gt;输出方程为$y&amp;#x3D;x_1$。&lt;/p&gt;
&lt;p&gt;故状态空间表达式为：&lt;/p&gt;
&lt;p&gt;$$\dot{x}&amp;#x3D;\begin{bmatrix}0&amp;amp;1 &amp;amp;0\0&amp;amp;0&amp;amp;1\-6&amp;amp;-8&amp;amp;-5\end{bmatrix}x+\begin{bmatrix}0\0\3\end{bmatrix}u $$&lt;/p&gt;
&lt;p&gt;$$y&amp;#x3D;\begin{bmatrix}1&amp;amp;0&amp;amp;0\end{bmatrix}x$$&lt;/p&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h4 id=&#34;常微分方程中含有输入函数的导数&#34;&gt;&lt;a href=&#34;#常微分方程中含有输入函数的导数&#34; class=&#34;headerlink&#34; title=&#34;常微分方程中含有输入函数的导数&#34;&gt;&lt;/a&gt;常微分方程中含有输入函数的导数&lt;/h4&gt;&lt;p&gt;若常微分方程中含有输入函数的导数，即：$y^{(n)}+a_1y^{(n-1)}+\cdots +a_{n-1}\dot{y}+a_ny&amp;#x3D;b_0u^{(m)}+b_1u^{(m-1)}+\cdots +b_{m-1}\dot{u}+b_mu$。&lt;/p&gt;
&lt;p&gt;选择状态变量：&lt;/p&gt;
&lt;p&gt;$$\left{ \begin{matrix} x_1&amp;#x3D;y-\beta_0u\x_2&amp;#x3D;\dot{x}&lt;em&gt;1-\beta_1u&amp;#x3D;\dot{y}-\beta_0\dot{u}-\beta_1u\x_3&amp;#x3D;\dot{x}&lt;em&gt;2-\beta_2u&amp;#x3D;\ddot{y}-\beta_0\ddot{u}-\beta_1\dot{u}-\beta_2u\\vdots\x_n&amp;#x3D;\dot{x}&lt;/em&gt;{n-1}-\beta&lt;/em&gt;{n-1}u&amp;#x3D;y^{(n)}-\beta_0u^{(n-1)}-\beta_1u^{(n-2)}-\cdots -\beta_{n-2}\dot{u}-\beta_{n-1}u\end{matrix}\right.   \tag{11}$$&lt;/p&gt;
&lt;p&gt;其中参数$\beta_0,\beta_1,\cdots,\beta_n$由下式决定：&lt;/p&gt;
&lt;p&gt;$$\begin{bmatrix}\beta_0\\beta_1\\beta_2\\vdots\\beta_n\end{bmatrix}&amp;#x3D;\begin{bmatrix}1&amp;amp;0&amp;amp;\cdots&amp;amp;0&amp;amp;0\a_1&amp;amp;1&amp;amp;\cdots&amp;amp;0&amp;amp;0\\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots&amp;amp;\vdots\a_{n-1}&amp;amp;a_{n-2}&amp;amp;\cdots&amp;amp;1&amp;amp;0\a_n&amp;amp;a_{n-1}&amp;amp;\cdots&amp;amp;a_1&amp;amp;1\end{bmatrix}\begin{bmatrix}b_0\b_1\b_2\\vdots\b_n\end{bmatrix}    \tag{12}$$&lt;/p&gt;
&lt;p&gt;由（11）可得到状态方程：$\left{ \begin{matrix} \dot{x}&lt;em&gt;1&amp;#x3D;x_2+\beta_1u\\dot{x}&lt;em&gt;2&amp;#x3D;x_3+\beta_2u\\vdots\\dot{x}&lt;/em&gt;{n-1}&amp;#x3D;x_n+\beta&lt;/em&gt;{n-1}u\\begin{aligned}\dot{x}&lt;em&gt;n&amp;amp;&amp;#x3D;y^{(n)}-\beta_0u^{(u)}-\beta_1u^{(n-1)}-\cdots -\beta&lt;/em&gt;{n-2}\ddot{u}-\beta_{n-1}\dot{u}\&amp;amp;&amp;#x3D;-a_nx_1-a_{n-1}x_2-\cdots -a_1x_n+\beta_nu\end{aligned} \end{matrix}\right.$。&lt;/p&gt;
&lt;p&gt;+++info 最后一个等式怎么化简得到的？&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;因此，状态空间表达式为：&lt;/p&gt;
&lt;p&gt;$$\dot{x}&amp;#x3D;\begin{bmatrix}0&amp;amp;1&amp;amp;0&amp;amp;\cdots&amp;amp;0\0&amp;amp;0&amp;amp;1&amp;amp;\cdots&amp;amp;0\\vdots&amp;amp;\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\0&amp;amp;0&amp;amp;0&amp;amp;\cdots&amp;amp;1\-a_n&amp;amp;-a_{n-1}&amp;amp;-a_{n-2}&amp;amp;\cdots&amp;amp;-a_1\end{bmatrix}x+\begin{bmatrix}\beta_0\\beta_1\\vdots\\beta_{n-1}\\beta_n\end{bmatrix}u   \tag{13}$$&lt;/p&gt;
&lt;p&gt;$$y&amp;#x3D;[1\quad 0\quad \cdots\quad 0 ]x+\beta_0u$$&lt;/p&gt;
&lt;h3 id=&#34;通过传递函数建立状态空间描述&#34;&gt;&lt;a href=&#34;#通过传递函数建立状态空间描述&#34; class=&#34;headerlink&#34; title=&#34;通过传递函数建立状态空间描述&#34;&gt;&lt;/a&gt;通过传递函数建立状态空间描述&lt;/h3&gt;&lt;p&gt;后续的方法我们讨论的传递函数的分子多项式次数均小于分母多项式次数。因为对于实际系统，分子多项式次数总是小于或等于分母多项式次数，在次数相等时可以通过化简的方法转化为分子多项式次数小于分母多项式次数。&lt;/p&gt;
&lt;p&gt;+++primary 推导&lt;/p&gt;
&lt;p&gt;若传递函数的分子多项式次数等于分母多项式次数，即&lt;/p&gt;
&lt;p&gt;$$g(s)&amp;#x3D;\frac{b_0s^m+b_1s^{m-1}+\cdots +b_{m-1}s+b_m}{s^n+a_1s^{n-1}+\cdots +a_{n-1}s+a_n},m&amp;#x3D;n$$&lt;/p&gt;
&lt;p&gt;它总是可以化简为：&lt;/p&gt;
&lt;p&gt;$$g(s)&amp;#x3D;\frac{b_1s^{m-1}+\cdots +b_{m-1}s+b_m}{s^n+a_1s^{n-1}+\cdots +a_{n-1}s+a_n}&amp;#x3D;\overline{g}(s)+b_0,m&amp;#x3D;n$$&lt;/p&gt;
&lt;p&gt;其中 $\overline{g}(s)$ 为分子多项式次数小于分母多项式次数的传递函数，$b_0$ 为常数，整体视为两者的并联结构。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h4 id=&#34;直接分解法&#34;&gt;&lt;a href=&#34;#直接分解法&#34; class=&#34;headerlink&#34; title=&#34;直接分解法&#34;&gt;&lt;/a&gt;直接分解法&lt;/h4&gt;&lt;p&gt;对于$n$阶传递函数：$g(s)&amp;#x3D;\frac{Y(s)}{U(s)}&amp;#x3D;\frac{b_1s^{n-1}+\cdots +b_{n-1}s+b_n}{s^n+a_1s^{n-1}+\cdots +a_{n-1}s+a_n}$。&lt;/p&gt;
&lt;p&gt;同时除以$s^n$有：$Y(s)&amp;#x3D;U(s)\frac{b_1s^{-1}+\cdots +b_{n-1}s^{-(n-1)}+b_ns^{-n}}{1+a_1s^{-1}+\cdots +a_{n-1}s^{-(n-1)}+a_ns^{-n}}$。&lt;/p&gt;
&lt;p&gt;令中间变量$E(s)&amp;#x3D;U(s)\frac{1}{1+a_1s^{-1}+\cdots +a_{n-1}s^{-(n-1)}+a_ns^{-n}}$，即$E(s)&amp;#x3D;U(s)-a_1s^{-1}E(s)-\cdots -a_{n-1}s^{-(n-1)}E(s)-a_ns^{-n}E(s)$。&lt;/p&gt;
&lt;p&gt;则输入$U(s)$、中间变量$E(s)$和输出$Y(s)$的关系流程图如下：&lt;/p&gt;


&lt;p&gt;则$Y(s)&amp;#x3D;b_1s^{-1}E(s)+b_2s^{-2}E(s)+\cdots +b_{n-1}s^{-(n-1)}E(s)+b_ns^{-n}E(s)$。&lt;/p&gt;
&lt;p&gt;令$x_n,x_{n-1},\cdots,x_1$为$s^{-1}E(s),s^{-2}E(s),\cdots,s^{-n}E(s)$的拉氏逆变换，那么就可以绘制状态变量图并得到系统的状态空间表达式（能控标准型）。&lt;/p&gt;


&lt;p&gt;$$\dot{x}&amp;#x3D;\begin{bmatrix}0&amp;amp;1&amp;amp;\cdots&amp;amp;0\\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;\vdots\0&amp;amp;0&amp;amp;\cdots&amp;amp;1\-a_n&amp;amp;-a_{n-1}&amp;amp;\cdots&amp;amp;-a_1\end{bmatrix}x+\begin{bmatrix}0\\vdots\0\1\end{bmatrix}u   \tag{14}$$&lt;/p&gt;
&lt;p&gt;$$y&amp;#x3D;[b_n\quad b_{n-1}\quad \cdots\quad b_1 ]x$$&lt;/p&gt;
&lt;p&gt;+++info 补充&lt;/p&gt;
&lt;p&gt;如果该$n$阶系统传递函数的分子多项式次数等于分母多项式次数（在&lt;a href=&#34;#%E9%80%9A%E8%BF%87%E4%BC%A0%E9%80%92%E5%87%BD%E6%95%B0%E5%BB%BA%E7%AB%8B%E7%8A%B6%E6%80%81%E7%A9%BA%E9%97%B4%E6%8F%8F%E8%BF%B0&#34;&gt;通过传递函数建立状态空间描述&lt;/a&gt;中讨论过该情况）即 $g(s)&amp;#x3D;\frac{b_1s^{m-1}+\cdots +b_{m-1}s+b_m}{s^n+a_1s^{n-1}+\cdots +a_{n-1}s+a_n}&amp;#x3D;\overline{g}(s)+b_0,m&amp;#x3D;n$，那么先算出 $\overline{g}(s)$ 后在输入到输出之间直接连接一个比例环节即可。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h4 id=&#34;串联分解法&#34;&gt;&lt;a href=&#34;#串联分解法&#34; class=&#34;headerlink&#34; title=&#34;串联分解法&#34;&gt;&lt;/a&gt;串联分解法&lt;/h4&gt;&lt;p&gt;该方法适用于传递函数可分解为因式相乘的形式，即$g(s)&amp;#x3D;\frac{b_1(s-z_1)(s-z_2)\cdots(s-z_{n-1})}{(s-p_1)(s-p_2)\dots(s-p_n)}$。&lt;/p&gt;
&lt;p&gt;以一个三阶系统进行说明：$g(s)&amp;#x3D;\frac{b_1(s-z_1)(s-z_2)}{(s-p_1)(s-p_2)(s-p_3)}$。&lt;/p&gt;
&lt;p&gt;上式中可分为两种：$\frac{1}{s-p}&amp;#x3D;\frac{\frac{1}{s}}{1-\frac{1}{s}p}$，$\frac{s-z}{s-p}&amp;#x3D;1+\frac{p-z}{s-p}&amp;#x3D;1+(p-z)\frac{\frac{1}{s}}{1-\frac{1}{s}p}$。&lt;/p&gt;
&lt;p&gt;因此系统可视为三个一阶系统串联而成，结构图如下：&lt;/p&gt;


&lt;p&gt;取每个积分器的输出为状态变量，那么可以得到状态空间表达式如下：&lt;/p&gt;
&lt;p&gt;$$\left{ \begin{matrix} \dot{x}_1&amp;#x3D;p_1x_1+b_1u\\dot{x}_2&amp;#x3D;x_1+p_2x_2\\dot{x}_3&amp;#x3D;x_1+(p_2-z_2)x_2+p_3x_3\y&amp;#x3D;x_1+(p_2-z_2)x_2+(p_3-z_3)x_3\end{matrix}\right.$$&lt;/p&gt;
&lt;p&gt;写成向量的形式为：&lt;/p&gt;
&lt;p&gt;$$\dot{x}&amp;#x3D;\begin{bmatrix}p_1&amp;amp;0&amp;amp;0\1&amp;amp;p_2&amp;amp;0\1&amp;amp;p_2-z_2&amp;amp;p_3\end{bmatrix}x+\begin{bmatrix}b_1\0\0\end{bmatrix}u   \tag{15}$$&lt;/p&gt;
&lt;p&gt;$$y&amp;#x3D;[1\quad p_2-z_2\quad \quad p_3-z_3 ]x$$&lt;/p&gt;
&lt;h4 id=&#34;并联分解法&#34;&gt;&lt;a href=&#34;#并联分解法&#34; class=&#34;headerlink&#34; title=&#34;并联分解法&#34;&gt;&lt;/a&gt;并联分解法&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;若传递函数的极点两两相异。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;传递函数极点两两相异，则$g(s)&amp;#x3D;\frac{N(s)}{(s-p_1)(s-p_2)\dots(s-p_n)}&amp;#x3D;\frac{c_1}{s-p_1}+\frac{c_2}{s-p_2}+\cdots+\frac{c_n}{s-p_n}$，其中$c_i&amp;#x3D;\lim_{s\to p_i}(s-p_i)g(s)$。&lt;/p&gt;
&lt;p&gt;选取状态变量 $x_i(s)&amp;#x3D;\frac{1}{s-p_i}U(s)$，即 $sx_i(s)&amp;#x3D;p_ix_i(s)+u(s)$，做拉氏逆变换有：&lt;/p&gt;
&lt;p&gt;$$\dot{x}_i(t)&amp;#x3D;p_ix_i(t)+u(t)$$&lt;/p&gt;
&lt;p&gt;输出 $y(s)&amp;#x3D;g(s)u(s)&amp;#x3D;\sum_{i&amp;#x3D;1}^n\frac{c_i}{s-p_i}u_i(s)&amp;#x3D;\sum_{i&amp;#x3D;1}^nc_ix_i(s)$，做拉氏逆变换有：&lt;/p&gt;
&lt;p&gt;$$y(t)&amp;#x3D;\sum_{i&amp;#x3D;1}^nc_ix_i(t)$$&lt;/p&gt;
&lt;p&gt;写成向量的形式为：&lt;/p&gt;
&lt;p&gt;$$\dot{x}&amp;#x3D;\begin{bmatrix}p_1&amp;amp;0&amp;amp;\cdots&amp;amp;0\0&amp;amp;p_2&amp;amp;\cdots&amp;amp;0\\vdots&amp;amp;\vdots&amp;amp;\ddots&amp;amp;0\0&amp;amp;0&amp;amp;\cdots&amp;amp;p_n\end{bmatrix}x+\begin{bmatrix}1\1\\vdots\1\end{bmatrix}u   \tag{16}$$&lt;/p&gt;
&lt;p&gt;$$y&amp;#x3D;[c_1\quad c_2\quad\cdots \quad c_n]x$$&lt;/p&gt;
&lt;p&gt;+++info 上式为对角标准型&lt;/p&gt;
&lt;p&gt;对于系统 $\left{ \begin{matrix} \dot{x}&amp;#x3D;Ax+Bu\y&amp;#x3D;Cx\\end{matrix}\right.$ ，若$A$为对角阵且各元素为传递函数的极点，$B$为全1矩阵，$C$内各元素为对应极点的留数，那么称该矩阵表达式为对角标准型。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;若传递函数具有重极点。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;先考虑只有一个重极点和若干个单极点，重数为$r$，$g(s)&amp;#x3D;\frac{c_{11}}{(s-p_1)^{r}}+\frac{c_{12}}{(s-p_1)^{r-1}}+\cdots+\frac{c_{1r}}{(s-p_1)^{}}+\frac{c_{r+1}}{s-p_{r+1}}+\cdots+\frac{c_n}{s-p_n}$，其中对于单极点仍有：$c_i&amp;#x3D;\lim_{s\to p_i}(s-p_i)g(s)$，而对于重极点则有：$c_1j&amp;#x3D;\frac{1}{(j-1)!}\lim_{s\to p_1}\frac{d^{j-1}}{ds^{j-1}}[(s-p_1)g(s)],\quad j&amp;#x3D;1,2,\cdots,r$。&lt;/p&gt;
&lt;p&gt;选取状态变量，化简求拉氏逆变换得到状态方程：&lt;/p&gt;
&lt;p&gt;$$\begin{matrix}\left{ \begin{matrix} x_1(s)&amp;#x3D;\frac{U(s)}{(s-p_1)^{r}}\x_2(s)&amp;#x3D;\frac{U(s)}{(s-p_1)^{r-1}}\\vdots\x_r(s)&amp;#x3D;\frac{U(s)}{(s-p_1)}\x_{r+1}(s)&amp;#x3D;\frac{U(s)}{s-p_{r+1}}\\vdots\x_{1}(s)&amp;#x3D;\frac{U(s)}{s-p_{n}}\end{matrix}\right.\quad\stackrel{}{\Rightarrow}\quad\left{ \begin{matrix} x_1(s)&amp;#x3D;\frac{1}{s-p_1}x_2(s)\x_2(s)&amp;#x3D;\frac{1}{s-p_1}x_3(s)\\vdots\x_r(s)&amp;#x3D;\frac{1}{s-p_1}U(s)\x_{r+1}(s)&amp;#x3D;\frac{1}{s-p_{r+1}}U(s)\\vdots\x_n(s)&amp;#x3D;\frac{1}{s-p_n}U(s)\end{matrix}\right.\quad\stackrel{L^{-1}}{\Rightarrow}\quad \left{ \begin{matrix} \dot{x}&lt;em&gt;1(t)&amp;#x3D;p_1x_1+x_2\\dot{x}&lt;em&gt;2(t)&amp;#x3D;p_1x_2+x_3\\vdots\\dot{x}&lt;em&gt;r(t)&amp;#x3D;p_1x_r+u\\dot{x}&lt;/em&gt;{r+1}(t)&amp;#x3D;p&lt;/em&gt;{r+1}x&lt;/em&gt;{x+1}+u\\vdots\\dot{x}_n(t)&amp;#x3D;p_nx_n+u\end{matrix}\right.     \end{matrix}$$&lt;/p&gt;
&lt;p&gt;输出方程的拉氏变换为：&lt;/p&gt;
&lt;p&gt;$$Y(s)&amp;#x3D;c_{11}x_1(s)+c_{12}x_2(s)+\cdots+c_{1r}x_r(s)+c_{r+1}x_{r+1}(s)+\cdots+c_{nx_n(s)}$$&lt;/p&gt;
&lt;p&gt;求拉氏逆变换有：&lt;/p&gt;
&lt;p&gt;$$y(t)&amp;#x3D;c_{11}x_1(t)+c_{12}x_2(t)+\cdots+c_{1r}x_r(t)+c_{r+1}x_{r+1}(t)+\cdots+c_{nx_n(t)}$$&lt;/p&gt;
&lt;p&gt;得到状态空间表达式为：&lt;/p&gt;
&lt;p&gt;$$\begin{bmatrix}\dot{x_1}\\dot{x_2}\\vdots\\dot{x_r}\\dot{x_{r+1}}\\vdots\\dot{x_n}\end{bmatrix}&amp;#x3D;\begin{bmatrix}p_1&amp;amp;1&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;\&amp;amp;p_1&amp;amp;\ddots&amp;amp;&amp;amp;&amp;amp;\bold{0}&amp;amp;\&amp;amp;&amp;amp;\ddots&amp;amp;1\&amp;amp;&amp;amp;&amp;amp;p_1\&amp;amp;&amp;amp;&amp;amp;&amp;amp;p_{r+1}&amp;amp;&amp;amp;\&amp;amp;\bold{0}&amp;amp;&amp;amp;&amp;amp;&amp;amp;\ddots&amp;amp;\&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;p_n\end{bmatrix}\begin{bmatrix}x_1\x_2\\vdots\x_r\x_{r+1}\\vdots\x_n\end{bmatrix}+\begin{bmatrix}0\0\\vdots\1\1\\vdots\1\end{bmatrix}u   \tag{17}$$&lt;/p&gt;
&lt;p&gt;$$y&amp;#x3D;\begin{bmatrix}c_{11}&amp;amp; c_{12}&amp;amp;\cdots&amp;amp; c_{1r}&amp;amp;c_{r+1}&amp;amp;\cdots&amp;amp;c_{n}\end{bmatrix}\begin{bmatrix}x_1\x_2\\vdots\x_r\x_{r+1}\\vdots\x_n\end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;对于重根部分，矩阵$A$中对应的是若尔当块，$B$中为一个只有末行是1其余行为0的矩阵，$C$中对应元素为$r$重极点对应的留数。而对于其中的单极点部分，形式与&lt;a href=&#34;#%E5%B9%B6%E8%81%94%E5%88%86%E8%A7%A3%E6%B3%95&#34;&gt;无重根&lt;/a&gt;时一致。&lt;/p&gt;
&lt;p&gt;拓展到具有多个重极点的情况。矩阵$A$中在对角上补充对应的若尔当块，$B$中对应补充只有末行是1其余行为0的矩阵，$C$中补充对应元素为$r$重极点对应的留数。&lt;/p&gt;
&lt;h2 id=&#34;组合系统&#34;&gt;&lt;a href=&#34;#组合系统&#34; class=&#34;headerlink&#34; title=&#34;组合系统&#34;&gt;&lt;/a&gt;组合系统&lt;/h2&gt;&lt;h3 id=&#34;并联联结&#34;&gt;&lt;a href=&#34;#并联联结&#34; class=&#34;headerlink&#34; title=&#34;并联联结&#34;&gt;&lt;/a&gt;并联联结&lt;/h3&gt;&lt;p&gt;在$n$个子系统并联的并联系统中，组合系统的传递函数矩阵等于子系统传递函数矩阵的和。&lt;/p&gt;
&lt;p&gt;$$G(s)&amp;#x3D;G_1(s)+G_2(s)+\cdots+G_n(s)   \tag{18}$$&lt;/p&gt;
&lt;h3 id=&#34;串联联结&#34;&gt;&lt;a href=&#34;#串联联结&#34; class=&#34;headerlink&#34; title=&#34;串联联结&#34;&gt;&lt;/a&gt;串联联结&lt;/h3&gt;&lt;p&gt;在$n$个子系统串联的串联系统中，组合系统的传递函数矩阵等于子系统传递函数矩阵的积。&lt;/p&gt;
&lt;p&gt;$$G(s)&amp;#x3D;G_n(s)\cdots G_2(s)G_1(s)   \tag{19}$$&lt;/p&gt;
&lt;p&gt;:::info &lt;/p&gt;
&lt;p&gt;注：子系统传递函数矩阵的积遵循左乘原则。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;反馈联结&#34;&gt;&lt;a href=&#34;#反馈联结&#34; class=&#34;headerlink&#34; title=&#34;反馈联结&#34;&gt;&lt;/a&gt;反馈联结&lt;/h3&gt;&lt;p&gt;对于系统 $G_1(s)$，若添加反馈环节（动态反馈$G_2(s)$或常数反馈$H$），则可得到组合系统的传递函数矩阵：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;动态反馈&lt;/strong&gt; 反馈子系统为动态系统$G_2(s)$。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;组合系统的传递函数矩阵为：&lt;/p&gt;
&lt;p&gt;$$G(s)&amp;#x3D;[I+G_2(s)G_1(s)]^{-1}G_1(s)   \tag{20}$$&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;常数反馈&lt;/strong&gt;  反馈环节为常数矩阵$H$。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;组合系统的传递函数矩阵为：&lt;/p&gt;
&lt;p&gt;$$G(s)&amp;#x3D;[I+HG_1(s)]^{-1}G_1(s)   \tag{21}$$&lt;/p&gt;
&lt;h2 id=&#34;线性变换&#34;&gt;&lt;a href=&#34;#线性变换&#34; class=&#34;headerlink&#34; title=&#34;线性变换&#34;&gt;&lt;/a&gt;线性变换&lt;/h2&gt;&lt;h3 id=&#34;系统状态的线性变换&#34;&gt;&lt;a href=&#34;#系统状态的线性变换&#34; class=&#34;headerlink&#34; title=&#34;系统状态的线性变换&#34;&gt;&lt;/a&gt;系统状态的线性变换&lt;/h3&gt;&lt;p&gt;对于一个状态方程$\left{ \begin{matrix} \dot{x}&amp;#x3D;Ax+Bu\y&amp;#x3D;Cx+Du\\end{matrix}\right.$，选择非奇异矩阵$P\in R^{n\times n}$作为变换阵，有$x&amp;#x3D;P\overline{x}$，那么此时状态方程可表示为：&lt;/p&gt;
&lt;p&gt;$$\dot{\overline{x}}&amp;#x3D;P^{-1}\dot{x}&amp;#x3D;P^{-1}[Ax+Bu]&amp;#x3D;P^{-1}AP\overline{x}+P^{-1}Bu&amp;#x3D;\overline{A}\overline{x}+\overline{B}u   \tag{22}$$&lt;/p&gt;
&lt;p&gt;$$y&amp;#x3D;Cx&amp;#x3D;CP\overline{x}&amp;#x3D;\overline{C}\overline{x}    \tag{23}$$&lt;/p&gt;
&lt;p&gt;其中，$\overline{A}&amp;#x3D;P^{-1}AP,\overline{B}&amp;#x3D;P^{-1}B,\overline{C}&amp;#x3D;CP,\overline{D}&amp;#x3D;D$。&lt;/p&gt;
&lt;p&gt;:::info&lt;/p&gt;
&lt;p&gt;该方法通常用于将非对角阵$A$转化为对角阵$\overline{A}$，从而实现状态变量的解耦。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;:::danger no-icon&lt;/p&gt;
&lt;p&gt;线性定常系统的系统矩阵A的特征值是表征系统的动力学特性的重要参量。系统的状态方程可通过适当的线性非奇异变换化为由特征值表征的标准形，对分析系统的结构特性非常直观。 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;特征值互异时，标准形为对角阵。&lt;/li&gt;
&lt;li&gt;特征值非互异时，标准形一般为约当阵。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3 id=&#34;状态方程转化为对角标准型&#34;&gt;&lt;a href=&#34;#状态方程转化为对角标准型&#34; class=&#34;headerlink&#34; title=&#34;状态方程转化为对角标准型&#34;&gt;&lt;/a&gt;状态方程转化为对角标准型&lt;/h3&gt;&lt;h3 id=&#34;状态方程转化为若尔当标准型&#34;&gt;&lt;a href=&#34;#状态方程转化为若尔当标准型&#34; class=&#34;headerlink&#34; title=&#34;状态方程转化为若尔当标准型&#34;&gt;&lt;/a&gt;状态方程转化为若尔当标准型&lt;/h3&gt;&lt;h3 id=&#34;状态变换后特征值及传递函数矩阵的不变形&#34;&gt;&lt;a href=&#34;#状态变换后特征值及传递函数矩阵的不变形&#34; class=&#34;headerlink&#34; title=&#34;状态变换后特征值及传递函数矩阵的不变形&#34;&gt;&lt;/a&gt;状态变换后特征值及传递函数矩阵的不变形&lt;/h3&gt;</content>
        <category term="现代控制理论" scheme="http://hening25.gitee.io/categories/%E7%8E%B0%E4%BB%A3%E6%8E%A7%E5%88%B6%E7%90%86%E8%AE%BA/" />
        <category term="状态空间描述" scheme="http://hening25.gitee.io/tags/%E7%8A%B6%E6%80%81%E7%A9%BA%E9%97%B4%E6%8F%8F%E8%BF%B0/" />
        <updated>2023-10-20T16:00:00.000Z</updated>
    </entry>
</feed>
