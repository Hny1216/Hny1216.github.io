{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hny",
    "subtitle": "终有弱水替沧海 再无相思寄巫山",
    "icon": "http://hening25.gitee.io/images/favicon.ico",
    "description": "终有弱水替沧海 再无相思寄巫山",
    "home_page_url": "http://hening25.gitee.io",
    "items": [
        {
            "id": "http://hening25.gitee.io/2023/10/21/new/My-new-Art/",
            "url": "http://hening25.gitee.io/2023/10/21/new/My-new-Art/",
            "title": "My Article",
            "date_published": "2023-10-20T16:00:00.000Z",
            "content_html": "<p>这是摘要部分。</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"这是全文内容\"><a class=\"anchor\" href=\"#这是全文内容\">#</a> 这是全文内容。</h1>\n<h2 id=\"中山大学\"><a class=\"anchor\" href=\"#中山大学\">#</a> 中山大学</h2>\n<p>在那边</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> numpy</pre></td></tr></table></figure><pre><code>```java 行高亮 https://shoka.lostyu.me 参考链接 mark:1,6-7 \nimport java.util.Scanner; \n... \nScanner in = new Scanner (System.in); // 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。 \nSystem.out.println (in.nextLine ()); System.out.println (&quot;Hello&quot; + &quot;world.&quot;); ```\n</code></pre>\n<p><code>java 行高亮 https://shoka.lostyu.me 参考链接 mark:1,6-7 import java.util.Scanner; ... Scanner in = new Scanner (System.in); // 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。 System.out.println (in.nextLine ()); System.out.println (&quot;Hello&quot; + &quot;world.&quot;); </code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>行高亮</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">参考链接</span></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span></span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">.</span>nextLine <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"world.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ```</pre></td></tr></table></figure><p><code>java 行高亮 https://laoevil.gitee.io 参考链接 mark:1,6-7 import java.util.Scanner; ... Scanner in = new Scanner (System.in); // 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。 System.out.println (in.nextLine ()); System.out.println (&quot;Hello&quot; + &quot;world.&quot;); </code></p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>|             |          Grouping           || </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>First Header  | Second Header | Third Header | </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>------------ | :-----------: | -----------: | </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Content       |          <span class=\"token italic\"><span class=\"token punctuation\">*</span><span class=\"token content\">Long Cell</span><span class=\"token punctuation\">*</span></span>        || </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Content       |   <span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">Cell</span><span class=\"token punctuation\">**</span></span>    |         Cell |     </pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>New section   |     More      |         Data | </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>And more      | With an escaped '\\\\|'       || </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>[Prototype table]</pre></td></tr></table></figure><ol>\n<li class=\"quiz true\">\n<p>编译时多态主要指运算符重载与函数重载，而运行时多态主要指虚函数。</p>\n</li>\n<li class=\"quiz multi\">\n<p>有基类  <code>SHAPE</code> ，派生类  <code>CIRCLE</code> ，声明如下变量： </p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SHAPE shape1<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CIRCLE circle1<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>q1<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>下列哪些项是 “派生类对象替换基类对象”。</p>\n<ul class=\"options\">\n<li class=\"correct\"><code>p1=&amp;circle1;</code> </li>\n<li><code>q1=&amp;shape1;</code></li>\n<li class=\"correct\"><code>shape1=circle1;</code> </li>\n<li><code>circle1=shape1;</code></li>\n</ul>\n<blockquote>\n<ul class=\"options\">\n<li>✔️ 令基类对象的指针指向派生类对象</li>\n<li>❌ 派生类指针指向基类的引用</li>\n<li>✔️ 派生类对象给基类对象赋值</li>\n<li>❌ 基类对象给派生类对象赋值</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>下列叙述正确的是 <span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li>虚函数只能定义成无参函数</li>\n<li>虚函数不能有返回值</li>\n<li>能定义虚构造函数</li>\n<li class=\"correct\">A、B、C 都不对</li>\n</ul>\n</li>\n<li class=\"quiz fill\">\n<p>如果定义  <code>int e=8; double f=6.4, g=8.9;</code> ，则表达式  <code>f+int (e/3*int (f+g)/2)%4</code>  的值为 <span class=\"gap\">9.4</span>。</p>\n<blockquote>\n<p>注意运算顺序和数据类型<br />\n<span class=\"mistake\"> 8.4</span></p>\n</blockquote>\n</li>\n</ol>\n",
            "tags": [
                "现代控制理论",
                "test"
            ]
        },
        {
            "id": "http://hening25.gitee.io/2023/10/21/%E8%AE%BA%E6%96%87%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/2023-10-09%20Realistic%20fault%20detection%20of%20li-ion%20battery%20via%20dynamical%20deep%20learning/",
            "url": "http://hening25.gitee.io/2023/10/21/%E8%AE%BA%E6%96%87%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/2023-10-09%20Realistic%20fault%20detection%20of%20li-ion%20battery%20via%20dynamical%20deep%20learning/",
            "title": "Realistic fault detection of li-ion battery via dynamical deep learning",
            "date_published": "2023-10-20T16:00:00.000Z",
            "content_html": "<h1 id=\"Realistic-fault-detection-of-li-ion-battery-via-dynamical-deep-learning\"><a href=\"#Realistic-fault-detection-of-li-ion-battery-via-dynamical-deep-learning\" class=\"headerlink\" title=\"Realistic fault detection of li-ion battery via dynamical deep learning\"></a>Realistic fault detection of li-ion battery via dynamical deep learning</h1><p>Article link: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmF0dXJlLmNvbS9hcnRpY2xlcy9zNDE0NjctMDIzLTQxMjI2LTUucGRm\">Realistic fault detection of li-ion battery via dynamical deep learning (nature.com)</span></p>\n<p>local link: [Realistic fault detection of li-ion battery via dynamical deep learning](2023-10-09 Realistic fault detection of li-ion battery via dynamical deep learning.pdf)</p>\n<p>Date: 2023-10-09</p>\n<h2 id=\"1-论文主旨\"><a href=\"#1-论文主旨\" class=\"headerlink\" title=\"1.论文主旨\"></a>1.论文主旨</h2><p>​\t文章针对当前电池动力电池数据的隐私以及成本问题，提出了一种现实可应用的深度学习框架模型（动态自编码异常检测，<code>Dynamical autoencoder for Anomaly Detection</code>, <code>DyAD</code> ），并且公布了347个电动汽车的690000个<span class=\"exturl\" data-url=\"aHR0cHM6Ly9maWdzaGFyZS5jb20vYXJ0aWNsZXMvZGF0YXNldC9SZWFsaXN0aWNfZmF1bHRfZGV0ZWN0aW9uX29mX0xpLWlvbl9iYXR0ZXJ5X3ZpYV9keW5hbWljYWxfZGVlcF9sZWFybmluZ19hcHByb2FjaC8yMzY1OTMyMw==\">锂电池充电片段数据</span>。</p>\n<p>​\t此前研究面临的问题主要有：（1）传统的数据使用方法（温度、电压的方差等）难以辨认异常与正常汽车，数据关联性表现较弱，ROC在0.5左右；（2）数据直接上传容易泄露，用户隐私难以保护；为此，文章提出了一种可大规模使用的定制深度学习框架。</p>\n<h3 id=\"1-1-模型建模\"><a href=\"#1-1-模型建模\" class=\"headerlink\" title=\"1.1.模型建模\"></a>1.1.模型建模</h3><p>​\t不直接上传用户的各项直接数据，而是将用户数据分为系统输入（电流，SOC）和系统响应（电压，温度）两部分，而后在充电站部署编码器，编码器学习系统输入到系统响应的映射关系，编码后的数据上传到云端经过解码后对电动汽车的异常是否做出检测。通过编码-解码架构避免了用户的隐私和厂商的模型细节泄露。</p>\n<h3 id=\"1-2-建模细节\"><a href=\"#1-2-建模细节\" class=\"headerlink\" title=\"1.2.建模细节\"></a>1.2.建模细节</h3><p>​\t问题1：传统的深度学习方法通过研究数据分布来检测异常，对不常见的数据表现出较差的检测效果（如恒流充电数据，可能会被误判为正常电池）。</p>\n<p>​\t解决方法：在自编码-解码器中，编码器保持不变，编码器学习系统输入和系统响应的映射关系后得到潜在变量；而解码器不再仅仅利用潜在变量进行解码，而是通过潜在变量以及系统输入进行解码。具体理解如下：编码器学习到系统输入与系统响应的映射关系，那么可以用<code>y=f(x)</code>来表示这一过程，其中<code>y</code>是系统响应，<code>x</code>是系统输入，而编码器正是通过<code>x</code>和<code>y</code>学习到映射函数<code>f</code>。传统方法便是将<code>f</code>得到的潜在变量直接做出检测。然而本文构造了一个解码器<code>f1</code>来模型物理系统，通过系统输入<code>x</code>重构了系统响应<code>y1=f1(x)</code>,对比真实响应<code>y</code>和重构响应<code>y1</code>得到重构误差损失。其次通过里程进行弱监督从而引入辅助损失，引入KL正则化防止过拟合。三个损失函数共同影响模型的训练过程以及样本的异常情况。</p>\n<p>​\t模型包含了三组参数，分别是编码器参数$ \\theta$，解码器参数$\\zeta$和多感知机头部参数$\\xi$，前两组参数均通过图卷积神经网络参数化得到。三个损失函数分别定义为：$l_{recon.}$，$l_{reg.}$，$l_{mileage}$。</p>\n<h2 id=\"2-复现\"><a href=\"#2-复现\" class=\"headerlink\" title=\"2.复现\"></a>2.复现</h2><h3 id=\"2-1-数据集\"><a href=\"#2-1-数据集\" class=\"headerlink\" title=\"2.1.数据集\"></a>2.1.数据集</h3>",
            "tags": [
                "论文文献阅读"
            ]
        }
    ]
}