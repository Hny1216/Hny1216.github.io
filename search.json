[{"title":"Leetcode刷题记录","url":"/2025/08/15/2025-08-15-Leetcode/","content":"\nLeetcode刷题记录\n\n<!-- more -->\n\n# Leetcode刷题\n\n## 数组/字符串\n\n### [1071. 字符串的最大公因子](https://leetcode.cn/problems/greatest-common-divisor-of-strings/)\n\n对于字符串 `s` 和 `t`，只有在 `s = t + t + t + ... + t + t`（`t` 自身连接 1 次或多次）时，我们才认定 “`t` 能除尽 `s`”。\n\n给定两个字符串 `str1` 和 `str2` 。返回 *最长字符串 `x`，要求满足 `x` 能除尽 `str1` 且 `x` 能除尽 `str2`* 。\n\n:::info no-icon\n\n若两个字符串是由同一个字符串 X重复拼接而成，那么无论先拼哪个，结果应该相同。\n如果 str1 + str2 != str2 +str1，说明不存在公共的重复因子，直接返回空串 \"\"。\n如果两个字符串都是由同一个字符串 X 组成，那么 X 的长度必然是str1.size()和 str2.size() 的最大公约数。\n\n作者：Random\n链接：https://leetcode.cn/problems/greatest-common-divisor-of-strings/solutions/3749891/shu-xue-zui-da-gong-yue-shu-by-coder-ran-a88u/\n\n:::\n\n```python\nclass Solution:\n    def gcdOfStrings(self, str1: str, str2: str) -> str:\n        if not str1 + str2 == str2 + str1:\n            return \"\"\n        return str1[0:self.gcd(len(str1), len(str2))]\n    \n    def gcd(self, a,b):\n        if b == 0: return a\n        else: return gcd(b, a%b)\n    \n```\n\n\n\n### [605. 种花问题](https://leetcode.cn/problems/can-place-flowers/)\n\n假设有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花不能种植在相邻的地块上，它们会争夺水源，两者都会死去。\n\n给你一个整数数组 `flowerbed` 表示花坛，由若干 `0` 和 `1` 组成，其中 `0` 表示没种植花，`1` 表示种植了花。另有一个数 `n` ，能否在不打破种植规则的情况下种入 `n` 朵花？能则返回 `true` ，不能则返回 `false` 。\n\n:::info no-icon\n\n从左到右遍历数组，能种花就立刻种花。\n\n如何判断能否种花？由于「花不能种植在相邻的地块上」，如果要在下标 i 处种花，需要满足 flowerbed[i−1],flowerbed[i],flowerbed[i+1] 均为 0。\n\n每种一朵花，就把 n 减一。如果最后 n≤0，则返回 true，否则返回 false。\n\n为了简化判断逻辑，可以在数组的开头和末尾各插入一个 0。\n\n作者：灵茶山艾府\n链接：https://leetcode.cn/problems/can-place-flowers/solutions/2463018/ben-ti-zui-jian-dan-xie-fa-pythonjavacgo-6a6k/\n\n:::\n\n```python\nclass Solution:\n    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:\n      nums = len(flowerbed)\n      new_flowerbed = [0] + flowerbed + [0]\n      for i in range(1,len(new_flowerbed)-1):\n        if new_flowerbed[i-1] == 0 and new_flowerbed[i+1] == 0 and new_flowerbed[i] == 0:\n          new_flowerbed[i] = 1\n          n -= 1\n      return n <= 0\n\n```\n\n\n\n### [334. 递增的三元子序列](https://leetcode.cn/problems/increasing-triplet-subsequence/)\n\n给你一个整数数组 `nums` ，判断这个数组中是否存在长度为 `3` 的递增子序列。\n\n如果存在这样的三元组下标 `(i, j, k)` 且满足 `i < j < k` ，使得 `nums[i] < nums[j] < nums[k]` ，返回 `true` ；否则，返回 `false` 。\n\n:::info no-icon\n\n;;;id1 巧解\n\n核心想法：遍历一遍数组，希望遍历到的这个数three，前面已经有一个比他小的数two，再前面有一个比two小的数one。\n我们需要维护两个变量：one和two。代表递增子序列的第一个数和第二个数。\n假设我们已经有了这两个数，那么three的大小有以下三种情况：\n\n1. **three大于two**    此情况下：即找到了三元组，直接返回true。\n\n   ![300](2025-08-15-Leetcode/334-01.png)\n\n2. **three介于two和one之间**     此情况下：应更新two，赋值为这个更小的值。这相当于帮我们扩大了three的可选择范围，当再次遇到一个比更新过的two大的数即可找到。\n\n   ![300](2025-08-15-Leetcode/334-02.png)\n\n   ![300](2025-08-15-Leetcode/334-03.png)\n\n3. **three小于one**     此情况下：应更新one，赋值为这个更小的值。而不需要动two。这相当于帮我们扩大了之后出现的two的可选择范围。进而扩大了之后出现的three的可选择范围。\n\n![300](2025-08-15-Leetcode/334-04.png)\n\n![300](2025-08-15-Leetcode/334-05.png)\n\n![300](2025-08-15-Leetcode/334-06.png)\n\n需要注意的是，我们只更新one，原先的two不需要更改，因为子序列是从前往后的，只有当之后再出现比two小的数的时候再按照第二步那样更改。\n\n假设有如下示例：[2,5,1,6]，在遇到1之后更新了one，后遇到6，因为先判断是否大于two，由于6大于5，就直接返回true了。\n\n![300](2025-08-15-Leetcode/334-07.png)\n\n注意：two附带隐含信息——这之前有个数比two小\n所以此时找到的递增子序列不是one、two、three的1 5 6，而是old one、two、three的2 5 6。\n\n这里更新的one的意思是，为之后可能存在的更小的递增子序列打基础。\n假设有如下示例：[2,5,1,2,6]，在遇到1之后更新了one，后遇到2，2介于1和5（two）之间，更新two为2，后遇到6，由于6大于2，返回true。\n此时找到的递增子序列才是one、two、three的1 2 6\n\n最后考虑one、two的初值，容易想到设定为Integer.MAX_VALUE即可。\n\n作者：Xzz\n链接：https://leetcode.cn/problems/increasing-triplet-subsequence/solutions/535725/pou-xi-ben-zhi-yi-wen-bang-ni-kan-qing-t-3ye2/\n\n```python\nclass Solution:\n    def increasingTriplet(self, nums: List[int]) -> bool:\n      one, two = inf, inf\n      for three in nums:\n        if three > two : return True\n        elif three <= one: one = three\n        else: two = three\n      return False\n```\n\n\n\n+++info 解析（GPT）\n\n **1. 递增三元组的性质**\n\n假设数组中存在递增三元组 `a < b < c`，它们的顺序在数组中是 **前后顺序**，我们只关心：\n\n- 第一个数最小\n- 第二个数比第一个数大\n- 第三个数比第二个数大\n\n**关键点**：我们不需要知道三元组具体位置，只需要保证存在。\n\n **2. one 和 two 的作用**\n\n- `one`：当前找到的**最小的候选第一个数**\n- `two`：在 `one` 之后，找到的**最小的候选第二个数**\n\n**核心思想**：\n\n- 我们并不是在找数组中所有可能的三元组，而是在**维护最优候选序列**。\n- “最优候选”意味着 **尽可能小的 one 和 two**，这样可以最大化出现第三个数 three 的机会。\n\n换句话说：\n\n1. 遍历到一个数 three：\n   - 如果 three > two → 说明找到了一个合法三元组（不管前面 one/two 是不是更新过的，都会形成合法的递增序列）。\n2. 如果 three <= one → 更新 one\n   - 因为这个更小的 one 可以为之后出现的 two 提供更多可能。\n3. 否则 → 更新 two\n   - 因为这个更小的 two 可以为之后出现的 three 提供更多可能。\n\n **3. 为什么不会漏掉任何情况**\n\n假设数组中有递增三元组 `x < y < z`，为什么算法一定能找到它？\n\n- 当我们遍历到 x：\n  - one 会被更新为 ≤ x\n- 当我们遍历到 y：\n  - two 会被更新为 ≤ y\n- 当我们遍历到 z：\n  - 如果 z > two → 返回 True\n\n**关键点**：\n\n- 即使 one/two 被后面更小的数更新过，**old one/two 仍然保留了前序信息**，保证当前 three 大于某个二元组时，必然能形成递增三元组。\n- 换句话说，one/two 是动态维护的 **最小可能序列候选**，任何真正存在的递增三元组都会被捕获。\n\n\n\n\n\n+++\n\n\n\n;;;\n\n;;;id1 常规\n\n常规解法\n\n;;;\n\n:::\n\n\n\n## 滑动窗口\n\n### [1208. 尽可能使字符串相等](https://leetcode.cn/problems/get-equal-substrings-within-budget/)\n\n给你两个长度相同的字符串，`s` 和 `t`。\n\n将 `s` 中的第 `i` 个字符变到 `t` 中的第 `i` 个字符需要 `|s[i] - t[i]|` 的开销（开销可能为 0），也就是两个字符的 ASCII 码值的差的绝对值。\n\n用于变更字符串的最大预算是 `maxCost`。在转化字符串时，总开销应当小于等于该预算，这也意味着字符串的转化可能是不完全的。\n\n如果你可以将 `s` 的子字符串转化为它在 `t` 中对应的子字符串，则返回可以转化的最大长度。\n\n如果 `s` 中没有子字符串可以转化成 `t` 中对应的子字符串，则返回 `0`。\n\n+++info 示例\n\n**示例 1：**\n\n```\n输入：s = \"abcd\", t = \"bcdf\", maxCost = 3\n输出：3\n解释：s 中的 \"abc\" 可以变为 \"bcd\"。开销为 3，所以最大长度为 3。\n```\n\n**示例 2：**\n\n```\n输入：s = \"abcd\", t = \"cdef\", maxCost = 3\n输出：1\n解释：s 中的任一字符要想变成 t 中对应的字符，其开销都是 2。因此，最大长度为 1。\n```\n\n**示例 3：**\n\n```\n输入：s = \"abcd\", t = \"acde\", maxCost = 0\n输出：1\n解释：a -> a, cost = 0，字符串未发生变化，所以最大长度为 1。\n```\n\n+++\n\n:::info no-icon\n\n两个长度相等字符串的 s 和 t ，把 i 位置的 s[i] 转成 t[i] 的开销是两者 ASCII 码之差的绝对值。题目给出了允许的最大预算 maxCost ，求不超过预算的情况下能够转换的最长子串。\n\n比如，对于 s = \"abcd\", t = \"bcdf\", cost = 3 而言，我们使用 costs[i] 表示从 s[i]  转成 t[i] 的开销，那么 costs = [1, 1, 1, 2] 。由于 maxCost = 3， 所以最多允许其前面三个字符进行转换。\n\n于是题目变成了：**已知一个数组 costs ，求：和不超过 maxCost 时最长的子数组的长度**。\n\n![300](2025-08-15-Leetcode/1208-01.png)\n\n```python\nclass Solution:\n    def equalSubstring(self, s: str, t: str, maxCost: int) -> int:\n        n = len(s)\n        left, right = 0, 0\n        result = 0\n        cost = 0\n        while right < n:\n            cost += abs(ord(s[right]) - ord(t[right]))\n            while cost > maxCost:\n                cost -= abs(ord(s[left]) - ord(t[left]))\n                left += 1\n                \n            result = max(result, right - left + 1)\n            right += 1\n        return result\n\n```\n\n\n\n《挑战程序设计竞赛》这本书中把滑动窗口叫做「虫取法」，我觉得非常生动形象。因为滑动窗口的两个指针移动的过程和虫子爬动的过程非常像：前脚不动，把后脚移动过来；后脚不动，把前脚向前移动。\n\n+++info 滑动窗口问题模板\n\n我分享一个滑动窗口的模板，能解决大多数的滑动窗口问题（[1004. 最大连续1的个数 III](https://leetcode.cn/problems/max-consecutive-ones-iii/)，[424. 替换后的最长重复字符](https://leetcode.cn/problems/longest-repeating-character-replacement/)）：\n\n```python\ndef findSubArray(nums):\n    N = len(nums) # 数组/字符串长度\n    left, right = 0, 0 # 双指针，表示当前遍历的区间[left, right]，闭区间\n    sums = 0 # 用于统计 子数组/子区间 是否有效，根据题目可能会改成求和/计数\n    res = 0 # 保存最大的满足题目要求的 子数组/子串 长度\n    while right < N: # 当右边的指针没有搜索到 数组/字符串 的结尾\n        sums += nums[right] # 增加当前右边指针的数字/字符的求和/计数\n        while 区间[left, right]不符合题意：# 此时需要一直移动左指针，直至找到一个符合题意的区间\n            sums -= nums[left] # 移动左指针前需要从counter中减少left位置字符的求和/计数\n            left += 1 # 真正的移动左指针，注意不能跟上面一行代码写反\n        # 到 while 结束时，我们找到了一个符合题意要求的 子数组/子串\n        res = max(res, right - left + 1) # 需要更新结果\n        right += 1 # 移动右指针，去探索新的区间\n    return res\n```\n\n滑动窗口中用到了左右两个指针，它们移动的思路是：以右指针作为驱动，拖着左指针向前走。右指针每次只移动一步，而左指针在内部 while 循环中每次可能移动多步。右指针是主动前移，探索未知的新区域；左指针是被迫移动，负责寻找满足题意的区间。\n\n模板的整体思想是：\n\n定义两个指针 left 和 right 分别指向区间的开头和结尾，注意是闭区间；定义 sums 用来统计该区间内的各个字符出现次数；\n第一重 while 循环是为了判断 right 指针的位置是否超出了数组边界；当 right 每次到了新位置，需要增加 right 指针的求和/计数；\n第二重 while 循环是让 left 指针向右移动到 [left, right] 区间符合题意的位置；当 left 每次移动到了新位置，需要减少 left 指针的求和/计数；\n在第二重 while 循环之后，成功找到了一个符合题意的 [left, right] 区间，题目要求最大的区间长度，因此更新 res 为 max(res, 当前区间的长度) 。\nright 指针每次向右移动一步，开始探索新的区间。\n模板中的 sums 需要根据题目意思具体去修改，本题是求和题目因此把sums 定义成整数用于求和；如果是计数题目，就需要改成字典用于计数。当左右指针发生变化的时候，都需要更新 sums 。\n\n另外一个需要根据题目去修改的是内层 while 循环的判断条件，即： 区间[left, right]不符合题意 。对于本题而言，就是该区内的和 sums 超过了 maxCost 。\n\n+++\n\n\n\n作者：负雪明烛\n链接：https://leetcode.cn/problems/get-equal-substrings-within-budget/solutions/592354/fen-xiang-zhen-cang-de-hua-dong-chuang-k-e3rd/\n:::\n\n\n\n\n\n### [424. 替换后的最长重复字符](https://leetcode.cn/problems/longest-repeating-character-replacement/)\n\n给你一个字符串 `s` 和一个整数 `k` 。你可以选择字符串中的任一字符，并将其更改为任何其他大写英文字符。该操作最多可执行 `k` 次。\n\n在执行上述操作后，返回 *包含相同字母的最长子字符串的长度。*\n\n+++info 示例\n\n**示例 1：**\n\n```\n输入：s = \"ABAB\", k = 2\n输出：4\n解释：用两个'A'替换为两个'B',反之亦然。\n```\n\n**示例 2：**\n\n```\n输入：s = \"AABABBA\", k = 1\n输出：4\n解释：\n将中间的一个'A'替换为'B',字符串变为 \"AABBBBA\"。\n子串 \"BBBB\" 有最长重复字母, 答案为 4。\n可能存在其他的方法来得到同样的结果。\n```\n\n+++\n\n:::info no-icon\n\n本题解根据常规的滑动窗口思路进行解题，不需要任何的技巧。\n滑动窗口法是指通过Left以及Right指针来框定一个窗口，当在窗口内的字符串满足题目要求则记录下当前窗口长度并进一步扩张寻找更长的窗口，若不满足则进行窗口平移。\n题目中给定的K值是让我们在选定有效窗口时的要求放宽了：\n\n当K=0时，要求滑动窗口内部的所有字母都必须相同；\n而当K>0时，要求滑动窗口内最多替换K次使得所有字母都必须相同。这里有一个关键点，即我们将当前滑动窗口内出现次数最多的字母作为基准字母（Benchmark），那么其他不一样的字母(Others)都选择替换操作即可以最小的代价转换为全部相同的字母。\n因此，我们首先通过一个数组(count)记录所有字母在当前窗口出现的次数，通过Max函数选择窗口内的基准字母，然后其他字母出现的次数为Sum(count)-Max(count)，通过与K进行比较，即可知道当前窗口是否有效，下一步是继续扩张还是位移。\n\n作者：Derrick.S\n链接：https://leetcode.cn/problems/longest-repeating-character-replacement/solutions/799013/hua-dong-chuang-kou-fa-jian-dan-yi-dong-3qwel/\n\n```python\nclass Solution:\n    def characterReplacement(self, s: str, k: int) -> int:\n        count = [0 for _ in range(26)]  #记录当前窗口的字母出现次数\n        \n        left = 0    #滑动窗口左边界\n        right = 0   #滑动窗口右边界\n        retval = 0  #最长窗口长度\n        \n        while right < len(s):\n            count[ord(s[right])-ord('A')] += 1  \n            benchmark = max(count)              #选择出现次数最多的字母为基准 \n            others = sum(count) - benchmark     #则其他字母需要通过替换操作来变为基准\n            if others <= k:                     #通过与K进行比较来判断窗口是进行扩张？\n                right += 1\n                retval = max(retval, right-left)#记录当前有效窗口长度\n            else:                               #通过与K进行比较来判断窗口还是进行位移？\n                count[ord(s[left])-ord('A')] -= 1\n                left += 1\n                right += 1                      #这里注意：位移操作需要整个向右移，不仅仅只是left向右\n        \n        return retval                           #返回最长窗口长度\n        \n```\n\n:::\n\n## 前缀和\n\n### [724. 寻找数组的中心下标](https://leetcode.cn/problems/find-pivot-index/)\n\n给你一个整数数组 `nums` ，请计算数组的 **中心下标** 。\n\n数组 **中心下标** 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。\n\n如果中心下标位于数组最左端，那么左侧数之和视为 `0` ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。\n\n如果数组有多个中心下标，应该返回 **最靠近左边** 的那一个。如果数组不存在中心下标，返回 `-1` 。\n\n+++info 示例\n\n**示例 1：**\n\n```\n输入：nums = [1, 7, 3, 6, 5, 6]\n输出：3\n解释：\n中心下标是 3 。\n左侧数之和 sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11 ，\n右侧数之和 sum = nums[4] + nums[5] = 5 + 6 = 11 ，二者相等。\n```\n\n**示例 2：**\n\n```\n输入：nums = [1, 2, 3]\n输出：-1\n解释：\n数组中不存在满足此条件的中心下标。\n```\n\n**示例 3：**\n\n```\n输入：nums = [2, 1, -1]\n输出：0\n解释：\n中心下标是 0 。\n左侧数之和 sum = 0 ，（下标 0 左侧不存在元素），\n右侧数之和 sum = nums[1] + nums[2] = 1 + -1 = 0 。\n```\n\n+++\n\n:::info no-icon\n\n设 nums 的元素之和为 s。\n\n设中心下标为 i，其左侧元素和为 $leftS=nums[0]+nums[1]+⋯+nums[i−1]$，那么右侧元素和为 $s−nums[i]−leftS$。\n\n由于左侧元素和等于右侧元素和，所以有\n\n$$leftS=s−nums[i]−leftS$$\n即\n\n$$2⋅leftS=s−nums[i]$$\n从左到右遍历数组，一边遍历，一边累加元素更新 leftS。每次累加前，检查是否满足上式，满足则返回 i。\n\n如果不存在这样的 i，返回 −1。\n\n作者：灵茶山艾府\n链接：https://leetcode.cn/problems/find-pivot-index/solutions/2834687/jian-ji-xie-fa-o1-e-wai-kong-jian-python-tz0p/\n\n```python\nclass Solution:\n    def pivotIndex(self, nums: List[int]) -> int:\n        s = sum(nums)\n        sum_left = 0\n        for i, num in enumerate(nums):\n            if 2*sum_left == s - num:\n                return i\n            sum_left += num\n        return -1\n```\n\n:::\n\n### [2352. 相等行列对](https://leetcode.cn/problems/equal-row-and-column-pairs/)\n\n给你一个下标从 **0** 开始、大小为 `n x n` 的整数矩阵 `grid` ，返回满足 `Ri` 行和 `Cj` 列相等的行列对 `(Ri, Cj)` 的数目*。*\n\n如果行和列以相同的顺序包含相同的元素（即相等的数组），则认为二者是相等的。\n\n::: info no-icon\n\n用哈希表统计每行出现的次数，然后遍历列，累加哈希表中列出现的次数。\n\n\n\n作者：灵茶山艾府\n链接：https://leetcode.cn/problems/equal-row-and-column-pairs/solutions/1694047/ha-xi-biao-python-liang-xing-by-endlessc-ljae/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n;;;id2 Demo 1\n\n```python\nclass Solution:\n    def equalPairs(self, grid: List[List[int]]) -> int:\n        cnt = Counter(tuple(row) for row in grid)\n        return sum(cnt[col] for col in zip(*grid))\n\n```\n\n;;;\n\n;;;id2 Demo2\n\n```python\nclass Solution:\n    def equalPairs(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        count = {}\n        result = 0\n        for i in range(n):\n            count[tuple(grid[i])] = count.get(tuple(grid[i]), 0) + 1\n        print(count)\n        for j in zip(*grid):\n            print(j)\n            result += count.get(j,0)\n            # print(grid[:][j], grid[j][:])\n        return result\n```\n\n;;;\n\n:::\n\n## 栈与队列\n\n### [735. 小行星碰撞](https://leetcode.cn/problems/asteroid-collision/)\n\n给定一个整数数组 `asteroids`，表示在同一行的小行星。数组中小行星的索引表示它们在空间中的相对位置。\n\n对于数组中的每一个元素，其绝对值表示小行星的大小，正负表示小行星的移动方向（正表示向右移动，负表示向左移动）。每一颗小行星以相同的速度移动。\n\n找出碰撞后剩下的所有小行星。碰撞规则：两个小行星相互碰撞，较小的小行星会爆炸。如果两颗小行星大小相同，则两颗小行星都会爆炸。两颗移动方向相同的小行星，永远不会发生碰撞。\n\n+++info 示例\n\n**示例 1：**\n\n```\n输入：asteroids = [5,10,-5]\n输出：[5,10]\n解释：10 和 -5 碰撞后只剩下 10 。 5 和 10 永远不会发生碰撞。\n```\n\n**示例 2：**\n\n```\n输入：asteroids = [8,-8]\n输出：[]\n解释：8 和 -8 碰撞后，两者都发生爆炸。\n```\n\n**示例 3：**\n\n```\n输入：asteroids = [10,2,-5]\n输出：[10]\n解释：2 和 -5 发生碰撞后剩下 -5 。10 和 -5 发生碰撞后剩下 10 。\n```\n\n+++\n\n:::info no-icon\n\n这道栈的题目难点应该主要是在分析场景上了。\n我们需要明确什么时候无脑入栈，什么时候需要判断，理解这两点就可以轻松解题了。\n首先，循环每一个元素时，在什么情况下无脑入栈呢？\n\n栈为空\n栈顶元素为负数(下一个为负数则一起向左，下一个为正数则分向两边)\n当前元素为正数（栈顶为正一起向右，栈顶为负分向两边）\n下来，我们需要看碰撞的场景又细分为什么情况：\n\n栈顶元素大于abs(当前元素)，当前元素被撞毁\n栈顶元素等于abs(当前元素)，栈顶弹出和当前元素抵消\n栈顶元素小于abs(当前元素)，栈顶弹出，并与新栈顶完成上述判断\n最终返回栈即可。\n\n作者：清风Python\n链接：https://leetcode.cn/problems/asteroid-collision/solutions/994100/735xing-xing-peng-zhuang-ji-yu-zhan-qu-f-xpd1/\n\n```python\nclass Solution:\n    def asteroidCollision(self, asteroids: List[int]) -> List[int]:\n        stack, index = [], 0\n        while index < len(asteroids):\n            ast = asteroids[index]\n            if ast > 0 or len(stack)==0 or stack[-1]<0: stack.append(ast)\n            elif stack[-1] <= - ast:\n                if stack.pop(-1) < - ast:\n                    continue\n            index += 1\n        return stack\n```\n\n:::\n\n### [394. 字符串解码](https://leetcode.cn/problems/decode-string/)\n\n给定一个经过编码的字符串，返回它解码后的字符串。\n\n编码规则为: `k[encoded_string]`，表示其中方括号内部的 `encoded_string` 正好重复 `k` 次。注意 `k` 保证为正整数。\n\n你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。\n\n此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 `k` ，例如不会出现像 `3a` 或 `2[4]` 的输入。\n\n测试用例保证输出的长度不会超过 `105`。\n\n+++info 示例\n\n**示例 1：**\n\n```\n输入：s = \"3[a]2[bc]\"\n输出：\"aaabcbc\"\n```\n\n**示例 2：**\n\n```\n输入：s = \"3[a2[c]]\"\n输出：\"accaccacc\"\n```\n\n**示例 3：**\n\n```\n输入：s = \"2[abc]3[cd]ef\"\n输出：\"abcabccdcdcdef\"\n```\n\n**示例 4：**\n\n```\n输入：s = \"abc3[cd]xyz\"\n输出：\"abccdcdcdxyz\"\n```\n\n+++\n\n:::info no-icon\n\n+ 本题难点在于括号内嵌套括号，需要从内向外生成与拼接字符串，这与栈的先入后出特性对应。\n\n+ 算法流程：\n\n  + 构建辅助栈 stack， 遍历字符串 s 中每个字符 c；\n\n    + 当 c 为数字时，将数字字符转化为数字 multi，用于后续倍数计算；\n\n    + 当 c 为字母时，在 res 尾部添加 c；\n\n    + 当 c 为 [ 时，将当前 multi 和 res 入栈，并分别置空置 0：\n      记录此 [ 前的临时结果 res 至栈，用于发现对应 ] 后的拼接操作；\n      记录此 [ 前的倍数 multi 至栈，用于发现对应 ] 后，获取 multi × [...] 字符串。\n      进入到新 [ 后，res 和 multi 重新记录。\n\n    + 当 c 为 ] 时，stack 出栈，拼接字符串 res = last_res + cur_multi * res，其中:\n      + last_res是上个 [ 到当前 [ 的字符串，例如 \"3[a2[c]]\" 中的 a；\n      + cur_multi是当前 [ 到 ] 内字符串的重复倍数，例如 \"3[a2[c]]\" 中的 2。\n\n  + 返回字符串 res。\n\n作者：Krahets\n链接：https://leetcode.cn/problems/decode-string/solutions/19447/decode-string-fu-zhu-zhan-fa-di-gui-fa-by-jyd/\n\n```python\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        result = ''\n        stack = []\n        res, num = '', 0\n        for c in s:\n            if c == '[':\n                stack.append((res, num))\n                res, num = '', 0\n            elif c == ']':\n                out_res, out_num = stack.pop()\n                res = out_res + out_num*res\n            elif '0'<= c <= '9':\n                num = num*10 + int(c)\n            else:\n                res += c\n        return res\n```\n\n:::\n\n### [649. Dota2 参议院](https://leetcode.cn/problems/dota2-senate/)\n\nDota2 的世界里有两个阵营：`Radiant`（天辉）和 `Dire`（夜魇）\n\nDota2 参议院由来自两派的参议员组成。现在参议院希望对一个 Dota2 游戏里的改变作出决定。他们以一个基于轮为过程的投票进行。在每一轮中，每一位参议员都可以行使两项权利中的 **一** 项：\n\n- **禁止一名参议员的权利**：参议员可以让另一位参议员在这一轮和随后的几轮中丧失 **所有的权利** 。\n- **宣布胜利**：如果参议员发现有权利投票的参议员都是 **同一个阵营的** ，他可以宣布胜利并决定在游戏中的有关变化。\n\n给你一个字符串 `senate` 代表每个参议员的阵营。字母 `'R'` 和 `'D'`分别代表了 `Radiant`（天辉）和 `Dire`（夜魇）。然后，如果有 `n` 个参议员，给定字符串的大小将是 `n`。\n\n以轮为基础的过程从给定顺序的第一个参议员开始到最后一个参议员结束。这一过程将持续到投票结束。所有失去权利的参议员将在过程中被跳过。\n\n假设每一位参议员都足够聪明，会为自己的政党做出最好的策略，你需要预测哪一方最终会宣布胜利并在 Dota2 游戏中决定改变。输出应该是 `\"Radiant\"` 或 `\"Dire\"` 。\n\n+++info 示例\n\n**示例 1：**\n\n```\n输入：senate = \"RD\"\n输出：\"Radiant\"\n解释：\n第 1 轮时，第一个参议员来自 Radiant 阵营，他可以使用第一项权利让第二个参议员失去所有权利。\n这一轮中，第二个参议员将会被跳过，因为他的权利被禁止了。\n第 2 轮时，第一个参议员可以宣布胜利，因为他是唯一一个有投票权的人。\n```\n\n**示例 2：**\n\n```\n输入：senate = \"RDD\"\n输出：\"Dire\"\n解释：\n第 1 轮时，第一个来自 Radiant 阵营的参议员可以使用第一项权利禁止第二个参议员的权利。\n这一轮中，第二个来自 Dire 阵营的参议员会将被跳过，因为他的权利被禁止了。\n这一轮中，第三个来自 Dire 阵营的参议员可以使用他的第一项权利禁止第一个参议员的权利。\n因此在第二轮只剩下第三个参议员拥有投票的权利,于是他可以宣布胜利\n```\n\n+++\n\n:::info no-icon\n\n这道题模拟了一个游戏过程，最终当有权利投票的参议员都是 同一个阵营的 ，这个阵营即获胜。\n\n那么两个阵营的每个参议员为了获胜，当他拥有权力的时候，一定是会将自己之后首个对立阵营的参议员的权力禁止掉。【这就是每一位参议会为自己的政党做出最好的策略】。请注意：当之后没有对立阵营的参议员的时候，相当于将之前的参议员加到其之后。\n\n![500](2025-08-15-Leetcode/649-01.png)\n\n![500](2025-08-15-Leetcode/649-02.png)\n\n![500](2025-08-15-Leetcode/649-03.png)\n\n![500](2025-08-15-Leetcode/649-04.png)\n\n![500](2025-08-15-Leetcode/649-05.png)\n\n```python\nclass Solution:\n    def predictPartyVictory(self, senate: str) -> str:\n        radiants, dires = [], []\n        n = len(senate)\n        for i, se in enumerate(senate):\n            if se == 'R': radiants.append(i)\n            else: dires.append(i)\n        while radiants and dires:\n            if radiants[0] < dires[0]:\n                dires.pop(0)\n                radiants.append(radiants.pop(0) + n)\n            else:\n                radiants.pop(0)\n                dires.append(dires.pop(0) + n)\n        return \"Radiant\" if radiants else 'Dire'\n        \n```\n\n\n\n作者：画图小匠\n链接：https://leetcode.cn/problems/dota2-senate/solutions/2862115/javapython3cdui-lie-mo-ni-jin-zhi-zhi-ho-l4pb/\n\n:::\n\n## 链表\n\n:::info no-icon\n\n1. 找中间节点：快慢指针\n\n+ 中间值左侧：需要加一个dummy节点。\n\n  ```python\n  dummy = ListNode(0, head)\n  slow, fast = dummy, dummy\n  while fast and fast.next:\n      fast = fast.next.next\n      if not fast: break\n      slow = slow.next\n  ```\n\n+ 中间值右侧：直接从head开始\n\n  ```python\n  slow, fast = head, head\n  while fast and fast.next:\n      fast = fast.next.next\n      if not fast: break\n      slow = slow.next\n  ```\n\n  \n\n:::\n\n### [2095. 删除链表的中间节点](https://leetcode.cn/problems/delete-the-middle-node-of-a-linked-list/)\n\n给你一个链表的头节点 `head` 。**删除** 链表的 **中间节点** ，并返回修改后的链表的头节点 `head` 。\n\n长度为 `n` 链表的中间节点是从头数起第 `⌊n / 2⌋` 个节点（下标从 **0** 开始），其中 `⌊x⌋` 表示小于或等于 `x` 的最大整数。\n\n- 对于 `n` = `1`、`2`、`3`、`4` 和 `5` 的情况，中间节点的下标分别是 `0`、`1`、`1`、`2` 和 `2` 。\n\n :::info no-icon\n\n本题可遍历计数先得到 n，再遍历一次删除指定节点即可，这很简单。本篇讲的是快慢指针这种方法。\n\n我们令 fast 和 slow 这两个指针同时前进，fast 每次移动两格，slow 每次移动一格，在检测到 `fast.next == null` 或者 `fast.next.next == null` 时退出循环。\n\n引入一个哑巴节点 dummy 便于处理，考虑循环停止时的场景。\n为方便考虑，本篇题解认为原链表下标从 1 开始，需要删除第 $⌊\\frac{n}{2}⌋+1$ 个节点。\n\n+ 如果 *n* 为偶数，如下所示。设 *n*=2*k*，fast 停在第 2*k* 个节点，slow 停在第 *k* 即 $⌊\\frac{n}{2}⌋$ 个节点。\n\n![300](2025-08-15-Leetcode/2095-01.png)\n\n+ 如果 *n* 为奇数，如下所示，设 *n*=2*k*+1。fast 停在第 2*k* 个节点，slow 停在第 *k* 即 $⌊\\frac{n}{2}⌋$ 个节点。\n\n![300](2025-08-15-Leetcode/2095-02.png)\n\n所以退出循环时 slow 一定停在 $⌊\\frac{n}{2}⌋$ 个节点，令 `slow.next = slow.next.next` 即删除了 $⌊\\frac{n}{2}⌋+1$ 个节点。\n\n\n\n作者：Shawxing精讲算法\n链接：https://leetcode.cn/problems/delete-the-middle-node-of-a-linked-list/solutions/2844229/jian-ming-yan-jin-de-kuai-man-zhi-zhen-f-84sx/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteMiddle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        zero = ListNode(0, head)\n        slow, fast = zero, zero\n        while fast and fast.next:\n            fast = fast.next.next\n            if not fast: break\n            slow = slow.next\n        slow.next = slow.next.next\n        return zero.next\n\n        \n```\n\n:::\n\n### [328. 奇偶链表](https://leetcode.cn/problems/odd-even-linked-list/)\n\n给定单链表的头节点 `head` ，将所有索引为奇数的节点和索引为偶数的节点分别分组，保持它们原有的相对顺序，然后把偶数索引节点分组连接到奇数索引节点分组之后，返回重新排序的链表。\n\n**第一个**节点的索引被认为是 **奇数** ， **第二个**节点的索引为 **偶数** ，以此类推。\n\n请注意，偶数组和奇数组内部的相对顺序应该与输入时保持一致。\n\n你必须在 `O(1)` 的额外空间复杂度和 `O(n)` 的时间复杂度下解决这个问题。\n\n:::info no-icon\n\n如果链表为空，则直接返回链表。\n\n对于原始链表，每个节点都是奇数节点或偶数节点。头节点是奇数节点，头节点的后一个节点是偶数节点，相邻节点的奇偶性不同。因此可以将奇数节点和偶数节点分离成奇数链表和偶数链表，然后将偶数链表连接在奇数链表之后，合并后的链表即为结果链表。\n\n原始链表的头节点 head 也是奇数链表的头节点以及结果链表的头节点，head 的后一个节点是偶数链表的头节点。令 evenHead = head.next，则 evenHead 是偶数链表的头节点。\n\n维护两个指针 odd 和 even 分别指向奇数节点和偶数节点，初始时 odd = head，even = evenHead。通过迭代的方式将奇数节点和偶数节点分离成两个链表，每一步首先更新奇数节点，然后更新偶数节点。\n\n+ 更新奇数节点时，奇数节点的后一个节点需要指向偶数节点的后一个节点，因此令 odd.next = even.next，然后令 odd = odd.next，此时 odd 变成 even 的后一个节点。\n\n+ 更新偶数节点时，偶数节点的后一个节点需要指向奇数节点的后一个节点，因此令 even.next = odd.next，然后令 even = even.next，此时 even 变成 odd 的后一个节点。\n\n![400](2025-08-15-Leetcode/328-01.png)\n\n![400](2025-08-15-Leetcode/328-02.png)\n\n![400](2025-08-15-Leetcode/328-03.png)\n\n![400](2025-08-15-Leetcode/328-04.png)\n\n在上述操作之后，即完成了对一个奇数节点和一个偶数节点的分离。重复上述操作，直到全部节点分离完毕。全部节点分离完毕的条件是 even 为空节点或者 even.next 为空节点，此时 odd 指向最后一个奇数节点（即奇数链表的最后一个节点）。\n\n最后令 odd.next = evenHead，将偶数链表连接在奇数链表之后，即完成了奇数链表和偶数链表的合并，结果链表的头节点仍然是 head。\n\n作者：力扣官方题解\n链接：https://leetcode.cn/problems/odd-even-linked-list/solutions/482737/qi-ou-lian-biao-by-leetcode-solution/\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def oddEvenList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head: return head\n        even_head = head.next\n        odd, even = head, even_head\n        while even and even.next:\n            odd.next = even.next\n            odd = odd.next\n            even.next = odd.next\n            even = even.next\n        odd.next = even_head\n        return head\n```\n\n:::\n\n### [2130. 链表最大孪生和](https://leetcode.cn/problems/maximum-twin-sum-of-a-linked-list/)\n\n在一个大小为 `n` 且 `n` 为 **偶数** 的链表中，对于 `0 <= i <= (n / 2) - 1` 的 `i` ，第 `i` 个节点（下标从 **0** 开始）的孪生节点为第 `(n-1-i)` 个节点 。\n\n- 比方说，`n = 4` 那么节点 `0` 是节点 `3` 的孪生节点，节点 `1` 是节点 `2` 的孪生节点。这是长度为 `n = 4` 的链表中所有的孪生节点。\n\n**孪生和** 定义为一个节点和它孪生节点两者值之和。\n\n给你一个长度为偶数的链表的头节点 `head` ，请你返回链表的 **最大孪生和** 。\n\n +++info 示例\n\n**示例 1：**\n\n![300](2025-08-15-Leetcode/2130-01.png)\n\n```\n输入：head = [5,4,2,1]\n输出：6\n解释：\n节点 0 和节点 1 分别是节点 3 和 2 的孪生节点。孪生和都为 6 。\n链表中没有其他孪生节点。\n所以，链表的最大孪生和是 6 。\n```\n\n**示例 2：**\n\n![300](2025-08-15-Leetcode/2130-02.png)\n\n```\n输入：head = [4,2,2,3]\n输出：7\n解释：\n链表中的孪生节点为：\n- 节点 0 是节点 3 的孪生节点，孪生和为 4 + 3 = 7 。\n- 节点 1 是节点 2 的孪生节点，孪生和为 2 + 2 = 4 。\n所以，最大孪生和为 max(7, 4) = 7 。\n```\n\n+++\n\n:::info no-icon\n\n**核心思想：寻找链表中间值**\n\n以下两种方法的快慢指针有所不同，参见[链表](#链表)。\n\n;;;id3 快慢指针+反转链表\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def pairSum(self, head: Optional[ListNode]) -> int:\n        mid = self.middleNode(head)\n        head2 = self.reverseNode(mid)\n        result = -inf\n        while head2:\n            result = max(result, head.val + head2.val)\n            head = head.next\n            head2 = head2.next\n        return result\n\n    def reverseNode(self, head):\n        cur, pre = head, None\n        while cur:\n            nxt = cur.next\n            cur.next = pre\n            pre = cur\n            cur = nxt\n        return pre\n        \n    def middleNode(self, head):\n        slow = fast = head\n        while fast and fast.next:\n            fast = fast.next.next\n            slow = slow.next\n        return slow\n        \n```\n\n;;;\n\n;;;id3 快慢指针+入栈\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def pairSum(self, head: Optional[ListNode]) -> int:\n        dummy = ListNode(next=head)\n        slow, fast = dummy, dummy\n        stack = []\n        result = -inf\n        while fast and fast.next:\n            fast = fast.next.next\n            slow = slow.next\n            stack.append(slow.val)\n        print(slow.val)\n        while slow.next:\n            slow = slow.next\n            result = max(result, stack.pop(-1)+slow.val)\n        return result\n        \n```\n\n;;;\n\n:::\n\n## 二叉树\n\n:::info no-icon\n\n1. [看到递归就晕？带你理解递归的本质！【基础算法精讲 09】_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1UD4y1Y769/?vd_source=9b05037c77ec940dae3af8e69969e0d6)\n\n\n\n:::\n\n\n\n### [437. 路径总和 III](https://leetcode.cn/problems/path-sum-iii/)（与[560. 和为 K 的子数组](https://leetcode.cn/problems/subarray-sum-equals-k/)方法相似）\n\n给定一个二叉树的根节点 `root` ，和一个整数 `targetSum` ，求该二叉树里节点值之和等于 `targetSum` 的 **路径** 的数目。\n\n**路径** 不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。\n\n+++info 示例\n\n**示例 1：**\n\n![300](2025-08-15-Leetcode/437-01.png)\n\n```\n输入：root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8\n输出：3\n解释：和等于 8 的路径有 3 条，如图所示。\n```\n\n+++\n\n:::info no-icon\n\n如果二叉树是一条链，本题就和 560. 和为 K 的子数组 完全一样了：统计有多少个非空连续子数组的元素和恰好等于 targetSum。所以你必须先弄明白 560 题（特殊情况），再来做本题（一般情况）。560 题的做法见 我的题解。\n\n这两题的联系如下：\n\n| 560 题                                     | 本题                                                         |\n| ------------------------------------------ | ------------------------------------------------------------ |\n| 连续子数组                                 | 方向向下的路径                                               |\n| 前缀                                       | 从根节点开始的路径                                           |\n| 做法：枚举子数组右端点，统计有多少个左端点 | 做法：枚举路径的终点，统计有多少个起点<br/>我们要解决的问题是：DFS 遍历这棵树，遍历到节点 node 时，假设 node 是路径的终点，那么有多少个起点，满足起点到终点 node 的路径总和恰好等于 targetSum？ |\n\n和 560 题一样的套路：一边遍历二叉树，一边用哈希表 cnt 统计前缀和（从根节点开始的路径和）的出现次数。设从根到终点 node 的路径和为 s，那么起点的个数就是 cnt[s−targetSum]，加入答案。对比 560 题，我们在枚举子数组的右端点（终点），统计有多少个左端点（起点），做法完全一致。\n\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> int:\n        ans = 0\n        hp = collections.defaultdict(int)\n        hp[0] = 1\n        def dfs(node, s):\n            if not node: return \n            nonlocal ans\n            s += node.val\n            ans += hp[s - targetSum]\n\n            hp[s] += 1\n            dfs(node.left, s)\n            dfs(node.right, s)\n            hp[s] -= 1\n        dfs(root, 0)\n        return ans\n```\n\n作者：灵茶山艾府\n链接：https://leetcode.cn/problems/path-sum-iii/solutions/2784856/zuo-fa-he-560-ti-shi-yi-yang-de-pythonja-fmzo/\n\n:::\n\n### [1372. 二叉树中的最长交错路径](https://leetcode.cn/problems/longest-zigzag-path-in-a-binary-tree/)\n\n给你一棵以 `root` 为根的二叉树，二叉树中的交错路径定义如下：\n\n- 选择二叉树中 **任意** 节点和一个方向（左或者右）。\n- 如果前进方向为右，那么移动到当前节点的的右子节点，否则移动到它的左子节点。\n- 改变前进方向：左变右或者右变左。\n- 重复第二步和第三步，直到你在树中无法继续移动。\n\n交错路径的长度定义为：**访问过的节点数目 - 1**（单个节点的路径长度为 0 ）。\n\n请你返回给定树中最长 **交错路径** 的长度。\n\n+++info 示例\n\n**示例 1：**\n\n![100](2025-08-15-Leetcode/1372-01.png)\n\n```\n输入：root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1,null,1]\n输出：3\n解释：蓝色节点为树中最长交错路径（右 -> 左 -> 右）。\n```\n\n**示例 2：**\n\n![100](2025-08-15-Leetcode/1372-02.png)\n\n```\n输入：root = [1,1,1,null,1,null,null,1,1,null,1]\n输出：4\n解释：蓝色节点为树中最长交错路径（左 -> 右 -> 左 -> 右）。\n```\n\n+++\n\n:::info no-icon\n\n在 DFS 的过程中，每次我们都把当前点的 len 参数和答案 maxAns 打擂台，这样可以比出一个最大的。然后我们根据 dir 分类讨论。如果当前点应该向左且可以向左，那么就让他向左走一步，新的 len 是当前的 len 加一。如果的的点应该向左但是却没有左子树呢？很无奈那就只能向右了，这个时候 len 的值应该「重置」。\n\n思考：「重置」为什么是把 len 变成 1 而不是 0？ 因为当前的点下传到它的子节点的时候已经走了一条长度为 1 的边。那么为什么 main 函数中传入的 len 值是 0 而不是 1 呢？ 因为 main 函数中的 root 是没有父亲节点的，所以当前已经走过的路为 0。\n\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def longestZigZag(self, root: Optional[TreeNode]) -> int:\n        result = 0\n        def search(node, mode, l):\n            if not node:return \n            nonlocal result\n            result = max(result, l)\n            if mode == 'left': \n                search(node.right, 'right',l+1)\n                search(node.left, 'left', 1)\n            elif mode == 'right': \n                search(node.left, 'left', l+1)\n                search(node.right, 'right', 1)\n        search(root,'left', 0)\n        search(root, 'right', 0)\n        return result\n```\n\n作者：力扣官方题解\n链接：https://leetcode.cn/problems/longest-zigzag-path-in-a-binary-tree/solutions/147425/er-cha-shu-zhong-de-zui-chang-jiao-cuo-lu-jing-b-2/\n\n:::\n\n### [236. 二叉树的最近公共祖先](https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/)\n\n给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。\n\n[百度百科](https://baike.baidu.com/item/最近公共祖先/8918834?fr=aladdin)中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（**一个节点也可以是它自己的祖先**）。”\n\n +++info 示例\n\n**示例 1：**\n\n![200](2025-08-15-Leetcode/236-01.png)\n\n```\n输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n输出：3\n解释：节点 5 和节点 1 的最近公共祖先是节点 3 。\n```\n\n**示例 2：**\n\n![200](2025-08-15-Leetcode/236-02.png)\n\n```\n输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n输出：5\n解释：节点 5 和节点 4 的最近公共祖先是节点 5 。因为根据定义最近公共祖先节点可以为节点本身。\n```\n\n+++\n\n:::info no-icon\n\n[二叉树的最近公共祖先【基础算法精讲 12】_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1W44y1Z7AR/?vd_source=9b05037c77ec940dae3af8e69969e0d6)\n\n![500](2025-08-15-Leetcode/236-03.png)\n\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        if root == None or root == p or root == q:\n            return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        if right and left: return root\n        return left or right\n        \n```\n\n:::\n\n### [199. 二叉树的右视图](https://leetcode.cn/problems/binary-tree-right-side-view/)\n\n给定一个二叉树的 **根节点** `root`，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。\n\n+++info 示例\n\n**示例 1：**\n\n**输入：** root = [1,2,3,null,5,null,4]\n\n**输出：**[1,3,4]\n\n**解释：**\n\n![300](2025-08-15-Leetcode/199-01.png)\n\n**示例 2：**\n\n**输入：**root = [1,2,3,4,null,null,null,5]\n\n**输出：**[1,3,4,5]\n\n**解释：**\n\n![300](2025-08-15-Leetcode/199-02.png)\n\n**示例 3：**\n\n**输入：**root = [1,null,3]\n\n**输出：**[1,3]\n\n+++\n\n:::info no-icon\n\n;;;id4 深度优先算法\n\n**视频讲解**：[【基础算法精讲 10】](https://www.bilibili.com/video/BV18M411z7bb/)\n\n**思路**：先递归右子树，再递归左子树，当某个深度首次到达时，对应的节点就在右视图中。\n\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:\n        result = []\n        def dfs(root, depth):\n            if not root: return \n            if depth == len(result):\n                result.append(root.val)\n            dfs(root.right, depth + 1)\n            dfs(root.left, depth + 1)\n        dfs(root, 0)\n        return result\n```\n\n作者：灵茶山艾府\n链接：https://leetcode.cn/problems/binary-tree-right-side-view/solutions/2015061/ru-he-ling-huo-yun-yong-di-gui-lai-kan-s-r1nc/\n\n;;;\n\n;;;id4 层序遍历\n\n**思路**：将每层的元素加入队列，从右到左依序遍历每层。\n\n```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:\n        if not root: return []\n        result = []\n        que = [root]\n        while len(que) > 0:\n            result.append(que[0].val)\n            for _ in range(len(que)):\n                node = que.pop(0)\n                if node.right: que.append(node.right)\n                if node.left: que.append(node.left)\n        return result\n```\n\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["技能工具"]},{"title":"Tucker分解","url":"/2025/07/17/2025-07-17-Tucker分解/","content":"\nTucker分解\n\n<!-- more -->\n\n# Tucker分解\n\n------\n\n## 什么是 Tucker 分解？\n\nTucker 分解是 **张量（tensor）分解** 的一种，是矩阵 SVD（奇异值分解）在更高阶上的推广。\n\n它的核心思想是：\n\n> 用一个小的 **核心张量** $\\mathcal{G}$，以及几个矩阵将一个大的原始张量表示出来，达到**降维、压缩、解耦**的效果。\n\n------\n\n## 张量与模式乘积（mode-n product）\n\n- **矩阵是二维张量**，例如： $A \\in \\mathbb{R}^{m \\times n}$.\n- **张量是更高维的数组**，例如：\n  - 三阶张量 $\\mathcal{X} \\in \\mathbb{R}^{I \\times J \\times K}$.\n\n### 模式-n乘积（Mode-n product）\n\n给定三阶张量 $\\mathcal{X} \\in \\mathbb{R}^{I \\times J \\times K}$，和矩阵 $U \\in \\mathbb{R}^{L \\times I}$，那么：\n\n$$\\mathcal{Y} = \\mathcal{X} \\times_1 U \\in \\mathbb{R}^{L \\times J \\times K}$$\n\n这表示对第一个维度（mode-1）做矩阵变换。其本质是：\n\n> 把张量的第1个维度的每个“切片”乘以 U\n\n------\n\n## Tucker 分解的数学定义\n\n设有一个三阶张量：\n\n$$\\mathcal{X} \\in \\mathbb{R}^{I \\times J \\times K}$$\n\nTucker 分解将其表示为：\n\n$$\\mathcal{X} \\approx \\mathcal{G} \\times_1 A \\times_2 B \\times_3 C$$\n\n其中：\n\n- $\\mathcal{G} \\in \\mathbb{R}^{R_1 \\times R_2 \\times R_3}$：核心张量（压缩表示）\n- $A \\in \\mathbb{R}^{I \\times R_1}$、$B \\in \\mathbb{R}^{J \\times R_2}$、$C \\in \\mathbb{R}^{K \\times R_3}$：模式矩阵，控制每个维度的投影\n- $\\times_n$：表示对张量的第 n 维进行矩阵乘法\n\n> 总结一句话：Tucker 分解就是：\n>\n> **“把高维张量压缩成小的核心张量 + 每一维的线性变换矩阵”**\n\n------\n\n## 图示理解（示意图）\n\n```\n            Tucker Decomposition\n           ┌───────────────┐\n           │  Tensor X     │         原始张量 X ∈ ℝ^{I×J×K}\n           └────┬──────────┘\n                ↓ Tucker分解\n       ┌────────┴────────┐\n       ↓        ↓        ↓\n  Matrix A   Matrix B   Matrix C    模式矩阵（每一维的降维）\n   (I×R1)     (J×R2)     (K×R3)\n       ↓        ↓        ↓\n            Core tensor G           核心张量 ∈ ℝ^{R1×R2×R3}\n```\n\n------\n\n## 为什么 Tucker 有用？\n\nTucker 分解可以：\n\n1. **降低维度/压缩张量**：原始张量参数量为 $I \\times J \\times K$，而 Tucker 分解后是：\n\n   $$I \\cdot R_1 + J \\cdot R_2 + K \\cdot R_3 + R_1 \\cdot R_2 \\cdot R_3$$\n\n   通常远小于原始张量。\n\n2. **捕捉模态之间的交互关系**：核心张量 $\\mathcal{G}$ 建模了压缩后表示之间的高阶交互。\n\n3. **在多模态场景中用于融合**：比如图像、文本输入，分别编码后送入 Tucker 融合模块。\n\n------\n\n## 举个数值例子\n\n设有张量 $\\mathcal{X} \\in \\mathbb{R}^{4 \\times 3 \\times 2}$，我们用 Tucker 分解它：\n\n- 模式矩阵：\n  - $A \\in \\mathbb{R}^{4 \\times 2}$.\n  - $B \\in \\mathbb{R}^{3 \\times 2}$.\n  - $C \\in \\mathbb{R}^{2 \\times 1}$.\n- 核心张量 $\\mathcal{G} \\in \\mathbb{R}^{2 \\times 2 \\times 1}$.\n\n合成的张量为：\n\n$$\\mathcal{X} \\approx \\mathcal{G} \\times_1 A \\times_2 B \\times_3 C \\in \\mathbb{R}^{4 \\times 3 \\times 2}$$\n\n------\n\n## 与其他分解的对比\n\n| 方法                   | 类型           | 适用场景              | 特点               |\n| ---------------------- | -------------- | --------------------- | ------------------ |\n| Tucker                 | 多模态张量分解 | 多模态融合            | 保留交互，参数可控 |\n| CP (CANDECOMP/PARAFAC) | 张量秩分解     | 分解张量为秩1分量之和 | 更简单但可解释性低 |\n| PCA                    | 矩阵分解       | 降维                  | 相当于 SVD 的特例  |\n| SVD                    | 矩阵分解       | 特征提取              | 二阶张量特例       |\n\n------\n\n## 实际应用\n\n### 1. 多模态融合\n\n如在视觉问答中，将图像向量 vv 和文本向量 qq 融合，用 Tucker 分解实现有效的高阶交互建模。\n\n### 2. 模型压缩\n\n可以用 Tucker 分解对 CNN 卷积核或 Transformer 权重张量进行压缩。\n\n### 3. 多任务学习\n\n可以用共享核心张量，同时用不同模式矩阵适配不同任务。\n\n------\n\n## Tucker 分解的 PyTorch 简单实现\n\n```python\n# 简化版 Tucker 融合（v: image, q: text）\nv_proj = U_v(v)      # [B, r1]\nq_proj = U_q(q)      # [B, r2]\nouter = torch.einsum(\"bi,bj->bij\", v_proj, q_proj)   # [B, r1, r2]\nfused = torch.einsum(\"bij,ijk->bk\", outer, core)     # [B, r3]\nout = U_o(fused)     # [B, d_out]\n```\n\n------\n\n\n\n","tags":["矩阵变换,tucker"],"categories":["深度学习","工具"]},{"title":"Office卸载","url":"/2025/06/25/2025-06-25-Office卸载/","content":"\n其他工具——Office卸载\n\n<!-- more -->\n\n# Office卸载\n\n## 问题描述\n\n起因是想下载Visio套件，因此需要通过官方下载整体Office包，但是下载后一直显示还是原来的Office教育版。\n\n## 步骤\n\n#### 通过控制面板卸载已安装的旧版Office。\n\n:::info no-icon\n\nWin + R，输入“control”，回车，在卸载程序中找到Office软件，右键卸载。\n\n:::\n\n#### 清理注册表文件\n\n+ 下载Office助手——[“Office Tool Plus”]([Office Tool Plus | 一键部署 Office](https://otp.landian.vip/zh-cn/))\n+ 在工具箱内找到”移除Office“选择移除。\n+ 执行后到注册表下检测。\n\nWin + R，输入“regedit”，回车。\n\n检查以下两项是否存在，若存在可以手动删除。\n\n:::info no-icon\n\n如果提示没有删除权限，请在对应的键上，右键“权限”→选中当前登录账号，高级→勾选左下角“使用可从此对象继承的权限项目替换所有子对象的权限项目”→应用，确定。然后尝试再次删除就可以删除掉了。\n\n:::\n\n","categories":["其他工具"]},{"title":"Transformer","url":"/2024/12/15/2025-06-18-模型搭建/","content":"\nAA-CrossViT——模型搭建\n\n<!-- more -->\n\n本文模型采用基于轴向分块和交叉注意力融合策略的双分支视觉Transformer作为锂离子电池早期寿命预测模型。具体而言，分别基于图形特征的电压轴向和周期轴向进行分块，而后利用卷积层将各分块编码到向量空间，随后添加反映分块信息和位置的可学习参数矩阵分类token $x_{cls}$ 和位置编码矩阵 $X_{pe}$ 。Transformer编码层用以提取特征和捕捉分块间的依赖关系，随后提取双流分支的分类token和分块token输出作为交叉注意力机制的输入，以融合双轴向分支的信息。\n\n\n\n### Related Module\n\n导入相关依赖库。\n\n```python Related Module\nimport torch\nimport torch.nn as nn\nfrom torch import Tensor\nfrom einops.layers.torch import Rearrange, Reduce\nfrom einops import repeat, rearrange\nfrom torchsummary import summary\n```\n\n:::info no-icon\n\n+ `Rearrange/Reduce`和`rearrange/reduce`的区别：\n\n前者是网络层，后者是数据处理函数。\n\n:::\n\n\n\n### Input Size\n\n本文输入为锂离子电池的图形特征输入，尺寸为$3\\times 100\\times 100$。\n\n```python Input\nx = torch.randn(3,100,100)   # 单样本尺寸为3*100*100\nprint(x.shape)   # (3,100,100)\n\nx_batch = torch.randn(16,3,100,100)  # 单个batch尺寸为16*3*100*100\nprint(x_batch.shape)\n```\n\n\n\n### Patch Embedding\n\n视觉Transformer模型的第一步需要将图片划分为多个分块（Patches），并且将其映射到向量。具体而言，处于效率考虑，先利用卷积层将每个分块映射到向量空间维度$d_k$，卷积核的大小与步长均为patch的尺寸，卷积核个数等于编码维度$d_k$，而后利用`Rearrange`函数改变维度顺序。\n\n```python \nin_channels, patch_size = 3, (1,100)\nprojection = nn.Sequential(\n            nn.Conv2d(in_channels=in_channels, out_channels=emb_size, kernel_size=patch_size, stride=(1,1)),\n            Rearrange(\"b e h w -> b (h w) e\"),\n        )\n```\n\n:::info no-icon\n\n`Rearrange/Reduce`参数解析：输入参数格式为字符串\n\n:::\n\n\n\n```python Patch Embedding\nclass PatchEmbedding(nn.Module):\n    def __init__(self, input_size:int=100, in_channels:int=3, patch_size:tuple=(1,100), emb_size:int=100):\n        super().__init__()\n        self.projection = nn.Sequential(\n            nn.Conv2d(in_channels=in_channels, out_channels=emb_size, kernel_size=patch_size, stride=(1,1)),\n            Rearrange(\"b e h w -> b (h w) e\"),\n        )\n        self.cls_token = nn.Parameter(torch.randn(1,1,emb_size)/emb_size)\n        self.positions = nn.Parameter(torch.randn((input_size**2 // (patch_size[0]*patch_size[1]) + 1,emb_size)) / emb_size)\n\n    def forward(self,x:Tensor):\n        b, c, h, w = x.shape\n        x = self.projection(x)\n        cls_tokens = repeat(self.cls_token,\"() n e -> b n e\",b=b)\n        x = torch.cat([cls_tokens, x], dim=1)\n        x += self.positions    # 这里区别于class token直接用广播机制相加，原因是位置编码应该在batch内的不同样本也保持一致\n        # print(x.shape)\n        return x\n```\n\n\n\n\n\n\n\n### Class Token\n\n\n\n\n\n\n\n### Positional Encoding\n\n\n\n\n\n\n\n### Transformer Encoder \n\n\n\n\n\n\n\n### \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["AA-CrossViT","Transformer"]},{"title":"Life prediction model for lithium-ion battery via a 3D convolutional network enhanced by channel attention considering charging and discharging process","url":"/2024/12/01/2024-12-01_Life prediction model for lithium-ion battery via a 3D convolutional network enhanced by channel attention considering charging and discharging process/","content":"\n基于动态自编码网络的电池故障检测\n\n<!-- more -->\n\n# Life prediction model for lithium-ion battery via a 3D convolutional network enhanced by channel attention considering charging and discharging process\n\nArticle link: [Realistic fault detection of li-ion battery via dynamical deep learning (nature.com)]()\n\nlocal link: [Realistic fault detection of li-ion battery via dynamical deep learning](/downloads/2024-12-01_Life prediction model for lithium-ion battery via a 3D convolutional network enhanced by channel attention considering charging and discharging process.pdf)\n\nDate: 2024-12-01\n\n## Gaps\n\n+ 对于多路测量参数（温度、电压、电流等），已有研究大多将它们直接连接，忽视了其中的耦合关系，导致了在映射到潜在特征空间时出现解耦。这种数据交互不足阻碍了模型的性能。\n\n+ 在模型层面：（1）许多方法仅关注充电或放电单一过程；（2）CNN在处理时序性数据时性能不佳，且缺乏不同充电策略下的泛化能力。\n\n  \n\n## Novelty/Originality\n\n+ 从放电过程中的IC曲线和电压曲线中提取HI，与充电特征进行融合；\n\n+ 通过RP技术将充电过程中的VIT数据转换为多维数据；\n\n+ 提出了一种深度可分离的通道注意力3DCNN，用以解决权重数量多喝数据缺乏耦合计算的问题；\n\n+ 提出了一种同时预测不同充电协议下的寿命预测方法。\n\n  \n\n## Input\n\n### Datasets\n\n数据集采用MIT的两套锂离子退化数据集，分别包含了124和45个电池样本，两套数据集的采用不同的充电策略。\n\n+ （1）“C1(Q1)-C2”-(80%)-“1CC(3.6V)-1CV”\n+ （2）“CC1-CC2-CC3-CC4”-“CC5-CV1”\n\n### Charge process\n\nRP技术：\n\n\n\n### DisCharge process\n\n+ IC曲线的峰值坐标（PIIC）\n+ \n\n\n\n\n\n\n\n","categories":["论文文献阅读"]},{"title":"01 矩阵的相似变换","url":"/2024/09/21/2024-09-21-矩阵的相似变换/","content":"\n矩阵论——01 矩阵的相似变换\n\n<!-- more -->\n\n# 控制系统的状态空间描述\n\n## 基本概念\n\n### 系统的状态空间模型\n\n1. 线性时变系统的状态空间模型：系数矩阵与时间无关。\n\n$$\\left\\{ \\begin{matrix} \\dot{x}=Ax+Bu\\\\y=Cx+Du\\\\\\end{matrix}\\right.   \\tag{1}$$\n\n其中，$u=R^r$为输入向量；$y=R^m$为输出向量；$x\\in R^n$为状态向量。$A,B,C,D$为系数矩阵。\n\n2. 线性时不变系统的状态空间模型：系数矩阵与时间有关。\n\n$$\\left\\{ \\begin{matrix} \\dot{x}=A(t)x+B(t)u\\\\y=C(t)x+D(t)u\\\\\\end{matrix}\\right.   \\tag{2}$$\n\n3. 离散线性系统的状态空间模型。\n\n$$\\left\\{ \\begin{matrix} x(k+1)=A(k)x(k)+B(k)u(k)\\\\y(k)=C(k)x(k)+D(k)u(k)\\\\\\end{matrix}\\right.   \\tag{3}$$\n\n### 状态空间描述的特点\n\n1. 系统的状态变量的个数=系统中包含的独立储能元件的个数=系统的阶数。\n2. 在给定的系统中，状态变量的选择不唯一，但是状态变量的个数是一致的。\n3. 基于状态变量选取的不同，同一系统可以用不同的动态方程来描述。\n\n+++primary 证明\n\n对于一个状态方程$\\left\\{ \\begin{matrix} \\dot{x}=Ax+Bu\\\\y=Cx\\\\\\end{matrix}\\right.$，选择非奇异矩阵$P\\in R^{n\\times n}$作为变换阵，有$x=P\\overline{x}$，那么此时状态方程可表示为：\n\n$$\\dot{\\overline{x}}=P^{-1}\\dot{x}=P^{-1}[Ax+Bu]=P^{-1}AP\\overline{x}+P^{-1}Bu=\\overline{A}\\overline{x}+\\overline{B}u   \\tag{4}$$\n\n$$y=Cx=CP\\overline{x}=\\overline{C}\\overline{x}    \\tag{5}$$\n\n其中，$\\overline{A}=P^{-1}AP,\\overline{B}=P^{-1}B,\\overline{C}=CP$。\n\n因此当状态变量 $x$ 改变时，一定存在变换矩阵 $P$ 使得状态方程发生变化。\n\n+++\n\n### 状态空间模型的建立步骤\n\n1. 选择状态变量。\n2. 根据物体或其他机理列写微分方程。\n3. 转化为矩阵形式，得到状态空间模型。\n\n### 状态空间表达式的系统方框图\n\n公式（1）是线性时不变系统状态空间表达式的一般形式。其系统方框图可表示如下：\n\n![](2023-10-21-控制系统的状态空间描述/01状态空间系统框图.png)\n\n### 状态空间表达式的状态变量图\n\n1. 状态变量图的基本元素符号\n\n![](2023-10-21-控制系统的状态空间描述/02状态空间变量图.png)\n\n2. 绘制步骤\n\n- **绘制积分器**  积分器数量等于状态变量数目。\n- **由状态方程和输出方程绘制加法器和放大器**\n- **连接各元件**\n\n+++info 例题\n\n;;;id1 例题1\n\n:::info no-icon\n\n设有三阶系统状态空间表达式如下，试绘制其状态变量图。\n\n$$\\left\\{ \\begin{aligned}\\begin{matrix} \\dot{x}_1=x_2\\\\\\dot{x}_2=x_3\\\\\\dot{x}_3=-6x_1-3x_2-2x_3+u\\\\y=x_1+x_2\\end{matrix}\\end{aligned}\\right.$$\n\n:::\n\n其状态变量图可绘制如下：\n\n![](2023-10-21-控制系统的状态空间描述/03状态空间变量图.png)\n\n;;;\n\n+++\n\n## 传递函数和传递函数矩阵\n\n### 单输入单输出系统\n\n对于单输入单输出系统$\\left\\{ \\begin{matrix} \\dot{x}=Ax+Bu\\\\y=Cx+Du\\\\\\end{matrix}\\right.$，在零初始条件下其传递函数可表示为：\n\n$$g(s)=\\frac{Y(s)}{U(s)}=C(sI-A)^{-1}B+D    \\tag{6}$$\n\n+++primary 推导\n\n在系统$\\left\\{ \\begin{matrix} \\dot{x}=Ax+Bu\\\\y=Cx+Du\\\\\\end{matrix}\\right.$ 中，在零初始条件下取拉氏变换有：$\\left\\{ \\begin{matrix} sX(s)=AX(s)+BU(s)\\\\Y(s)=CX(s)+DU(s)\\\\\\end{matrix}\\right.$，整理得到$\\left\\{ \\begin{matrix} X(s)=(sI-A)^{-1}BU(s)\\\\Y(s)=C(sI-A)^{-1}BU(s)+DU(s)\\\\\\end{matrix}\\right.$，故$g(s)=\\frac{Y(s)}{U(s)}=C(sI-A)^{-1}B+D$\n\n+++\n\n在 $D=0$ 时，$g(s)=\\frac{Y(s)}{U(s)}=C(sI-A)^{-1}B=\\frac{Cadj(sI-A)B}{|sI-A|}$，其中$adj(sI-A)$表示矩阵$sI-A$的伴随矩阵。\n\n对比自控原理中传递函数的表达式：$g(s)=\\frac{b_0s^n+b_1s^{n-1}+\\cdots +b_{n-1}s+b_n}{s^n+a_1s^{n-1}+\\cdots +a_{n-1}s+a_n}$，可知：\n\n1. 系统矩阵$A$的特征多项式等同于传递函数的分母多项式。\n2. 传递函数的极点就是系统矩阵$A$的特征值。\n3. **传递函数的不变性**  同一系统的状态空间描述不唯一，但传递函数是唯一的。\n\n+++primary 证明：同一系统的不同状态空间描述具有相同的特征值。\n\n对于同一系统，选择两个不同的状态向量 $x\\in{R^n}$ 和 $\\overline{x}\\in{R^n}$ 分别得到不同的状态空间描述：\n\n$$\\begin{matrix}\\left\\{ \\begin{matrix} \\dot{x}=Ax+Bu\\\\y=Cx+Du\\\\\\end{matrix}\\right.&&&\\left\\{ \\begin{matrix} \\dot{\\overline{x}}=\\overline{A}\\overline{x}+\\overline{B}u\\\\y=\\overline{C}\\overline{x}+\\overline{D}u\\\\\\end{matrix}\\right.\\end{matrix}$$\n\n两种状态变量一定存在着可逆变化关系：$x=P\\overline{x}$，故：\n\n$$\\left\\{ \\begin{matrix} \\dot{x}=Ax+Bu\\\\y=Cx+Du\\\\\\end{matrix}\\right.\\Rightarrow \\left\\{ \\begin{matrix} P\\dot{\\overline{x}}=AP\\overline{x}+Bu\\\\y=CP\\overline{x}+Du\\\\\\end{matrix}\\right.\\Rightarrow \\left\\{ \\begin{matrix} \\dot{\\overline{x}}=P^{-1}AP\\overline{x}+P^{-1}Bu\\\\y=CP\\overline{x}+Du\\\\\\end{matrix}\\right.$$\n\n故 $\\overline{A}=P^{-1}AP$，所以矩阵 $A$ 与矩阵 $\\overline{A}$ 相似，故特征值相同。\n\n:::info\n\n相似矩阵具体相同的特征值\n\n:::\n\n+++\n\n### 多输入多输出系统\n\n对于多输入多输出系统，输入向量$u=[u_1\\cdots u_p]^T$，输出向量$y=[y_1\\dots y_q]^T$。我们把第$i$个输出$y_i$和第$j$个输入$u_j$间的传递函数定义为：$g_{ij}(s)=\\frac{Y_i(s)}{U_j(s)}$。故系统的输入输出关系可表示为：\n\n$$\\begin{bmatrix}Y_1(s)\\\\Y_2(s)\\\\\\vdots\\\\Y_q(s)\\end{bmatrix}=\\begin{bmatrix}g_{11}(s)&g_{12}(s)&\\cdots&g_{1p}(s)\\\\g_{21}(s)&g_{22}(s)&\\cdots&g_{2p}(s)\\\\\\vdots&\\vdots&\\ddots&\\vdots\\\\g_{q1}(s)&g_{q2}(s)&\\cdots&g_{qp}(s)\\end{bmatrix}\\begin{bmatrix}U_1(s)\\\\U_2(s)\\\\\\vdots\\\\U_q(s)\\end{bmatrix}$$\n\n以矩阵的形式表示：$Y(s)=G(s)U(s)$，其中 $G(s)$称为传递函数矩阵。\n\n对于多输入多输出系统$\\left\\{ \\begin{matrix} \\dot{x}=Ax+Bu\\\\y=Cx+Du\\\\\\end{matrix}\\right.$，同样传递函数矩阵为：\n\n$$G(s)=C(sI-A)^{-1}B+D=\\frac{Cadj(sI-A)B+D|sI-A|}{|sI-A|}$$\n\n\n\n+++info 例题\n\n;;;id2 例题1\n\n:::info no-icon\n\n已知系统动态方程为$\\begin{bmatrix}\\dot{x}_1\\\\\\dot{x}_2\\end{bmatrix}=\\begin{bmatrix}0&1\\\\0&-2\\end{bmatrix}\\begin{bmatrix}x_1\\\\x_2\\end{bmatrix}+\\begin{bmatrix}1&0\\\\0&1\\end{bmatrix}\\begin{bmatrix}u_1\\\\u_2\\end{bmatrix}$，$\\begin{bmatrix}y_1\\\\y_2\\end{bmatrix}=\\begin{bmatrix}1&0\\\\0&1\\end{bmatrix}\\begin{bmatrix}x_1\\\\x_2\\end{bmatrix}$，试求系统的传递函数矩阵。\n\n:::\n\n由题，$G(s)=C(sI-A)^{-1}B+D=\\begin{bmatrix}1&0\\\\0&1\\end{bmatrix}\\begin{bmatrix}\\frac{1}{s}&\\frac{1}{s(s+2)}\\\\0&\\frac{1}{s+2}\\end{bmatrix}\\begin{bmatrix}1&0\\\\0&1\\end{bmatrix}=\\begin{bmatrix}\\frac{1}{s}&\\frac{1}{s(s+2)}\\\\0&\\frac{1}{s+2}\\end{bmatrix}$。\n\n;;;\n\n\n\n+++\n\n## 建立状态空间表达式\n\n### 高阶微分方程化为状态空间描述\n\n在单输入单输出线性时不变系统中，系统的输出与输入的关系可用如下高阶微分方程描述：\n\n$$y^{(n)}+a_1y^{(n-1)}+\\cdots +a_{n-1}\\dot{y}+a_ny=b_0u^{(m)}+b_1u^{(m-1)}+\\cdots +b_{m-1}\\dot{u}+b_mu    \\tag{7}$$\n\n其中，$m\\leq n$。根据微分方程右侧是否含有输入函数的导数（即$m$是否等于0）分两种情况讨论。\n\n#### 常微分方程中不含输入函数的导数\n\n若常微分方程中不含有输入函数的导数，即：$y^{(n)}+a_1y^{(n-1)}+\\cdots +a_{n-1}\\dot{y}+a_ny=b_mu$。\n\n那么可以选取状态变量：\n\n$$x_1=\\frac{1}{b_m}y,\\quad x_2=\\frac{1}{b_m}\\dot{y},\\quad \\cdots \\quad  x_n=\\frac{1}{b_m}y^{(n-1)}      \\tag{8}$$\n\n那么就可以得到状态方程（前$n-1$条通过求导获得，最后一条通过原微分方程获得）：\n\n$$\\left\\{ \\begin{matrix} \\dot{x}_1=x_2\\\\\\dot{x}_2=x_3\\\\\\vdots\\\\\\dot{x}_n=y^{(n)}=-a_nx_1-a_{n-1}x_2-\\cdots -a_1x_n+u\\end{matrix}\\right.$$\n\n输出方程为：$y=b_mx_1$。\n\n以矩阵的形式可表示为：\n\n$$\\dot{x}=\\begin{bmatrix}0&1&\\cdots &0\\\\\\vdots&\\vdots&\\ddots&\\vdots\\\\0&0&\\cdots&1\\\\-a_n&-a_{n-1}&\\cdots&-a_1\\end{bmatrix}x+\\begin{bmatrix}0\\\\0\\\\\\vdots\\\\1\\end{bmatrix}u    \\tag{9}$$\n\n$$y=\\begin{bmatrix}1&0&\\cdots&0\\end{bmatrix}x     \\tag{10}$$\n\n+++primary 能控标准型\n\n形如公式（9）的状态空间模型称为能控标准型。即$A$与$b$可用以下形式表示：\n\n$$A=\\begin{bmatrix}0&1&\\cdots &0\\\\\\vdots&\\vdots&\\ddots&\\vdots\\\\0&0&\\cdots&1\\\\-a_n&-a_{n-1}&\\cdots&-a_1\\end{bmatrix},\\quad b=\\begin{bmatrix}0\\\\0\\\\\\vdots\\\\1\\end{bmatrix}$$\n\n+++\n\n+++info 例题\n\n;;;id3 例题1\n\n:::info no-icon\n\n设系统的运动方程为：$y^{(3)}+5\\ddot{y}+8\\dot{y}+6y=3u$，试求其状态空间表达式。\n\n:::\n\n选取状态变量$x_1=y,\\quad x_2=\\dot{y},\\quad x_3=\\ddot{y}$，则有状态方程：\n\n$$\\left\\{ \\begin{matrix} \\dot{x}_1=x_2\\\\\\dot{x}_2=x_3\\\\\\dot{x}_3=y^{(3)}=-6x_1-8x_2 -5x_3+3u\\end{matrix}\\right.$$\n\n输出方程为$y=x_1$。\n\n故状态空间表达式为：\n\n$$\\dot{x}=\\begin{bmatrix}0&1 &0\\\\0&0&1\\\\-6&-8&-5\\end{bmatrix}x+\\begin{bmatrix}0\\\\0\\\\3\\end{bmatrix}u $$\n\n$$y=\\begin{bmatrix}1&0&0\\end{bmatrix}x$$\n\n;;;\n\n+++\n\n\n\n#### 常微分方程中含有输入函数的导数\n\n若常微分方程中含有输入函数的导数，即：$y^{(n)}+a_1y^{(n-1)}+\\cdots +a_{n-1}\\dot{y}+a_ny=b_0u^{(m)}+b_1u^{(m-1)}+\\cdots +b_{m-1}\\dot{u}+b_mu$。\n\n选择状态变量：\n\n$$\\left\\{ \\begin{matrix} x_1=y-\\beta_0u\\\\x_2=\\dot{x}_1-\\beta_1u=\\dot{y}-\\beta_0\\dot{u}-\\beta_1u\\\\x_3=\\dot{x}_2-\\beta_2u=\\ddot{y}-\\beta_0\\ddot{u}-\\beta_1\\dot{u}-\\beta_2u\\\\\\vdots\\\\x_n=\\dot{x}_{n-1}-\\beta_{n-1}u=y^{(n)}-\\beta_0u^{(n-1)}-\\beta_1u^{(n-2)}-\\cdots -\\beta_{n-2}\\dot{u}-\\beta_{n-1}u\\end{matrix}\\right.   \\tag{11}$$\n\n其中参数$\\beta_0,\\beta_1,\\cdots,\\beta_n$由下式决定：\n\n$$\\begin{bmatrix}\\beta_0\\\\\\beta_1\\\\\\beta_2\\\\\\vdots\\\\\\beta_n\\end{bmatrix}=\\begin{bmatrix}1&0&\\cdots&0&0\\\\a_1&1&\\cdots&0&0\\\\\\vdots&\\vdots&\\ddots&\\vdots&\\vdots\\\\a_{n-1}&a_{n-2}&\\cdots&1&0\\\\a_n&a_{n-1}&\\cdots&a_1&1\\end{bmatrix}\\begin{bmatrix}b_0\\\\b_1\\\\b_2\\\\\\vdots\\\\b_n\\end{bmatrix}    \\tag{12}$$\n\n由（11）可得到状态方程：$\\left\\{ \\begin{matrix} \\dot{x}_1=x_2+\\beta_1u\\\\\\dot{x}_2=x_3+\\beta_2u\\\\\\vdots\\\\\\dot{x}_{n-1}=x_n+\\beta_{n-1}u\\\\\\begin{aligned}\\dot{x}_n&=y^{(n)}-\\beta_0u^{(u)}-\\beta_1u^{(n-1)}-\\cdots -\\beta_{n-2}\\ddot{u}-\\beta_{n-1}\\dot{u}\\\\&=-a_nx_1-a_{n-1}x_2-\\cdots -a_1x_n+\\beta_nu\\end{aligned} \\end{matrix}\\right.$。\n\n+++info 最后一个等式怎么化简得到的？\n\n+++\n\n因此，状态空间表达式为：\n\n$$\\dot{x}=\\begin{bmatrix}0&1&0&\\cdots&0\\\\0&0&1&\\cdots&0\\\\\\vdots&\\vdots&\\vdots&\\ddots&\\vdots\\\\0&0&0&\\cdots&1\\\\-a_n&-a_{n-1}&-a_{n-2}&\\cdots&-a_1\\end{bmatrix}x+\\begin{bmatrix}\\beta_0\\\\\\beta_1\\\\\\vdots\\\\\\beta_{n-1}\\\\\\beta_n\\end{bmatrix}u   \\tag{13}$$\n\n$$y=[1\\quad 0\\quad \\cdots\\quad 0 ]x+\\beta_0u$$\n\n\n\n### 通过传递函数建立状态空间描述\n\n后续的方法我们讨论的传递函数的分子多项式次数均小于分母多项式次数。因为对于实际系统，分子多项式次数总是小于或等于分母多项式次数，在次数相等时可以通过化简的方法转化为分子多项式次数小于分母多项式次数。\n\n+++primary 推导\n\n若传递函数的分子多项式次数等于分母多项式次数，即\n\n$$g(s)=\\frac{b_0s^m+b_1s^{m-1}+\\cdots +b_{m-1}s+b_m}{s^n+a_1s^{n-1}+\\cdots +a_{n-1}s+a_n},m=n$$\n\n它总是可以化简为：\n\n$$g(s)=\\frac{b_1s^{m-1}+\\cdots +b_{m-1}s+b_m}{s^n+a_1s^{n-1}+\\cdots +a_{n-1}s+a_n}=\\overline{g}(s)+b_0,m=n$$\n\n其中 $\\overline{g}(s)$ 为分子多项式次数小于分母多项式次数的传递函数，$b_0$ 为常数，整体视为两者的并联结构。\n\n+++\n\n#### 直接分解法\n\n对于$n$阶传递函数：$g(s)=\\frac{Y(s)}{U(s)}=\\frac{b_1s^{n-1}+\\cdots +b_{n-1}s+b_n}{s^n+a_1s^{n-1}+\\cdots +a_{n-1}s+a_n}$。\n\n同时除以$s^n$有：$Y(s)=U(s)\\frac{b_1s^{-1}+\\cdots +b_{n-1}s^{-(n-1)}+b_ns^{-n}}{1+a_1s^{-1}+\\cdots +a_{n-1}s^{-(n-1)}+a_ns^{-n}}$。\n\n令中间变量$E(s)=U(s)\\frac{1}{1+a_1s^{-1}+\\cdots +a_{n-1}s^{-(n-1)}+a_ns^{-n}}$，即$E(s)=U(s)-a_1s^{-1}E(s)-\\cdots -a_{n-1}s^{-(n-1)}E(s)-a_ns^{-n}E(s)$。\n\n则输入$U(s)$、中间变量$E(s)$和输出$Y(s)$的关系流程图如下：\n\n![](2023-10-21-控制系统的状态空间描述/04直接分解法.png)\n\n则$Y(s)=b_1s^{-1}E(s)+b_2s^{-2}E(s)+\\cdots +b_{n-1}s^{-(n-1)}E(s)+b_ns^{-n}E(s)$。\n\n令$x_n,x_{n-1},\\cdots,x_1$为$s^{-1}E(s),s^{-2}E(s),\\cdots,s^{-n}E(s)$的拉氏逆变换，那么就可以绘制状态变量图并得到系统的状态空间表达式（能控标准型）。\n\n![](2023-10-21-控制系统的状态空间描述/05直接分解法.png)\n\n$$\\dot{x}=\\begin{bmatrix}0&1&\\cdots&0\\\\\\vdots&\\vdots&\\ddots&\\vdots\\\\0&0&\\cdots&1\\\\-a_n&-a_{n-1}&\\cdots&-a_1\\end{bmatrix}x+\\begin{bmatrix}0\\\\\\vdots\\\\0\\\\1\\end{bmatrix}u   \\tag{14}$$\n\n$$y=[b_n\\quad b_{n-1}\\quad \\cdots\\quad b_1 ]x$$\n\n+++info 补充\n\n如果该$n$阶系统传递函数的分子多项式次数等于分母多项式次数（在[通过传递函数建立状态空间描述](#通过传递函数建立状态空间描述)中讨论过该情况）即 $g(s)=\\frac{b_1s^{m-1}+\\cdots +b_{m-1}s+b_m}{s^n+a_1s^{n-1}+\\cdots +a_{n-1}s+a_n}=\\overline{g}(s)+b_0,m=n$，那么先算出 $\\overline{g}(s)$ 后在输入到输出之间直接连接一个比例环节即可。\n\n+++\n\n#### 串联分解法\n\n该方法适用于传递函数可分解为因式相乘的形式，即$g(s)=\\frac{b_1(s-z_1)(s-z_2)\\cdots(s-z_{n-1})}{(s-p_1)(s-p_2)\\dots(s-p_n)}$。\n\n以一个三阶系统进行说明：$g(s)=\\frac{b_1(s-z_1)(s-z_2)}{(s-p_1)(s-p_2)(s-p_3)}$。\n\n上式中可分为两种：$\\frac{1}{s-p}=\\frac{\\frac{1}{s}}{1-\\frac{1}{s}p}$，$\\frac{s-z}{s-p}=1+\\frac{p-z}{s-p}=1+(p-z)\\frac{\\frac{1}{s}}{1-\\frac{1}{s}p}$。\n\n因此系统可视为三个一阶系统串联而成，结构图如下：\n\n![](2023-10-21-控制系统的状态空间描述/06串联分解法.png)\n\n取每个积分器的输出为状态变量，那么可以得到状态空间表达式如下：\n\n$$\\left\\{ \\begin{matrix} \\dot{x}_1=p_1x_1+b_1u\\\\\\dot{x}_2=x_1+p_2x_2\\\\\\dot{x}_3=x_1+(p_2-z_2)x_2+p_3x_3\\\\y=x_1+(p_2-z_2)x_2+(p_3-z_3)x_3\\end{matrix}\\right.$$\n\n写成向量的形式为：\n\n$$\\dot{x}=\\begin{bmatrix}p_1&0&0\\\\1&p_2&0\\\\1&p_2-z_2&p_3\\end{bmatrix}x+\\begin{bmatrix}b_1\\\\0\\\\0\\end{bmatrix}u   \\tag{15}$$\n\n$$y=[1\\quad p_2-z_2\\quad \\quad p_3-z_3 ]x$$\n\n#### 并联分解法\n\n1. 若传递函数的极点两两相异。\n\n传递函数极点两两相异，则$g(s)=\\frac{N(s)}{(s-p_1)(s-p_2)\\dots(s-p_n)}=\\frac{c_1}{s-p_1}+\\frac{c_2}{s-p_2}+\\cdots+\\frac{c_n}{s-p_n}$，其中$c_i=\\lim_{s\\to p_i}(s-p_i)g(s)$。\n\n选取状态变量 $x_i(s)=\\frac{1}{s-p_i}U(s)$，即 $sx_i(s)=p_ix_i(s)+u(s)$，做拉氏逆变换有：\n\n$$\\dot{x}_i(t)=p_ix_i(t)+u(t)$$\n\n输出 $y(s)=g(s)u(s)=\\sum_{i=1}^n\\frac{c_i}{s-p_i}u_i(s)=\\sum_{i=1}^nc_ix_i(s)$，做拉氏逆变换有：\n\n$$y(t)=\\sum_{i=1}^nc_ix_i(t)$$\n\n写成向量的形式为：\n\n$$\\dot{x}=\\begin{bmatrix}p_1&0&\\cdots&0\\\\0&p_2&\\cdots&0\\\\\\vdots&\\vdots&\\ddots&0\\\\0&0&\\cdots&p_n\\end{bmatrix}x+\\begin{bmatrix}1\\\\1\\\\\\vdots\\\\1\\end{bmatrix}u   \\tag{16}$$\n\n$$y=[c_1\\quad c_2\\quad\\cdots \\quad c_n]x$$\n\n+++info 上式为对角标准型\n\n对于系统 $\\left\\{ \\begin{matrix} \\dot{x}=Ax+Bu\\\\y=Cx\\\\\\end{matrix}\\right.$ ，若$A$为对角阵且各元素为传递函数的极点，$B$为全1矩阵，$C$内各元素为对应极点的留数，那么称该矩阵表达式为对角标准型。\n\n+++\n\n\n\n2. 若传递函数具有重极点。\n\n先考虑只有一个重极点和若干个单极点，重数为$r$，$g(s)=\\frac{c_{11}}{(s-p_1)^{r}}+\\frac{c_{12}}{(s-p_1)^{r-1}}+\\cdots+\\frac{c_{1r}}{(s-p_1)^{}}+\\frac{c_{r+1}}{s-p_{r+1}}+\\cdots+\\frac{c_n}{s-p_n}$，其中对于单极点仍有：$c_i=\\lim_{s\\to p_i}(s-p_i)g(s)$，而对于重极点则有：$c_1j=\\frac{1}{(j-1)!}\\lim_{s\\to p_1}\\frac{d^{j-1}}{ds^{j-1}}[(s-p_1)g(s)],\\quad j=1,2,\\cdots,r$。\n\n选取状态变量，化简求拉氏逆变换得到状态方程：\n\n$$\\begin{matrix}\\left\\{ \\begin{matrix} x_1(s)=\\frac{U(s)}{(s-p_1)^{r}}\\\\x_2(s)=\\frac{U(s)}{(s-p_1)^{r-1}}\\\\\\vdots\\\\x_r(s)=\\frac{U(s)}{(s-p_1)}\\\\x_{r+1}(s)=\\frac{U(s)}{s-p_{r+1}}\\\\\\vdots\\\\x_{1}(s)=\\frac{U(s)}{s-p_{n}}\\end{matrix}\\right.\\quad\\stackrel{}{\\Rightarrow}\\quad\\left\\{ \\begin{matrix} x_1(s)=\\frac{1}{s-p_1}x_2(s)\\\\x_2(s)=\\frac{1}{s-p_1}x_3(s)\\\\\\vdots\\\\x_r(s)=\\frac{1}{s-p_1}U(s)\\\\x_{r+1}(s)=\\frac{1}{s-p_{r+1}}U(s)\\\\\\vdots\\\\x_n(s)=\\frac{1}{s-p_n}U(s)\\end{matrix}\\right.\\quad\\stackrel{L^{-1}}{\\Rightarrow}\\quad \\left\\{ \\begin{matrix} \\dot{x}_1(t)=p_1x_1+x_2\\\\\\dot{x}_2(t)=p_1x_2+x_3\\\\\\vdots\\\\\\dot{x}_r(t)=p_1x_r+u\\\\\\dot{x}_{r+1}(t)=p_{r+1}x_{x+1}+u\\\\\\vdots\\\\\\dot{x}_n(t)=p_nx_n+u\\end{matrix}\\right.     \\end{matrix}$$\n\n输出方程的拉氏变换为：\n\n$$Y(s)=c_{11}x_1(s)+c_{12}x_2(s)+\\cdots+c_{1r}x_r(s)+c_{r+1}x_{r+1}(s)+\\cdots+c_{nx_n(s)}$$\n\n求拉氏逆变换有：\n\n$$y(t)=c_{11}x_1(t)+c_{12}x_2(t)+\\cdots+c_{1r}x_r(t)+c_{r+1}x_{r+1}(t)+\\cdots+c_{nx_n(t)}$$\n\n得到状态空间表达式为：\n\n$$\\begin{bmatrix}\\dot{x_1}\\\\\\dot{x_2}\\\\\\vdots\\\\\\dot{x_r}\\\\\\dot{x_{r+1}}\\\\\\vdots\\\\\\dot{x_n}\\end{bmatrix}=\\begin{bmatrix}p_1&1&&&&&\\\\&p_1&\\ddots&&&\\bold{0}&\\\\&&\\ddots&1\\\\&&&p_1\\\\&&&&p_{r+1}&&\\\\&\\bold{0}&&&&\\ddots&\\\\&&&&&&p_n\\end{bmatrix}\\begin{bmatrix}x_1\\\\x_2\\\\\\vdots\\\\x_r\\\\x_{r+1}\\\\\\vdots\\\\x_n\\end{bmatrix}+\\begin{bmatrix}0\\\\0\\\\\\vdots\\\\1\\\\1\\\\\\vdots\\\\1\\end{bmatrix}u   \\tag{17}$$\n\n$$y=\\begin{bmatrix}c_{11}& c_{12}&\\cdots& c_{1r}&c_{r+1}&\\cdots&c_{n}\\end{bmatrix}\\begin{bmatrix}x_1\\\\x_2\\\\\\vdots\\\\x_r\\\\x_{r+1}\\\\\\vdots\\\\x_n\\end{bmatrix}$$\n\n对于重根部分，矩阵$A$中对应的是若尔当块，$B$中为一个只有末行是1其余行为0的矩阵，$C$中对应元素为$r$重极点对应的留数。而对于其中的单极点部分，形式与[无重根](#并联分解法)时一致。\n\n拓展到具有多个重极点的情况。矩阵$A$中在对角上补充对应的若尔当块，$B$中对应补充只有末行是1其余行为0的矩阵，$C$中补充对应元素为$r$重极点对应的留数。\n\n## 组合系统\n\n### 并联联结\n\n在$n$个子系统并联的并联系统中，组合系统的传递函数矩阵等于子系统传递函数矩阵的和。\n\n$$G(s)=G_1(s)+G_2(s)+\\cdots+G_n(s)   \\tag{18}$$\n\n### 串联联结\n\n在$n$个子系统串联的串联系统中，组合系统的传递函数矩阵等于子系统传递函数矩阵的积。\n\n$$G(s)=G_n(s)\\cdots G_2(s)G_1(s)   \\tag{19}$$\n\n:::info \n\n注：子系统传递函数矩阵的积遵循左乘原则。\n\n:::\n\n### 反馈联结\n\n对于系统 $G_1(s)$，若添加反馈环节（动态反馈$G_2(s)$或常数反馈$H$），则可得到组合系统的传递函数矩阵：\n\n1. **动态反馈** 反馈子系统为动态系统$G_2(s)$。\n\n组合系统的传递函数矩阵为：\n\n$$G(s)=[I+G_2(s)G_1(s)]^{-1}G_1(s)   \\tag{20}$$\n\n2. **常数反馈**  反馈环节为常数矩阵$H$。\n\n组合系统的传递函数矩阵为：\n\n$$G(s)=[I+HG_1(s)]^{-1}G_1(s)   \\tag{21}$$\n\n## 线性变换\n\n### 系统状态的线性变换\n\n对于一个状态方程$\\left\\{ \\begin{matrix} \\dot{x}=Ax+Bu\\\\y=Cx+Du\\\\\\end{matrix}\\right.$，选择非奇异矩阵$P\\in R^{n\\times n}$作为变换阵，有$x=P\\overline{x}$，那么此时状态方程可表示为：\n\n$$\\dot{\\overline{x}}=P^{-1}\\dot{x}=P^{-1}[Ax+Bu]=P^{-1}AP\\overline{x}+P^{-1}Bu=\\overline{A}\\overline{x}+\\overline{B}u   \\tag{22}$$\n\n$$y=Cx=CP\\overline{x}=\\overline{C}\\overline{x}    \\tag{23}$$\n\n其中，$\\overline{A}=P^{-1}AP,\\overline{B}=P^{-1}B,\\overline{C}=CP,\\overline{D}=D$。\n\n:::info\n\n该方法通常用于将非对角阵$A$转化为对角阵$\\overline{A}$，从而实现状态变量的解耦。\n\n:::\n\n:::danger no-icon\n\n线性定常系统的系统矩阵A的特征值是表征系统的动力学特性的重要参量。系统的状态方程可通过适当的线性非奇异变换化为由特征值表征的标准形，对分析系统的结构特性非常直观。 \n\n1. 特征值互异时，标准形为对角阵。\n2. 特征值非互异时，标准形一般为约当阵。 \n\n:::\n\n### 状态方程转化为对角标准型\n\n### 状态方程转化为若尔当标准型\n\n### 状态变换后特征值及传递函数矩阵的不变形\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["矩阵","相似变换"],"categories":["矩阵论"]},{"title":"06 状态反馈和状态观测器","url":"/2023/12/21/2023-12-21-状态反馈和状态观测器/","content":"\n现代控制理论——06 状态反馈和状态观测器\n\n<!-- more -->\n\n# 状态反馈和状态观测器\n\n## 状态反馈\n\n状态反馈的公式可表示为：\n\n$$u=Lv-Kx     \\tag{1}$$\n\n定常系统$\\left\\{\\begin{aligned}\\dot{x}&=Ax+Bu\\\\y&=Cx\\end{aligned}\\right.$ 表示为 $\\left\\{\\begin{aligned}\\dot{x}&=(A-BK)x+BLv\\\\y&=Cx\\end{aligned}\\right.$ 。\n\n:::info no-icon\n\n引入状态反馈并不影响系统的能控性，但有可能影响系统的能观测性。\n\n:::\n\n### 极点配置定理\n\n给定系统 $\\Sigma:\\left\\{\\begin{aligned}\\dot{x}&=Ax+Bu\\\\y&=Cx+Du\\end{aligned}\\right.$ 通过状态反馈 $u=Lv-Kx$ 能使闭环极点位于预先任意指定位置上的充要条件是该系统 $\\Sigma$ 完全能控。\n\n+++info 证明\n\n**充分性**：\n\n\n\n**必要性**：\n\n\n\n+++\n\n### 单输入系统极点配置算法\n\n求 $1\\times n$ 的实向量 $K$，使得矩阵 $(A-bK)$ 的特征值为给定的复共轭成对出现的 $\\lambda_1^*,\\lambda_2^*,\\dots,\\lambda_n^*$。\n\n1. **算法1**  适用于系统维数较高，控制矩阵中非零元素较多的情况。\n\n:::info no-icon\n\n计算前先判断系统是否完全可控，即判断 $rank(U_c)=n$ 。具体原因见[极点配置定理](#极点配置定理)\n\n:::\n\n+ 求 $A$ 的特征多项式：$a(s)=det(sI-A)=s^n+a_1s^{n-1}+\\dots+a_{n-1}s+a_n$ 。\n+ 求闭环系统的期望特征多项式：$a^*(s)=(s-\\lambda_1^*)(s-\\lambda_2^*)\\dots (s-\\lambda_n^*)=s^n+a_1^*s^{n-1}+\\dots+a_{n-1}s+a_n$ 。\n+ 计算：$\\tilde{K}=\\begin{bmatrix}a_n^*-a_n&a_{n-1}^*-a_{n-1}&\\dots&a_1^*-a_1\\end{bmatrix}$ 。\n+ 计算：$Q=\\begin{bmatrix}b&Ab&\\dots&A^{n-1}b\\end{bmatrix}\\cdot{}\\begin{bmatrix}a_{n-1}&\\dots&a_1&1\\\\\\vdots&\\cdot^{\\cdot^{\\cdot}}&\\cdot^{\\cdot^{\\cdot}}&\\\\a_1&\\cdot^{\\cdot^{\\cdot}}&0&\\\\1\\end{bmatrix}$ 。\n+ 令 $P=Q^{-1}$，求 $K=\\tilde{K}P$ 。\n\n+++info 例题\n\n;;;id1 例题1\n\n:::info no-icon\n\n给定系统的状态空间表达式 $\\dot{x}=\\begin{bmatrix}0&0&0\\\\1&-1&0\\\\0&1&-1\\end{bmatrix}x+\\begin{bmatrix}1\\\\0\\\\0\\end{bmatrix}u$，求状态反馈矩阵 $K$ 使得反馈后闭环特征值为 $\\lambda_1^*=-2,\\lambda_{2,3}^*=-1\\pm j\\sqrt{3}$。\n\n:::\n\n由于 $rank(U_c)=rank(\\begin{bmatrix}b&Ab&A^2b\\end{bmatrix})=rank\\begin{bmatrix}1&0&0\\\\0&1&-1\\\\0&0&1\\end{bmatrix}=3$，故系统完全可控。\n\n+ $det({sI-A})=det\\begin{bmatrix}s&0&0\\\\-1&s+1&0\\\\0&-1&s+1\\end{bmatrix}=s^3+2s^2+s$，得到 $a_1=2,a_2=1,a_3=0$。\n+ $(s-\\lambda_1^*)(s-\\lambda_2^*)(s-\\lambda_3^*)=(s+2)(s+1+j\\sqrt3)(s+1-j\\sqrt3)=s^3+4s^2+8s+8$，得到 $a_1^*=4,a_2^*=8,a_3^*=8$。\n+ $\\tilde{K}=\\begin{bmatrix}a_3^*-a_3&a_2^*-a_2&a_1^*-a_1\\end{bmatrix}=\\begin{bmatrix}8&7&2\\end{bmatrix}$ 。\n+ $Q=\\begin{bmatrix}b&Ab&A^2b\\end{bmatrix}\\cdot{}\\begin{bmatrix}a_2&a_1&1\\\\a_1&1&0\\\\1&0&0\\end{bmatrix}=\\begin{bmatrix}1&2&1\\\\1&1&0\\\\1&0&0\\end{bmatrix}$ 。\n+  $P=Q^{-1}=\\begin{bmatrix}1&2&1\\\\1&1&0\\\\1&0&0\\end{bmatrix}^{-1}=\\begin{bmatrix}0&0&1\\\\0&1&-1\\\\1&-2&1\\end{bmatrix}$， $K=\\tilde{K}P=\\begin{bmatrix}8&7&2\\end{bmatrix}\\begin{bmatrix}0&0&1\\\\0&1&-1\\\\1&-2&1\\end{bmatrix}=\\begin{bmatrix}2&3&3\\end{bmatrix}$ 。\n\n;;;\n\n+++\n\n2. **算法2**  适用于系统维数较低，控制矩阵中只有一个非零元素的情况。\n\n+ 将 $u=-Kx$ 代入系统状态方程 $sI-A+bK$，求得相应闭环系统的特征多项式： $a(s)=s^n+a_1(K)s^{n-1}+\\cdots+a_{n-1}(K)s+a_n(K)$。\n+ 计算理想特征多项式：$a^*(x)=(s-\\lambda_1^*)(s-\\lambda_2^*)\\cdots(s-\\lambda_n^*)=s^n+a_1^*s^{n-1}+\\cdots+a_{n-1}^*s+a_n^*$。\n+ 将 $a(s)$ 与 $a^*(s)$ 各项一一对应即可求解。\n\n+++info 例题\n\n;;;id2 例题1\n\n:::info no-icon\n\n给定系统的状态空间表达式 $\\dot{x}=\\begin{bmatrix}0&0&0\\\\1&-1&0\\\\0&1&-1\\end{bmatrix}x+\\begin{bmatrix}1\\\\0\\\\0\\end{bmatrix}u$，求状态反馈矩阵 $K$ 使得反馈后闭环特征值为 $\\lambda_1^*=-2,\\lambda_{2,3}^*=-1\\pm j\\sqrt{3}$。\n\n:::\n\n由于 $rank(U_c)=rank(\\begin{bmatrix}b&Ab&A^2b\\end{bmatrix})=rank\\begin{bmatrix}1&0&0\\\\0&1&-1\\\\0&0&1\\end{bmatrix}=3$，故系统完全可控。\n\n+ 设所需的状态反馈矩阵 $K$ 为 $K=\\begin{bmatrix}k_1&k_2&k_3\\end{bmatrix}$，则经过状态反馈 $u=v-Kx$ 后闭环系统的特征多项式为:\n\n$$\\begin{aligned}a(s)&=det(sI-A+bK)\\\\&=det\\begin{Bmatrix}\\begin{bmatrix}s&0&0\\\\0&s&0\\\\0&0&s\\end{bmatrix}-\\begin{bmatrix}0&0&0\\\\1&-1&0\\\\0&1&-1\\end{bmatrix}+\\begin{bmatrix}1\\\\0\\\\0\\end{bmatrix}\\begin{bmatrix}k_1&k_2&k_3\\end{bmatrix}\\end{Bmatrix}\\\\&=s^3+(2+k_1)s^2+(2k_1+k_2+1)s+(k_1+k_2+k_3)\\end{aligned}$$\n\n+ 由题，目标闭环期望极点对应的闭环特征多项式为：$a^*(s)=(s+2)(s+1+j\\sqrt{3})(s+1-j\\sqrt{3})=s^3+4s^2+8s+8$。\n+ 对比 $a(s)$ 与 $a^*(s)$ ，可得 $2+k_1=4,2k_1+k_2+1=8,k_1+k_2+k_3=8$。解得 $K=\\begin{bmatrix}k_1&k_2&k_3\\end{bmatrix}=\\begin{bmatrix}2&3&3\\end{bmatrix}$。\n\n;;;\n\n+++\n\n## 状态观测器\n\n### 状态观测器的存在条件\n\n:::info no-icon\n\n1. 充分条件：能观测。\n2. 充要条件：不能观测的部分渐进稳定。\n\n:::\n\n 给定定常系统 $\\Sigma:\\left\\{\\begin{aligned}\\dot{x}&=Ax+Bu\\\\y&=Cx\\end{aligned}\\right.$ ，若状态完全能观测，则状态向量 $x$ 能够由输入 $x$ 和输出 $y$ 表示。\n\n+++info 证明\n\n由于 $\\left\\{\\begin{aligned}y&=Cx\\\\\\dot{y}&=C\\dot{x}=CAx+CBu\\\\y^{(n)}&=CA\\dot{x}+CB\\dot{u}=CA^2x+CABu+CB\\dot{u}\\\\ &\\vdots\\\\y^{(n-1)}&=CA^{n-1}x+CA^{n-2}Bu+\\cdots+CBu^{(n-2)}\\end{aligned}\\right.$ ，则\n\n$$\\begin{bmatrix}y\\\\\\dot{y}-CBu\\\\y^{(n)}-CABu-CB\\dot{u}\\\\ \\vdots\\\\y^{(n-1)}-CA^{n-2}Bu-\\cdots-CBu^{(n-2)}\\end{bmatrix}=\\begin{bmatrix}C\\\\CA\\\\CA^2\\\\\\vdots\\\\CA^{n-1}\\end{bmatrix}x=Nx$$\n\n当且仅当 $rank(N)=n$ 时，上述 $x$ 有唯一解。$N$即是能观性矩阵。\n\n+++\n\n\n\n\n\n\n\n\n\n\n\n","categories":["现代控制理论"]},{"title":"05 控制系统的李雅普诺夫稳定性分析","url":"/2023/12/15/2023-12-15-控制系统的李雅普诺夫稳定性分析/","content":"\n现代控制理论——05 控制系统的李雅普诺夫稳定性分析\n\n<!-- more -->\n\n# 控制系统的李雅普诺夫稳定性分析\n\n## 李氏稳定性的定义\n\n何为平衡状态？对于一个系统 $\\dot{x}=f(x,t)$，若果存在状态 $x_e$ 满足 $\\dot{x}_e\\equiv 0$，那么该状态即为平衡状态。\n\n1. **稳定**：对于任意实数 $\\varepsilon>0$，都存在一个实数 $\\delta>0$ 满足 $||x_0-x_e||\\leq\\delta$，从任意 $x_0$ 触发的解都能够满足 $||x_t-x_e||\\leq\\varepsilon$，则称 $x_e$ 在李雅普诺夫意义下是**稳定**的。\n2. **渐进稳定**：当上述解能够满足 $||x_t-x_e||\\leq\\mu$，也就是能够收敛到 $x_e$ 时，则称系统**渐进稳定**。\n3. **不稳定**：无论 $\\delta$ 有多小，都会使得 $||x_t-x_e||>\\varepsilon$，则称系统**不稳定**。\n\n![](https://s1.imagehub.cc/images/2023/12/15/0dfa81a886d2cba99a38d05364f57ecd.png)\n![](https://s1.imagehub.cc/images/2023/12/15/8d8829ffb7da9bc162c4e91874a019f9.png)\n![](https://s1.imagehub.cc/images/2023/12/15/f84bc555ea80a021158a0f6dab2b292b.png) {.gallery}\n\n4. **大范围渐进稳定**：从状态空间中所有初始点出发的轨迹都具有渐进稳定性，那么状态 $x_e$ 为**大范围渐进稳定**。\n\n5. **正定函数**：对于函数 $V(x)$，在区域 $S$ 内的所有 $x$ 都有：① $V(x)$ 中的各分量的偏导均存在；②$V(0)=0$ ；③当 $x\\neq0$ 时， $V(x)>0 (V(x)\\geq0)$ 。则称该函数是正定(半正定)的。\n\n## 李雅普诺夫第一方法\n\n1. 线性系统的稳定性判据\n\n李雅普诺夫稳定的充要条件：系统矩阵 $A$ 的全部特征值实部大于0，即位于复平面左半部。\n\n2. 非线性系统的稳定性判据\n\n对于非线性系统 $\\dot{x}=f(x)$，讨论其在可能平衡状态 $x_e$ 的稳定性。引入新向量 $y=x-x_e$，那么系统的状态方程转换为 $\\dot{y}=Ay+G(y)y$，其中 $A$ 为雅克比矩阵。 \n\n......\n\n## 李雅普诺夫第二方法\n\n对于状态方程为 $\\dot{x}=f(x,t),f(0,t)=0$ 的系统，存在一个具有连续偏导的标量函数 $V(x,t)$，满足\n\n1. $V(x,t)$ 正定，$\\dot{V}(x,t)$ 半正定，则系统在原点**一致稳定**；在此基础上，若对于任意 $t_0$ 和 $x_0\\neq0$，在 $t\\geq t_0$ 时不恒等于 0，则系统在原点**渐进稳定**；在此基础上，若随着 $||x||\\to \\infty$，$V(x,t)\\to \\infty$，则系统在原点**大范围渐进稳定**。\n\n2. $V(x,t)$ 正定，$\\dot{V}(x,t)$ 正定，则系统在原点**不稳定**；\n\n+++info 例题 \n\n;;;id1 例题1\n\n:::info no-icon\n\n用李雅普诺夫第二方法判断以下系统的稳定性。\n\n$$\\begin{aligned}&\\dot{x}_1=-(x_1+x_2)-x_2^2\\\\&\\dot{x}_2=-(x_1+x_2)+x_1x_2\\end{aligned}$$\n\n:::\n\n系统存在的唯一可能平衡状态为 $x_1=0,x_2=0$，取标量函数 $V(x)=x_1^2+x_2^2$，显然 $V(x)$ 正定，求导有 \n\n$$\\dot{V}(x)=2x_1\\dot{x}_1+2x_2\\dot{x}_2=-2(x_1+x_2)^2$$\n\n负定。除原点外有 $x_1=-x_2$ 使得 $\\dot{V}(x)=0$，但是系统状态仍在转移中，故 $\\dot{V}(x)$ 不会恒定等于 0。且随着 $||x||\\to \\infty$，$V(x)\\to \\infty$，故系统在原点大范围渐进稳定。\n\n:::\n\n+++\n\n### 李雅普诺夫方程判断线性系统的稳定性\n\n1. 在连续系统 $\\dot{x}=Ax$ 中，在平衡状态 $x=0$ 处是大范围渐进稳定的充要条件：对于给定的正定对称实矩阵 $Q$，存在一个正定实对称矩阵 $P$ ，满足 $A^TP+PA=-Q$。（其中 $x^TPx$ 就是李雅普诺夫函数 ） \n\n2. 在离散系统 $x(k+1)=Gx(k)$，在平衡状态 $x=0$ 处是渐进稳定的充要条件：对于给定的正定对称实矩阵 $Q$，存在一个正定实对称矩阵 $P$ ，满足 $G^TPG-P=-Q$。（其中 $x^TPx$ 就是李雅普诺夫函数 ）\n\n+++info 例题\n\n;;;id2 例题1\n\n:::info no-icon\n\n以下系统的平衡状态在坐标原点，判断其渐进稳定性。\n\n$$\\dot{x}=\\begin{bmatrix}0&1\\\\-1&-1\\end{bmatrix}x$$\n\n:::\n\n设 $P=\\begin{bmatrix}p_{11}&p_{12}\\\\p_{12}&p_{22}\\end{bmatrix}$，由 $A^TP+PA=-I$ 有，$\\begin{bmatrix}0&-1\\\\1&-1\\end{bmatrix}\\begin{bmatrix}p_{11}&p_{12}\\\\p_{12}&p_{22}\\end{bmatrix}+\\begin{bmatrix}p_{11}&p_{12}\\\\p_{12}&p_{22}\\end{bmatrix}\\begin{bmatrix}0&1\\\\-1&-1\\end{bmatrix}=\\begin{bmatrix}-1&0\\\\0&-1\\end{bmatrix}$，则 $\\left\\{\\begin{aligned}&-2p_{12}=-1\\\\&p_{11}-p_{12}-p_{22}=0\\\\&2p_{12}-2p_{22}=-1\\end{aligned} \\right.\\to \\left\\{\\begin{aligned}&p_{11}=\\frac{3}{2}\\\\&p_{12}=1\\\\&p_{22}=\\frac{1}{2}\\end{aligned} \\right.$，得到 $P=\\begin{bmatrix}\\frac{3}{2}&\\frac{1}{2}\\\\\\frac{1}{2}&1\\end{bmatrix}$，验证各阶主子行列式是否大于 0：$P_{11}=\\frac{3}{2}>0$，$P_{22}=det\\begin{bmatrix}p_{11}&p_{12}\\\\p_{12}&p_{22}\\end{bmatrix}=\\frac{5}{4}>0$，故矩阵 $P$ 正定。故系统在原点大范围渐进稳定。\n\n;;;id2 例题2\n\n:::info no-icon\n\n以下系统的平衡状态在坐标原点，判断其渐进稳定性。\n\n$$\\begin{bmatrix}x_1(k+1)\\\\x_2(k+1)\\end{bmatrix}=\\begin{bmatrix}0&0.5\\\\-0.5&-1\\end{bmatrix}\\begin{bmatrix}x_1(k)\\\\x_2(k)\\end{bmatrix}$$\n\n:::\n\n设 $P=\\begin{bmatrix}p_{11}&p_{12}\\\\p_{12}&p_{22}\\end{bmatrix}$，由 $G^TPG-P=-I$ 有，$\\begin{bmatrix}0&-0.5\\\\0.5&-1\\end{bmatrix}\\begin{bmatrix}p_{11}&p_{12}\\\\p_{12}&p_{22}\\end{bmatrix}\\begin{bmatrix}0&0.5\\\\-0.5&-1\\end{bmatrix}-\\begin{bmatrix}p_{11}&p_{12}\\\\p_{12}&p_{22}\\end{bmatrix}=\\begin{bmatrix}-1&0\\\\0&-1\\end{bmatrix}$，得到 $P=\\begin{bmatrix}\\frac{52}{27}&\\frac{40}{27}\\\\\\frac{40}{27}&\\frac{100}{27}\\end{bmatrix}$，验证各阶主子行列式均大于 0，故矩阵 $P$ 正定。故系统在原点大范围渐进稳定。\n\n+++\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["现代控制理论"]},{"title":"Md+Shoka使用技巧","url":"/2023/12/14/2023-12-14_md+shoka使用技巧/","content":"\n关于Md文件使用Shoka主题渲染的关键技巧/基础\n\n<!-- more -->\n\n# 图片显示\n\n## 单个图片显示\n\n1. 图片下方显示标题内容\n\n```txt\n![](https://s1.imagehub.cc/images/2023/11/16/b60b630ac478d2911b6c682866cf5d09.jpeg \"芙宁娜\")\n```\n\n![](https://s1.imagehub.cc/images/2023/11/16/b60b630ac478d2911b6c682866cf5d09.jpeg \"芙宁娜\")\n\n2. 指定图片大小\n\n```txt \n![](https://s1.imagehub.cc/images/2023/11/16/b60b630ac478d2911b6c682866cf5d09.jpeg \"芙宁娜200*300\"){height=\"200px\" width=\"300px\"}\n```\n\n![](https://s1.imagehub.cc/images/2023/11/16/b60b630ac478d2911b6c682866cf5d09.jpeg \"芙宁娜200*300\"){height=\"200px\" width=\"300px\"}\n\n3. 使用本地图片时，编辑器和Shoka同时渲染出图片\n\n在`_posts`路径下创建一个与md文件同名（不带文件尾缀）的文件夹，将图片放在该文件夹下，调用图片时使用相对路径调用。以本文件为例，文件名为`2023-12-14_md+shoka使用技巧.md`，在文件同级目录下创建文件夹`2023-12-14_md+shoka使用技巧`，内含图片`芙宁娜.jpg`。图片引用小括号内填写（格式问题，就不用代码块了）：`2023-12-14_md+shoka使用技巧/芙宁娜.jpg`\n\n## 多个图片显示\n\n使用相册图案列表（**注意图片之间不用换行，我这里为了方便看所以分行了**）\n\n```txt\n![](https://s1.imagehub.cc/images/2023/11/16/b60b630ac478d2911b6c682866cf5d09.jpeg)\n![](https://s1.imagehub.cc/images/2023/11/16/49ada8b3e781b287ee31af3cc75393fd.jpeg)\n![](https://s1.imagehub.cc/images/2023/11/16/ec096dea8315c4068cd0e2aac4ac628f.jpeg)\n![](https://s1.imagehub.cc/images/2023/11/16/dbb87c34a09e2edb4e2324cb8f8cf42c.jpeg) {.gallery}\n```\n\n![](https://s1.imagehub.cc/images/2023/11/16/b60b630ac478d2911b6c682866cf5d09.jpeg)![](https://s1.imagehub.cc/images/2023/11/16/49ada8b3e781b287ee31af3cc75393fd.jpeg) ![](https://s1.imagehub.cc/images/2023/11/16/ec096dea8315c4068cd0e2aac4ac628f.jpeg) ![](https://s1.imagehub.cc/images/2023/11/16/dbb87c34a09e2edb4e2324cb8f8cf42c.jpeg) {.gallery}\n\n设置每行高度：data-height，默认为220。\n\n```txt\n![](https://s1.imagehub.cc/images/2023/11/16/b60b630ac478d2911b6c682866cf5d09.jpeg)\n![](https://s1.imagehub.cc/images/2023/11/16/49ada8b3e781b287ee31af3cc75393fd.jpeg)\n![](https://s1.imagehub.cc/images/2023/11/16/ec096dea8315c4068cd0e2aac4ac628f.jpeg)\n![](https://s1.imagehub.cc/images/2023/11/16/dbb87c34a09e2edb4e2324cb8f8cf42c.jpeg) {.gallery  data-height=\"100\"}\n```\n\n![](https://s1.imagehub.cc/images/2023/11/16/b60b630ac478d2911b6c682866cf5d09.jpeg)![](https://s1.imagehub.cc/images/2023/11/16/49ada8b3e781b287ee31af3cc75393fd.jpeg)![](https://s1.imagehub.cc/images/2023/11/16/ec096dea8315c4068cd0e2aac4ac628f.jpeg)![](https://s1.imagehub.cc/images/2023/11/16/dbb87c34a09e2edb4e2324cb8f8cf42c.jpeg) {.gallery  data-height=\"100\"}\n\n\n\n# 代码显示\n\n填入基本格式：`[language] [title] [url] [link text] [mark] [command]`\n\n`language`：语言类型（raw表示空显示代码块）。`title`：标题内容。`url`：链接。`link text`：链接显示内容。`mark`：行高亮显示，用法为：`mark:2,4,5-8,9`。`command`：命令行提示符，用法为：`command:(\">> root$\":1,4||\">> host$\":6,7)`\n\n## 编程语言代码\n\n```raw\npython 示例代码 https://hening25.gitee.io 链接 mark:1,3-4\n\nimport math\nimport numpy as np\nimport torch\narray = np.arrary([1,2,3])\n```\n\n\n\n```python 示例代码 https://hening25.gitee.io 链接 mark:1,3-4\nimport math\nimport numpy as np\nimport torch\narray = np.arrary([1,2,3])\n```\n\n## 命令行\n\n```raw\nbash 命令行 https://hening25.gitee.io 链接 command:(\"(base) PS D:\\> \":1,2,6||\"(base) PS D:\\Github>\":7)\n\nls\npwd\nPath\n----\nD:\\\ncd Github\npwd\nPath\n----\nD:\\Github\n```\n\n\n\n```bash 命令行 https://hening25.gitee.io 链接 command:(\"(base) PS D:\\> \":1,2,6||\"(base) PS D:\\Github>\":7)\nls\npwd\nPath\n----\nD:\\\ncd Github\npwd\nPath\n----\nD:\\Github\n```\n\n# PDF文件显示\n\n```\n{% pdf file_path  600 1000%}\n```\n\n\n\n# 待办事件\n\n```raw\n- [ ] 叉叉\n- [x] 勾勾\n{.danger}\n\n- [ ] 叉叉\n- [x] 勾勾\n{.danger}\n\n- [ ] 叉叉\n- [x] 默认颜色\n```\n\n- [ ] 叉叉\n- [x] 勾勾\n\n{.danger}\n\n- [ ] 叉叉\n- [x] 勾勾\n\n{.primary}\n\n- [ ] 叉叉\n- [x] 默认颜色\n\n\n\n\n\n# 习题模式\n\n该模式需要在`Front Matter`中添加`quiz: true`。\n\n| 标签               | 含义             |\n| :----------------- | ---------------- |\n| `{.quiz}`          | 选择题           |\n| `{.quiz .multi}`   | 多选题           |\n| `{.quiz .true}`    | 正确的判断题     |\n| `{.quiz .false}`   | 错误的判断题     |\n| `{.quiz .fill}`    | 填空题           |\n| `[]{.gap}`         | 空白下划线       |\n| `[答案内容]{.gap}` | 答案内容下划线   |\n| `{.options}`       | 选择题的选项     |\n| `{.correct}`       | 选择题的正确选项 |\n| `>`                | 答案解析         |\n| `[8.2]{.mistake}`  | 错题备注         |\n\n\n\n```raw\n1. 下列定义中合法的是[]{.gap}。{.quiz .multi}\n\t- `shor _a=1-.1e-1;` {.correct}\n\t- `double b=1+5e2.5;`\n\t- `long do=0xfdaL;`\n\t- `float end_=0.1;` {.correct}\n\t{.options}\n\t> - :heavy_check_mark: 正确\n\t> - :x: 错误\n\t> - :x: 错误\n\t> - :heavy_check_mark: 正确\n2. -8在内存中的存储形式是[]{.gap}。{.quiz}\n\t- `11111111 11111000` {.correct}\n\t- `10000000 00001000`\n\t- `00000000 00001000`\n\t- `11111111 11110111`\n\t{.options}\n3. 已知int x=6;则执行x+=x-=x*x语句后，x的值是[-60]{.gap}。{.quiz .fill}\n```\n\n1. 下列定义中合法的是[]{.gap}。{.quiz .multi}\n\t- `shor _a=1-.1e-1;` {.correct}\n\t- `double b=1+5e2.5;`\n\t- `long do=0xfdaL;`\n\t- `float end_=0.1;` {.correct}\n\t  {.options}\n\t> - :heavy_check_mark: 正确\n\t> - :x: 错误\n\t> - :x: 错误\n\t> - :heavy_check_mark: 正确\n\t> {.options}\n2. -8在内存中的存储形式是[]{.gap}。{.quiz}\n\t\n\t- `11111111 11111000` {.correct}\n\t- `10000000 00001000`\n\t- `00000000 00001000`\n\t- `11111111 11110111`\n\t{.options}\n\n3. 已知int x=6;则执行x+=x-=x*x语句后，x的值是[-60]{.gap}。 {.quiz .fill} \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["杂谈"]},{"title":"04 线性系统的能控性和能观测性","url":"/2023/12/06/2023-12-06-线性系统的能控性和能观测性/","content":"\n现代控制理论——04 线性系统的能控性和能观测性\n\n<!-- more -->\n\n# 线性系统的能控性和能观测性\n\n## 能控性\n\n能控性的简单理解为输入能够控制系统的状态变量 $x(t)$ 和输出变量 $y(t)$）。\n\n+++info 例子\n\n以下图结构图系统为例，输入 $u$ 只能影响 $x_1$ 而不能影响 $x_2$ ，因此可以说该系统中 $x_2$ 不可控， $x_1$ 可控，系统整体不可控。\n\n![](2023-12-06-线性系统的能控性和能观测性/01能控性例子.png){height=\"100px\" width=\"400px\"}\n\n+++\n\n\n\n### 线性定常系统的能控性定义\n\n对于线性定常系统： \n\n$$\\dot{x}=Ax+Bu     \\tag{1}$$\n\n 如果存在输入控制 $u(t)$ 在有限的时间 $[t_0,t_1]$ 内能将系统从初始状态 $x(t_0)$ 转移到任意的状态 $x(t_1)$ 。\n\n### 线性定常系统的能控性判据\n\n1. 判据1（PHB判据）：对于式（1），系统，该系统完全能控的充要条件为能控性矩阵\n\n$$U_c=\\begin{bmatrix}B&AB&\\cdots&A^{n-1}B\\end{bmatrix}   \\tag{2}$$\n\n的秩为 $n$ ，即 $rankU_c =n$。\n\n- 对于线性系统，经过线性非奇异变换后，状态能控性不变。（即能控性与系统有关，与状态变量的选取无关）\n\n```matlab 线性定常系统的能控性判据一示例代码\nA = [1,2,1;0,1,0;1,0,3];   % A矩阵必须为n*n矩阵\nB = [1,0;0,1;0,0];         % B矩阵必须为n*k矩阵\n[n, ~] = size(A);          % 获取状态变量维数\nUc = [B]; temp = B;\nfor i = 1:n-1\n    temp = A*temp;\n    Uc = [Uc,temp];    % 能控矩阵\nend\ndisp(rank(Uc)==n);     % 判断状态变量维数是否与能控矩阵的秩一致\n```\n\n+++info 例题\n\n;;;id1 例题1\n\n:::info no-icon\n\n考察以下系统的能控性。\n\n$$\\begin{bmatrix}\\dot{x}_1\\\\\\dot{x}_2\\\\\\dot{x}_3\\end{bmatrix}=\\begin{bmatrix}1&2&1\\\\0&1&0\\\\1&0&3\\end{bmatrix}\\begin{bmatrix}x_1\\\\x_2\\\\x_3\\end{bmatrix}+\\begin{bmatrix}1&0\\\\0&1\\\\0&0\\end{bmatrix}\\begin{bmatrix}u_1\\\\u_2\\end{bmatrix}$$\n\n:::\n\n由题 $B=\\begin{bmatrix}1&0\\\\0&1\\\\0&0\\end{bmatrix}$， $AB=\\begin{bmatrix}1&2&1\\\\0&1&0\\\\1&0&3\\end{bmatrix}\\begin{bmatrix}1&0\\\\0&1\\\\0&0\\end{bmatrix}=\\begin{bmatrix}1&2\\\\0&1\\\\1&0\\end{bmatrix}$，$A^2B=\\begin{bmatrix}1&2&1\\\\0&1&0\\\\1&0&3\\end{bmatrix}\\begin{bmatrix}1&2\\\\0&1\\\\1&0\\end{bmatrix}=\\begin{bmatrix}2&4\\\\0&1\\\\4&2\\end{bmatrix}$。\n\n故 $U_c=\\begin{bmatrix}1&0&1&2&2&4\\\\0&1&0&1&0&1\\\\0&0&1&0&4&2\\end{bmatrix}$，其秩为3，故该系统可控。\n\n;;;\n\n+++\n\n2. 判据2：对于式（1）系统，若系统矩阵 $A$ 具有互不相同的特征值，则系统状态可控的充要条件是，系统经过线性非奇异变换后，矩阵 $A$ 转换为对角标准型，状态方程为 $\\dot{\\hat{x}}=\\begin{bmatrix}\\lambda_1&&0\\\\&\\ddots&\\\\0&&\\lambda_n\\end{bmatrix}\\hat{x}+\\hat{B}u$，其中 $\\hat{B}$ 中不含全为0的行。\n\n+++primary 证明（理解）\n\n我们把上述的对角标准型状态方程 $\\dot{\\hat{x}}=\\begin{bmatrix}\\lambda_1&&0\\\\&\\ddots&\\\\0&&\\lambda_n\\end{bmatrix}\\hat{x}+\\hat{B}u$ 展开：\n\n$$\\left\\{ \\begin{matrix}\\dot{\\hat{x}}_1=\\lambda_1\\hat{x}_1+\\hat{b}_{11}u_1+\\hat{b}_{12}u_2+\\cdots+\\hat{b}_{1p}u_p\\\\\\dot{\\hat{x}}_2=\\lambda_2\\hat{x}_2+\\hat{b}_{21}u_1+\\hat{b}_{22}u_2+\\cdots+\\hat{b}_{2p}u_p\\\\\\vdots\\\\\\dot{\\hat{x}}_n=\\lambda_n\\hat{x}_n+\\hat{b}_{n1}u_1+\\hat{b}_{n2}u_2+\\cdots+\\hat{b}_{np}u_p\\\\\\end{matrix}\\right.$$\n\n从中可以看出状态变量间是解耦的，状态变量间是没有联系的。若 $\\hat{B}$ 中存在一行全为0，那么该行对应的状态变量将不受输入的控制，故系统不可控。\n\n- 为何要转换为对角标准型：若非对角标准型，状态变量间并不是解耦的，那么输入便可通过状态变量间的耦合关系进行控制。\n\n+++\n\n+++info 例题\n\n;;;id2 例题1\n\n:::info no-icon\n\n判断以下系统的可控性。\n\n$$\\begin{bmatrix}\\dot{x}_1\\\\\\dot{x}_2\\\\\\dot{x}_3\\end{bmatrix}=\\begin{bmatrix}3&0&0\\\\0&-1&0\\\\0&0&-2\\end{bmatrix}\\begin{bmatrix}x_1\\\\x_2\\\\x_3\\end{bmatrix}+\\begin{bmatrix}2\\\\1\\\\0\\end{bmatrix}u$$\n\n:::\n\n该系统不可控，因为状态变量 $x_3$ 不可控。\n\n;;;id2 例题2\n\n:::info no-icon\n\n判断以下系统的可控性。\n\n$$\\begin{bmatrix}\\dot{x}_1\\\\\\dot{x}_2\\\\\\dot{x}_3\\end{bmatrix}=\\begin{bmatrix}-7&0&0\\\\0&-5&0\\\\0&0&-1\\end{bmatrix}\\begin{bmatrix}x_1\\\\x_2\\\\x_3\\end{bmatrix}+\\begin{bmatrix}0&1\\\\4&0\\\\7&5\\end{bmatrix}\\begin{bmatrix}u_1\\\\u_2\\end{bmatrix}$$\n\n:::\n\n该系统可控。\n\n;;;\n\n+++\n\n该判据的优点是能够容易判断出能控性，并且能够直接看出不可控的部分，但缺点在于需要等价变换。\n\n注意，上述判据2存在不适用情况：\n\n- 若系统矩阵 $A$ 为对角形但含有相同元素；\n- 若系统矩阵 $A$ 的若尔当标准型中有两个若尔当块的特征值相同；\n\n+++info 例子\n\n对于系统 $\\dot{x}=\\begin{bmatrix}1&0\\\\0&1\\end{bmatrix}x+\\begin{bmatrix}1\\\\1\\end{bmatrix}u$，矩阵 $B$ 中虽然没有全零行，但是矩阵 $A$ 为对角阵且含有相同元素，故该系统不可控。\n\n对于系统 $\\dot{x}=\\begin{bmatrix}-1&1&0\\\\0&-4&0\\\\0&0&-4\\end{bmatrix}x+\\begin{bmatrix}0\\\\1\\\\2\\end{bmatrix}u$，虽然所有若尔当块的最后一行均没有全零行，但是矩阵 $A$ 为若尔当标准型且存在两个若尔当块的特征值相同，故该系统不可控。\n\n+++\n\n若系统矩阵 $A$ 具有重特征值 $\\lambda_1(m_1重),\\lambda_2(m_2重),\\cdots,\\lambda_k(m_k重)$ 且每个重特征值只有一个若尔当块时时，则系统状态可控的充要条件是，系统经过线性非奇异变换后，系统转换为若尔当标准型，状态方程为 $\\dot{\\hat{x}}=\\begin{bmatrix}J_1&0&\\cdots&0\\\\0&J_2&\\cdots&0\\\\\\vdots&\\vdots&\\ddots&\\vdots\\\\0&0&\\cdots&J_n\\end{bmatrix}\\hat{x}+\\hat{B}u$，其中 $\\hat{B}$ 中与每个若尔当块 $J_i$ 最后一行对应的行中各元素不全为0。\n\n+++info 例题\n\n;;;id3 例题1\n\n:::info no-icon\n\n判断以下系统的可控性。\n\n$$\\begin{bmatrix}\\dot{x}_1\\\\\\dot{x}_2\\\\\\dot{x}_3\\end{bmatrix}=\\begin{bmatrix}-3&1&0\\\\0&-3&0\\\\0&0&1\\end{bmatrix}\\begin{bmatrix}x_1\\\\x_2\\\\x_3\\end{bmatrix}+\\begin{bmatrix}0&0\\\\2&-1\\\\0&3\\end{bmatrix}\\begin{bmatrix}u_1\\\\u_2\\end{bmatrix}$$\n\n:::\n\n该系统可控。\n\n;;;id3 例题2\n\n:::info no-icon\n\n判断以下系统的可控性。\n\n$$\\begin{bmatrix}\\dot{x}_1\\\\\\dot{x}_2\\\\\\dot{x}_3\\end{bmatrix}=\\begin{bmatrix}4&1&0\\\\0&4&0\\\\0&0&-2\\end{bmatrix}\\begin{bmatrix}x_1\\\\x_2\\\\x_3\\end{bmatrix}+\\begin{bmatrix}4&2\\\\0&0\\\\3&0\\end{bmatrix}\\begin{bmatrix}u_1\\\\u_2\\end{bmatrix}$$\n\n:::\n\n该系统不可控。\n\n+++\n\n### 线性定常系统的输出能控性\n\n很多情况下，被控制量往往是系统的输出而非状态变量，因此还需分析输出能控性。\n\n1. 输出能控性的定义：对于线性定常系统： $\\dot{x}=Ax+Bu$， 如果存在输入控制 $u(t)$ 在有限的时间 $[t_0,t_1]$ 内能将系统从初始状态 $y(t_0)$ 转移到任意的状态 $y(t_1)$ ，那么可以说明系统是输出的完全可控。\n2. 输出可控性的判据：系统输出完全可控的充要条件是矩阵 $\\begin{bmatrix}CB&CAB&CA^2B&\\cdots&CA^{n-1}B\\end{bmatrix}$ 的秩等于输出的维数，即矩阵 $C$ 的维数。\n\n```matlab 输出可控性示例代码\nA = [-4,1;2,-3];   % A矩阵必须为n*n矩阵\nB = [1;2];         % B矩阵必须为n*k矩阵\nC = [1,0];         % C矩阵必须为p*n矩阵\n[n, ~] = size(A);  % 获取状态变量维数\n[p, ~] = size(C);  % 获取输出维数\nUc = [C*B]; temp = eye(n,n);\nfor i = 1:n-1\n    temp = temp*A;\n    Uc = [Uc,C*temp*B];\nend\ndisp(rank(Uc)==p);\n```\n\n+++info 例题\n\n;;;id4 例题1\n\n:::info no-icon\n\n判断以下系统的状态能控性和输出能控性。\n\n$$\\begin{matrix}\\begin{bmatrix}\\dot{x}_1\\\\\\dot{x}_2\\end{bmatrix}=\\begin{bmatrix}-4&1\\\\2&-3\\end{bmatrix}\\begin{bmatrix}x_1\\\\x_2\\end{bmatrix}+\\begin{bmatrix}1\\\\2\\end{bmatrix}u\\\\y=\\begin{bmatrix}1&0\\end{bmatrix}\\begin{bmatrix}x_1\\\\x_2\\end{bmatrix}\\end{matrix}$$\n\n:::\n\n系统的状态能控性矩阵：$\\begin{bmatrix}B&AB\\end{bmatrix}=\\begin{bmatrix}1&-2\\\\2&-4\\end{bmatrix}$，秩为1，故系统状态不可控。\n\n系统的输出能控性矩阵：$\\begin{bmatrix}CB&CAB\\end{bmatrix}=\\begin{bmatrix}1&-2\\end{bmatrix}$，秩为1，故系统输出可控。\n\n+++\n\n## 能观测性\n\n能观测性是指通过对输出的测量来确定系统的状态变量，反映了从系统外部观测系统内部的能力。\n\n在前面**状态方程的解**方面的内容中，我们知道线性时不变系统动态方程（取初态时间 $t_0=0$）的解为：\n\n$$x(t)=e^{A(t)}x(0)+\\int_{0}^te^{A(t-\\tau)}Bu(\\tau)\\,d\\tau,  t\\geq0   \\tag{3}$$\n\n上式中，系统矩阵 $A,B$ 以及控制输入 $u(t)$ 已知，因此只需要关注初态 $x(0)$ 即可得到 $x(t)$。\n\n### 线性定常系统的能观性定义\n\n对于线性定常系统： \n\n$$\\left\\{ \\begin{aligned}\\dot{x}&=Ax+Bu\\\\y&=Cx   \\end{aligned}\\right.  \\tag{4}$$\n\n 如果在任意给定的输入 $u(t)$ 下，根据输出 $y(t)$ 在有限的时间 $[t_0,t_1]$ 内的测量值唯一确定初始状态 $x(t_0)$ ，则称系统在 $t_0$ 时刻可观测。若在任意时刻都可观测，则该系统是状态完全可观测的。\n\n### 线性定常系统的能观性判据\n\n1. 判据1：对于式（4），系统，该系统完全能控的充要条件为能控性矩阵\n\n$$U_o=\\begin{bmatrix}C\\\\CA\\\\\\vdots\\\\CA^{n-1}\\end{bmatrix}   \\tag{5}$$\n\n的秩为 $n$ ，即 $rankU_o =n$。\n\n```matlab 线性定常系统的能观性判据一示例代码\nA = [2,-1;1,-3];   % A矩阵必须为n*n矩阵\nB = [-1;1];        % B矩阵必须为n*k矩阵\nC = [1,0;-1,0];    % C矩阵必须为p*n矩阵\n[n, ~] = size(A);  % 获取状态变量维数\n[p, ~] = size(C);  % 获取输出维数\nUo = [C]; %temp = eye(n,n);\nfor i = 1:n-1\n    Uo = [Uo;Uo(end-p+1:end,:)*A];\nend\ndisp(rank(Uo)==p);\n```\n\n+++info 例题\n\n;;;id5 例题1\n\n:::info no-icon\n\n判断以下系统的能观测性\n\n$$\\begin{aligned}\\begin{bmatrix}\\dot{x_1}\\\\\\dot{x_2}\\end{bmatrix}&=\\begin{bmatrix}2&-1\\\\1&-3\\end{bmatrix}\\begin{bmatrix}x_1\\\\x_2\\end{bmatrix}+\\begin{bmatrix}-1\\\\1\\end{bmatrix}u\\\\\\begin{bmatrix}y_1\\\\y_2\\end{bmatrix}&=\\begin{bmatrix}1&0\\\\-1&0\\end{bmatrix}\\begin{bmatrix}x_1\\\\x_2\\end{bmatrix} \\end{aligned}$$\n\n:::\n\n系统的能观性矩阵 $U_o=\\begin{bmatrix}C\\\\CA\\\\\\end{bmatrix}=\\begin{bmatrix}1&0\\\\-1&0\\\\2&-1\\\\-2&1\\end{bmatrix}$ 的秩为2，故该系统能观测。\n\n+++\n\n2. 判据2：对于式（4）系统，若系统矩阵 $A$ 具有互不相同的特征值，则系统状态可观的充要条件是，系统经过线性非奇异变换后，矩阵 $A$ 转换为对角标准型，状态方程为 $\\left\\{\\begin{aligned}\\dot{\\hat{x}}&=\\begin{bmatrix}\\lambda_1&&0\\\\&\\ddots&\\\\0&&\\lambda_n\\end{bmatrix}\\hat{x}\\\\y&=\\hat{C}\\hat{x}\\end{aligned}\\right.$，其中 $\\hat{C}$ 中不含全为0的列。\n\n若系统矩阵 $A$ 具有重特征值 $\\lambda_1(m_1重),\\lambda_2(m_2重),\\cdots,\\lambda_k(m_k重)$ 且每个重特征值只有一个若尔当块时时，则系统状态可控的充要条件是，系统经过线性非奇异变换后，系统转换为若尔当标准型，状态方程为 $\\left\\{\\begin{aligned}\\dot{\\hat{x}}&=\\begin{bmatrix}J_1&0&\\cdots&0\\\\0&J_2&\\cdots&0\\\\\\vdots&\\vdots&\\ddots&\\vdots\\\\0&0&\\cdots&J_n\\end{bmatrix}\\hat{x}\\\\y&=\\hat{C}\\hat{x}\\end{aligned}\\right.$，其中 $\\hat{C}$ 中与每个若尔当块 $J_i$ 第一列对应的行中各元素不全为0。\n\n+++info 例题\n\n;;;id6 例题1\n\n:::info no-icon\n\n判断以下系统的能观测性\n\n$$\\begin{aligned}\\dot{x}&=\\begin{bmatrix}-2&0\\\\0&5\\end{bmatrix}x\\\\y&=\\begin{bmatrix}1&3\\end{bmatrix}x \\end{aligned}$$\n\n:::\n\n该系统为对角标准型，不含全为0的列，故系统完全可观测。\n\n;;;id6 例题2\n\n:::info no-icon\n\n判断以下系统的能观测性\n\n$$\\begin{aligned}\\dot{x}&=\\begin{bmatrix}2&1&0&0\\\\0&2&0&0\\\\0&0&3&1\\\\0&0&0&3\\end{bmatrix}x\\\\y&=\\begin{bmatrix}0&1&1&0\\\\0&1&1&1\\end{bmatrix}x \\end{aligned}$$\n\n:::\n\n该系统为若尔当标准型，第一个若尔当块第一列全为0，故系统不可观测。\n\n;;;id6 例题3\n\n:::info no-icon\n\n判断以下系统的能观测性\n\n$$\\begin{aligned}\\dot{x}&=\\begin{bmatrix}-3&1&0\\\\0&-3&0\\\\0&0&1\\end{bmatrix}x\\\\y&=\\begin{bmatrix}1&0&0\\\\0&0&-1\\end{bmatrix}x \\end{aligned}$$\n\n:::\n\n该系统为若尔当标准型，所有若尔当块的第一列不全为0，故系统可观测。\n\n+++\n\n\n\n## 能控性与能观测性的对偶关系\n\n### 对偶系统\n\n对于两个系统 $\\Sigma_1:\\left\\{ \\begin{aligned}\\dot{x}&=Ax+Bu\\\\y&=Cx \\end{aligned}  \\right.$ ， $\\Sigma_2:\\left\\{ \\begin{aligned}\\dot{z}&=A^Tz+C^Tv\\\\w&=B^Tz \\end{aligned}  \\right.$，其中 $x$ 与 $z$ 的维度相同，$u$ 与 $v$ 的维度相同，$y$ 与 $w$ 的维度相同，这两个系统即是对偶系统。\n\n![](2023-12-06-线性系统的能控性和能观测性/02对偶系统.png){height=\"150px\"}\n\n### 对偶原理\n\n对于上述两个系统 $\\Sigma_1,\\Sigma_2$，$\\Sigma_1$ 能观 $\\Leftrightarrow$ $\\Sigma_2$ 能控，$\\Sigma_1$ 能控 $\\Leftrightarrow$ $\\Sigma_2$ 能观。\n\n+++info 证明\n\n证明 $\\Sigma_1$ 的能观性矩阵与 $\\Sigma_2$ 的能控性矩阵一致， $\\Sigma_1$ 的能控性矩阵与 $\\Sigma_2$ 的能观性矩阵一致。\n\n+++\n\n:::info no-icon\n\n进一步分析对偶系统的传递函数可知：$G_{\\Sigma_1}(s)=[G_{\\Sigma_2}(s)]^T$\n\n:::\n\n## 线性定常系统的结构分解\n\n结构分解就是将系统的可控（可观）和不可控（不可观）的部分分离开，进而理解系统的内部。\n\n对于系统 $\\left\\{ \\begin{aligned}\\dot{x}&=Ax+Bu\\\\y&=Cx \\end{aligned}   \\right.$，以下将进行能控性分解、能观性分解和标准分解。\n\n### 能控性分解\n\n假设系统不完全可控，即能控性矩阵的秩为 $n_1<n$。存在非奇异矩阵 $T_c$ 进行状态变换 $x=T_c\\tilde{x}$ ，使得系统的状态空间方程变换为：$\\left\\{ \\begin{aligned}\\dot{\\tilde{x}}&=\\tilde{A}\\tilde{x}+\\tilde{B}u\\\\y&=\\tilde{C}x \\end{aligned}   \\right.$，其中 $\\tilde{A}=T_c^{-1}AT_c=\\begin{bmatrix}\\tilde{A}_{11}&\\tilde{A}_{12}\\\\0&\\tilde{A}_{22}\\end{bmatrix}$，$\\tilde{B}=T_c^{-1}B=\\begin{bmatrix}\\tilde{B}_{1}\\\\0\\end{bmatrix}$，$\\tilde{C}=CT_c=\\begin{bmatrix}\\tilde{C}_{1}&\\tilde{C}_2\\end{bmatrix}$，其中 $\\tilde{A}_{11},\\tilde{A}_{12},\\tilde{A}_{22}$ 均为分块矩阵，各自的维数为 $n_1\\times n_1,n_1\\times (n-n_1),(n-n_1)\\times (n-n_1)$，$\\tilde{B}_{1}$ 为 $n_1\\times p$ 的分块矩阵，$\\tilde{C}_{1},\\tilde{C}_{2}$ 为 $q\\times n_1,q\\times (n-n_1)$ 的分块矩阵。\n\n那么系统的 $n_1$ 维能控部分可表示为：$\\dot{\\tilde{x}}=\\tilde{A}_{11}\\tilde{x}_1+\\tilde{A}_{12}\\tilde{x}_2+\\tilde{B}_1u$，$n-n_1$ 维不可控部分可表示为：$\\tilde{x}_2=\\tilde{A}_{22}\\tilde{x}_2$ 。\n\n那么变换矩阵 $T_c$ 如何获取呢？\n\n+ 从能控性矩阵 $U_c=\\begin{bmatrix}B&AB&\\cdots&A^{n-1}B\\end{bmatrix}$ 中选取 $n_1$ 个线性无关的列向量作为 $T_c$ 矩阵的前 $n_1$ 列。\n+ 其余 $n-n_1$ 列可在保证 $T_c$ 非奇异的条件下任意选取。\n\n+++info 例题\n\n;;;id7 例题1\n\n:::info no-icon\n\n对下列系统进行能控性分解。\n\n$$\\begin{aligned}\\dot{x}&=\\begin{bmatrix}0&0&-1\\\\1&0&-3\\\\0&1&-3\\end{bmatrix}x+\\begin{bmatrix}1\\\\1\\\\0\\end{bmatrix}u\\\\y&=\\begin{bmatrix}0&1&-2\\end{bmatrix}x \\end{aligned}$$\n\n:::\n\n+ 计算能控性矩阵的秩。$rank\\begin{bmatrix}b&Ab&A^2b\\end{bmatrix}=rank\\begin{bmatrix}1&0&-1\\\\1&1&-3\\\\0&1&-2\\end{bmatrix}=2<3$，系统不完全可控。\n+ 选取两个线性无关的列向量 $\\begin{bmatrix}1\\\\1\\\\0\\end{bmatrix}$ 和$\\begin{bmatrix}0\\\\1\\\\1\\end{bmatrix}$。再任意选取另外一个线性无关的列向量 $\\begin{bmatrix}0\\\\0\\\\1\\end{bmatrix}$ 构成变换矩阵 $T_c=\\begin{bmatrix}1&0&0\\\\1&1&0\\\\0&1&1\\end{bmatrix}$。\n+ 求逆：$T_c^{-1}=\\begin{bmatrix}1&0&0\\\\-1&1&0\\\\1&-1&1\\end{bmatrix}$。\n+ 利用状态变换 $x=T_c\\tilde{x}$ ，得到变换后的状态空间表达式：$\\left\\{\\begin{aligned}\\dot{\\tilde{x}}&=\\begin{bmatrix}0&-1&-1\\\\1&-2&-2\\\\0&0&-1\\end{bmatrix}\\tilde{x}+\\begin{bmatrix}1\\\\0\\\\0\\end{bmatrix}u\\\\y&=\\begin{bmatrix}1&-1&-2\\end{bmatrix}\\tilde{x} \\end{aligned}\\right.$。\n\n故可控部分为：$\\left\\{\\begin{aligned}&\\dot{\\tilde{x}}_1=\\begin{bmatrix}0&-1\\\\1&-2\\end{bmatrix}\\tilde{x}_1+\\begin{bmatrix}1\\\\0\\end{bmatrix}u\\\\&y=\\begin{bmatrix}1&-1\\end{bmatrix}\\tilde{x}_1 \\end{aligned}\\right.$。\n\n+++\n\n\n\n### 能观性分解\n\n假设系统不完全能观，即能观性矩阵的秩为 $n_2<n$。存在非奇异矩阵 $T_o$ 进行状态变换 $x=T_o\\tilde{x}$ ，使得系统的状态空间方程变换为：$\\left\\{ \\begin{aligned}\\dot{\\tilde{x}}&=\\tilde{A}\\tilde{x}+\\tilde{B}u\\\\y&=\\tilde{C}x \\end{aligned}   \\right.$，其中 $\\tilde{A}=T_o^{-1}AT_o=\\begin{bmatrix}\\tilde{A}_{11}&0\\\\\\tilde{A}_{21}&\\tilde{A}_{22}\\end{bmatrix}$，$\\tilde{B}=T_o^{-1}B=\\begin{bmatrix}\\tilde{B}_{1}\\\\\\tilde{B}_{2}\\end{bmatrix}$，$\\tilde{C}=CT_o=\\begin{bmatrix}\\tilde{C}_{1}&0\\end{bmatrix}$，其中 $\\tilde{A}_{11},\\tilde{A}_{12},\\tilde{A}_{22}$ 均为分块矩阵，各自的维数为 $n_2\\times n_2,(n-n_2)\\times n_2,(n-n_2)\\times (n-n_2)$，$\\tilde{B}_{1},\\tilde{B}_{2}$ 为 $n_2\\times p,(n-n_2)\\times p$ 的分块矩阵，$\\tilde{C}_{1}$ 为 $q\\times n_2$ 的分块矩阵。\n\n那么系统的 $n_2$ 维能观部分可表示为：$\\left\\{\\begin{aligned}&\\dot{\\tilde{x}}=\\tilde{A}_{11}\\tilde{x}_1+\\tilde{B}_1u\\\\&y_1=\\tilde{C}_1\\tilde{x}_1\\end{aligned}\\right.$，$n-n_2$ 维不可观部分可表示为：$\\tilde{x}_2=\\tilde{A}_{21}\\tilde{x}_1+\\tilde{A}_{22}\\tilde{x}_2+\\tilde{B}_{2}u$ 。\n\n:::info no-icon\n\n能观子系统的传递函数矩阵与原系统的传递函数矩阵相同，因为不能观测的部分不能出现在传递函数矩阵中。\n\n:::\n\n同样关键是变换矩阵 $T_o$ 如何获取。\n\n+ 从能观性矩阵 $U_o=\\begin{bmatrix}C\\\\CA\\\\\\vdots\\\\CA^{n-1}\\end{bmatrix}$ 中选取 $n_2$ 个线性无关的行向量作为 $T_o^{-1}$ 矩阵的前 $n_2$ 行。\n+ 其余 $n-n_2$ 列可在保证 $T_o^{-1}$ 非奇异的条件下任意选取。\n\n+++info 例题\n\n;;;id8 例题1\n\n:::info no-icon\n\n对下列系统进行能观性分解。\n\n$$\\begin{aligned}\\dot{x}&=\\begin{bmatrix}0&0&-1\\\\1&0&-3\\\\0&1&-3\\end{bmatrix}x+\\begin{bmatrix}1\\\\1\\\\0\\end{bmatrix}u\\\\y&=\\begin{bmatrix}0&1&-2\\end{bmatrix}x \\end{aligned}$$\n\n:::\n\n+ 计算能观性矩阵的秩。$rank\\begin{bmatrix}C\\\\CA\\\\CA^2\\end{bmatrix}=rank\\begin{bmatrix}0&1&-2\\\\1&-2&3\\\\-2&3&-4\\end{bmatrix}=2<3$，系统不完全可观。\n+ 选取两个线性无关的行向量 $\\begin{bmatrix}0&1&-2\\end{bmatrix}$ 和$\\begin{bmatrix}1&-2&3\\end{bmatrix}$。再任意选取另外一个线性无关的行向量 $\\begin{bmatrix}0&0&1\\end{bmatrix}$ 构成变换矩阵 $T_o^{-1}=\\begin{bmatrix}0&1&-2\\\\1&-2&3\\\\0&0&1\\end{bmatrix}$。\n+ 求逆：$T_o=\\begin{bmatrix}2&1&1\\\\1&0&2\\\\0&0&1\\end{bmatrix}$。\n+ 利用状态变换 $x=T_o\\tilde{x}$ ，得到变换后的状态空间表达式：$\\left\\{\\begin{aligned}\\dot{\\tilde{x}}&=\\begin{bmatrix}0&1&0\\\\-1&-2&0\\\\1&0&-1\\end{bmatrix}\\tilde{x}+\\begin{bmatrix}1\\\\-1\\\\0\\end{bmatrix}u\\\\y&=\\begin{bmatrix}1&0&0\\end{bmatrix}\\tilde{x} \\end{aligned}\\right.$。\n\n故可观部分为：$\\left\\{\\begin{aligned}&\\dot{\\tilde{x}}_1=\\begin{bmatrix}0&-1\\\\-1&-2\\end{bmatrix}\\tilde{x}_1+\\begin{bmatrix}1\\\\-1\\end{bmatrix}u\\\\&y=\\begin{bmatrix}1&0\\end{bmatrix}\\tilde{x}_1 \\end{aligned}\\right.$。\n\n+++\n\n## 能控性、能观性与传递函数矩阵的关系\n\n在单输入单输出系统中，系统能控能观的充要条件是传递函数中没有零极点相消的现象。\n\n:::info no-icon\n\n推论\n\n1. 一个系统的传递函数所表示的是该系统既能控又能观的那一部分子系统。\n2. 一个系统的传递函数若有零、极点对消现象，则视状态变量的选择不同，系统或是不能控的或是不能观的。\n\n:::\n\n\n\n## 能控标准型\n\n在单输入单输出系统（$\\dot{x}=Ax+bu$），若系统矩阵 $A$ 和控制矩阵 $b$ 表示如下，那么其为状态空间表达式的能控标准型。\n\n$$A=\\begin{bmatrix}0&1&0&\\cdots&0\\\\0&0&1&\\cdots&0\\\\\\vdots&\\vdots&\\vdots&\\ddots&\\vdots\\\\0&0&0&\\cdots&0\\\\-a_n&-a_{n-1}&-a_{n-2}&\\cdots&-a_1\\end{bmatrix},b=\\begin{bmatrix}0\\\\0\\\\\\vdots\\\\0\\\\1\\end{bmatrix}$$\n\n对于线性定常系统 $\\dot{x}=Ax+bu$，若其能控，那么必定存在非奇异变换 $\\tilde{x}=Px$ 将该系统转换为能控标准型 $\\dot{\\tilde{x}}=A_c\\tilde{x}+b_cu$（$A_c,b_c$ 符合上述能控标准型）。非奇异变换 $P=\\begin{bmatrix}p_1\\\\P_1A\\\\\\vdots\\\\p_1A^{n-1}\\end{bmatrix}$，其中 $p_1$ 由 $p_1=\\begin{bmatrix}0&0&0&\\cdots&0&1\\end{bmatrix}\\begin{bmatrix}b&Ab&A^{2}b&\\cdots&A^{n-1}b\\end{bmatrix}^{-1}$ 确定。\n\n+++info 例题\n\n;;;id9 例题1\n\n:::info no-icon\n\n将下列线性定常系统化为能控标准型。\n\n$$\\begin{aligned}\\dot{x}&=\\begin{bmatrix}1&-1\\\\1&0\\end{bmatrix}x+\\begin{bmatrix}1\\\\1\\end{bmatrix}u \\end{aligned}$$\n\n:::\n\n系统的能控性矩阵为：$U_c=\\begin{bmatrix}b&Ab\\end{bmatrix}=\\begin{bmatrix}1&0\\\\1&1\\end{bmatrix}$，求逆得到 $U_c^{-1}=\\begin{bmatrix}1&0\\\\-1&1\\end{bmatrix}$，进而计算 $p_1=\\begin{bmatrix}-1&1\\end{bmatrix}$。则变换矩阵$P=\\begin{bmatrix}p_1\\\\p_1A\\end{bmatrix}=\\begin{bmatrix}-1&1\\\\0&1\\end{bmatrix}$，求逆得到 $P^{-1}=\\begin{bmatrix}-1&1\\\\0&1\\end{bmatrix}$。\n\n则 $A_c=PAP^{-1}=\\begin{bmatrix}0&1\\\\-1&1\\end{bmatrix},b_c=Pb=\\begin{bmatrix}0\\\\1\\end{bmatrix}$，则能控标准型表示为：$\\dot{\\tilde{x}}=\\begin{bmatrix}0&1\\\\-1&1\\end{bmatrix}\\tilde{x}+\\begin{bmatrix}0\\\\1\\end{bmatrix}u$。\n\n+++\n\n\n\n## 能观测标准型\n\n在单输入单输出系统（$\\left\\{\\begin{aligned}&\\dot{x}=Ax+bu\\\\&y=cx\\end{aligned}\\right.$），若系统矩阵 $A$ 和控制矩阵 $b$ 表示如下，那么其为状态空间表达式的能控标准型。\n\n$$A=\\begin{bmatrix}0&0&\\cdots&0&-a_n\\\\1&0&\\cdots&0&-a_{n-1}\\\\0&1&\\cdots&0&-a_{n-2}\\\\\\vdots&\\vdots&\\ddots&\\vdots&\\vdots\\\\0&0&\\cdots&0&-a_1\\end{bmatrix},c=\\begin{bmatrix}0&0&\\cdots&0&1\\end{bmatrix}$$\n\n对于线性定常系统 $\\left\\{\\begin{aligned}&\\dot{x}=Ax+bu\\\\&y=cx\\end{aligned}\\right.$，若其能观，那么必定存在非奇异变换 $x=T\\tilde{x}$ 将该系统转换为能控标准型 $\\left\\{\\begin{aligned}&\\dot{\\tilde{x}}=A_o\\tilde{x}+b_ou\\\\&y=c_o\\tilde{x}\\end{aligned}\\right.$（$A_o,c_o$ 符合上述能观标准型）。非奇异变换 $T=\\begin{bmatrix}T_1&AT_1&\\cdots&A^{n-1}T_1\\end{bmatrix}$，其中 $T_1$ 由 $T_1=\\begin{bmatrix}c\\\\cA\\\\cA^{2}\\\\\\vdots\\\\cA^{n-1}\\end{bmatrix}^{-1}\\begin{bmatrix}0\\\\0\\\\\\vdots\\\\0\\\\1\\end{bmatrix}$ 确定。\n\n+++info 例题\n\n;;;id10 例题1\n\n:::info no-icon\n\n将下列线性定常系统化为能观标准型。\n\n$$\\begin{aligned}\\dot{x}&=\\begin{bmatrix}1&-1\\\\0&2\\end{bmatrix}x\\\\y&=\\begin{bmatrix}-1&-\\frac{1}{2}\\end{bmatrix}x \\end{aligned}$$\n\n:::\n\n系统的能观性矩阵为：$U_o=\\begin{bmatrix}c\\\\cA\\end{bmatrix}=\\begin{bmatrix}-1&-\\frac{1}{2}\\\\-1&0\\end{bmatrix}$，则 $T_1=\\begin{bmatrix}c\\\\cA\\end{bmatrix}^{-1}\\begin{bmatrix}0\\\\1\\end{bmatrix}=\\begin{bmatrix}-1\\\\2\\end{bmatrix}$。则变换矩阵$T=\\begin{bmatrix}T_1\\\\AT_1\\end{bmatrix}=\\begin{bmatrix}-1&-3\\\\2&4\\end{bmatrix}$。\n\n则能观标准型表示为：$\\left\\{\\begin{aligned}&\\dot{\\tilde{x}}=T^{-1}AT\\tilde{x}=\\begin{bmatrix}0&-2\\\\1&3\\end{bmatrix}\\tilde{x}\\\\&y=cT\\tilde{x}=\\begin{bmatrix}0&1\\end{bmatrix}\\tilde{x}\\end{aligned}\\right.$。\n\n+++\n\n\n\n\n\n\n\n\n\n","tags":["能控性","能观性"],"categories":["现代控制理论"]},{"title":"特征图可视化","url":"/2023/12/06/2023-12-06_特征图可视化/","content":"\n卷积神经网络各层特征图的可视化\n\n<!-- more -->\n\n# 特征图可视化\n\n代码链接：https://github.com/Hny1216/FeatureMapVisualization\n\n速食可直接跳转[引用方法](#引用方法)\n\n\n\n## 特征图\n\n理解特征图（Feature Map）就需要先理解卷积神经网络（Convolutional Neural Network，CNN）是如何工作的。\n\n卷积神经网络大体可以分为特征提取层和特征映射层。特征提取层主要由若干卷积层、激活层和池化层组成，特征映射层主要是多层全连接层。在卷积层中，使用不同的卷积核从局部感受野中提取各种特征，每个核生成自己的特征图，多个卷积核得到的特征图在深度方向堆叠得到输出特征图（Feature Maps）。\n\n以Alexnet为例，其网络结构如下图。其输入图像的大小为 $224\\times224\\times3$ ，第一个卷积层中卷积核的大小是$5\\times5$，共有96个卷积核（分为两批），每个卷积核与输入进行卷积运算得到一张特征图，因此可以得到96张特征图（图中为何是48个特征图？Alexnet设计网络时运算能力不足，因此将网络分为了两批，每一批都是48，因此总特征图就是48*2=96张）。\n\n![](2023-12-06_特征图可视化/01-Alexnet网络结构.png)\n\n\n\n## 激活可视化\n\n特征图的激活可视化本质就是可视化特征图，通过观察特征图中被激活的像素位置，从而借此理解卷积神经网络关注输入的那一部分数据信息，进而对卷积神经网络进行解释。\n\n同样以Alexnet网络的第一层卷积层为例，输入选择一张标签为“balloon”，大小为  $705\\times705\\times3$ 的图像。输入的三通道图像如下：\n\n![](2023-12-06_特征图可视化/02-输入图像.png)\n\n我们可视化浅层网络（Relu1）和深层网络（Relu4，Relu5），来观察网络各层激活了哪些特征（选取了前18个通道）。浅层网络激活的特征信息较多，且与原始数据较为相似，越深层网络所提取到的特征就越抽象，更加注重输入的纹理细节信息。\n\n![](2023-12-06_特征图可视化/03-Relu1.png)\n\n![](2023-12-06_特征图可视化/04-Relu4.png)\n\n![](2023-12-06_特征图可视化/05-Relu5.png)\n\n## 代码解析\n\n\n\n\n\n\n\n## 引用方法\n\n本方法实现了一个特征图可视化类，提供了Matlab和Python两种语言的版本，以下根据需要使用合适的语言自行使用。\n\n### 下载\n\n下载链接如下：https://github.com/Hny1216/FeatureMapVisualization\n\n### 环境\n\n确保特征图可视化类与运行脚本文件在一个路径即可。\n\n### 运行\n\n\n\n;;;id1 Matlab\n\n```matlab\na = alexnet;\nFmv = FeatureMapVisualization(a,isShow=true);\n```\n\n;;;\n\n;;;id1 Python\n\n```python\nimport FeatureMapVisualization as Fmv\nmodel = models.alexnet(pretrained=True)\nmodelLayer = list(model.children())\nmodelVisualization = Fmv.FeatureMapVisualization(modelLayer)\n```\n\n;;;\n","categories":["技能工具"]},{"title":"第一篇论文","url":"/2023/11/27/2023-11-27_第一篇论文/","content":"\n关于第一篇论文......\n\n<!-- more -->\n\n## 论文链接\n\n[Early prediction of battery lifetime based on graphical features and convolutional neural networks - ScienceDirect](https://www.sciencedirect.com/science/article/pii/S0306261923014125?dgcid=coauthor)\n\n## 发文进度\n\n｜2023.06.02  投稿\n｜2023.06.18  大修\n｜2023.08.02  大修返稿\n｜2023.08.30  RRC\n｜2023.09.07  小修\n｜2023.09.26  小修返稿\n｜2023.09.28  Accept\n｜2023.10.14  Online\n｜2024.01.01  出刊\n\n## 论文简介\n\n","categories":["杂谈"]},{"title":"test","url":"/2023/10/28/2023-10-29-test/","content":"\n现代控制理论——03 状态方程的解\n\n<!-- more -->\n\n+++primary 证明\n\ntest\n\n+++\n\n\n\n\n\n+++primary  证明\n\n$e^{\\bold{A}t}=\\bold{I}+\\bold{A}t+\\frac{1}{2!}\\bold{A}^2t^2+\\cdots$\n\n$=\\begin{bmatrix} 1&0&\\cdots&0\\\\ 0&1&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&\\vdots\\\\ 0&0&\\cdots&1\\end{bmatrix}+\\begin{bmatrix} \\lambda_1&0&\\cdots&0\\\\ 0&\\lambda_2&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&\\vdots\\\\ 0&0&\\cdots&\\lambda_n\\end{bmatrix}t+\\frac{1}{2!}\\begin{bmatrix} \\lambda_1^2&0&\\cdots&0\\\\ 0&\\lambda_2^2&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&\\vdots\\\\ 0&0&\\cdots&\\lambda_n^2\\end{bmatrix}t^2+\\cdots$\n\n$=\\begin{bmatrix} \\sum^{+\\infty}_{n=0}\\frac{1}{n!}\\lambda_1^nt^n&0&\\cdots&0\\\\ 0&\\sum^{+\\infty}_{n=0}\\frac{1}{n!}\\lambda_2^nt^n&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&\\vdots\\\\ 0&0&\\cdots&\\sum^{+\\infty}_{n=0}\\frac{1}{n!}\\lambda_n^nt^n\\end{bmatrix}=\\begin{bmatrix} e^{\\lambda_1t}&0&\\cdots&0\\\\ 0&e^{\\lambda_2t}&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&\\vdots\\\\ 0&0&\\cdots&e^{\\lambda_nt}\\end{bmatrix}$。\n\n+++\n\n9. 若$\\bold{A}$为$m\\times{m}$的若尔当块，即$\\bold{A}=\\begin{bmatrix} \\lambda&1&0&\\cdots&0\\\\ 0&\\lambda&1&\\cdots&0\\\\  \\vdots&\\vdots&\\lambda&\\ddots&\\vdots\\\\0&0&\\cdots&\\lambda&1\\\\ 0&0&\\cdots&0&\\lambda\\end{bmatrix}_{m\\times{m}}$，则$e^{\\bold{A}t}=e^{\\lambda t}\\begin{bmatrix} 1&t&\\frac{t^{2}}{2!}&\\cdots&\\frac{t^{m-1}}{(m-1)!}\\\\ 0&1&t&\\cdots&\\frac{t^{m-2}}{(m-2)!}\\\\  \\vdots&\\vdots&\\ddots&\\ddots&\\vdots\\\\0&0&\\cdots&1&t\\\\ 0&0&\\cdots&0&1\\end{bmatrix}_{m\\times{m}}$。\n\n+++primary 若尔当块\n\n形如$\\begin{bmatrix} \\lambda&1&0&\\cdots&0\\\\ 0&\\lambda&1&\\cdots&0\\\\  \\vdots&\\vdots&\\lambda&\\ddots&\\vdots\\\\0&0&\\cdots&\\lambda&1\\\\ 0&0&\\cdots&0&\\lambda\\end{bmatrix}_{m\\times{m}}$为$m$阶若尔当矩阵，1阶若尔当矩阵为$\\lambda$。\n\n+++\n\n10. 若$\\bold{A}$为一个有多个若尔当块的若尔当矩阵（即若当标准型），即$\\bold{A}=\\begin{bmatrix} \\bold{A}_1&0&\\cdots&0\\\\ 0&\\bold{A}_2&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&\\vdots\\\\ 0&0&\\cdots&\\bold{A}_n\\end{bmatrix}$，则$e^{\\bold{A}t}=\\begin{bmatrix} e^{\\bold{A}_1t}&0&\\cdots&0\\\\ 0&e^{\\bold{A}_2t}&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&\\vdots\\\\ 0&0&\\cdots&e^{\\bold{A}_nt}\\end{bmatrix}$。\n\n### 矩阵指数的计算\n\n1. 定义计算：$e^{\\bold{A}t}=\\sum^{+\\infty}_{n=0}\\frac{1}{n!}\\bold{A}^n(t)^n$。该方法适用于计算机运算。\n\n+++info  例题\n\n;;;id1 例题1\n\n:::info \n\n已知$\\bold{A}=\\begin{bmatrix} 0&1\\\\-1&0\\end{bmatrix}$，求$e^{\\bold{A}t}$。\n\n:::\n\n由定义，\n\n$\\begin{aligned}e^{\\bold{A}t}&=\\bold{I}+\\bold{A}t+\\frac{1}{2!}+\\cdots=\\begin{bmatrix}1&0\\\\0&1\\end{bmatrix}+\\begin{bmatrix}0&t\\\\-t&0\\end{bmatrix}+\\frac{1}{2!}\\begin{bmatrix}-t^2&0\\\\0&-t^2\\end{bmatrix}+\\cdots\\\\&=\\begin{bmatrix}1-\\frac{t^2}{2!}+\\cdots&t-\\frac{t^3}{3!}+\\cdots\\\\-t+\\frac{t^3}{3!}-\\cdots&1-\\frac{t^2}{2!}+\\cdots\\end{bmatrix}=\\begin{bmatrix} \\cos{t}&\\sin{t}\\\\-\\sin{t}&\\cos{t}\\end{bmatrix}\\end{aligned}$.\n\n;;; \n\n+++\n\n2. 拉氏变换法：利用拉氏变换在频域中求解齐次状态方程的解。\n\n设线性时不变齐次状态方程为 $\\bold{\\dot{x}}=\\bold{Ax}(t)$，$\\bold{x}(0)=\\bold{x}_0$，$t\\geq{t_0}$。\n\n作拉氏变换有 $s\\bold{X}(s)-\\bold{x}(0)=\\bold{AX}(s)$，即 $(s\\bold{I}-\\bold{A})\\bold{X}(s)=\\bold{x}(0)$，那么 \n\n$$\\bold{X}(s) =(s\\bold{I}-\\bold{A})^{-1}\\bold{x}(0)$$\n\n取拉氏逆变换有 $\\bold{x}(0)=L^{-1}[(s\\bold{I}-\\bold{A})^{-1}\\bold{x}(0)]=L^{-1}[(s\\bold{I}-\\bold{A})^{-1}]\\bold{x}(0)$，因此 \n\n$$e^{\\bold{A}t}=L^{-1}[(s\\bold{I}-\\bold{A})^{-1}]     \\tag{2}$$\n\n+++info 例题\n\n;;;id2 例题1\n\n:::info\n\n计算矩阵 $\\bold{A}=\\begin{bmatrix}0&1\\\\-2&-3\\end{bmatrix}$的矩阵指数。\n\n:::\n\n由拉氏变换法，$(s\\bold{I}-\\bold{A})=\\begin{bmatrix} s&-1\\\\2&s+3\\end{bmatrix}$，则$(s\\bold{I}-\\bold{A})^{-1}=\\begin{bmatrix}\\frac{s+3}{(s+1)(s+2)}&\\frac{1}{(s+1)(s+2)}\\\\\\frac{-2}{(s+1)(s+2)}&\\frac{s}{(s+1)(s+2)}\\end{bmatrix}$，\n\n则 $e^{\\bold{A}t}=L^{-1}\\begin{bmatrix}\\frac{s+3}{(s+1)(s+2)}&\\frac{1}{(s+1)(s+2)}\\\\\\frac{-2}{(s+1)(s+2)}&\\frac{s}{(s+1)(s+2)}\\end{bmatrix}=\\begin{bmatrix}2e^{-t}&e^{-t}-e^{-2t}\\\\-2e^{-t}+2e^{-2t}&-e^{-t}+2e^{-2t}\\end{bmatrix}$。\n\n;;;\n\n+++\n\n3. 将矩阵化为对角标准型或若尔当标准型。\n\n若$\\bold{A}=\\begin{bmatrix} \\lambda_1&0&\\cdots&0\\\\ 0&\\lambda_2&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&\\vdots\\\\ 0&0&\\cdots&\\lambda_n\\end{bmatrix}$为对角矩阵，则$e^{\\bold{A}t}$也为对角矩阵（[性质8](#矩阵指数的性质)），即$e^{\\bold{A}t}=\\begin{bmatrix} e^{\\lambda_1t}&0&\\cdots&0\\\\ 0&e^{\\lambda_2t}&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&\\vdots\\\\ 0&0&\\cdots&e^{\\lambda_nt}\\end{bmatrix}$。\n\n（1）当矩阵$\\bold{A}$的 $n$ 个特征值 $\\lambda_1,\\lambda_2\\dots\\lambda_n$ 均两两互异时，则可确定变换阵 $\\bold{P}$ 及其逆矩阵 $\\bold{P}^{-1}$ ，使得矩阵$\\bold{A}$对角化：$\\bold{A} = \\bold{P}\\begin{bmatrix}\\lambda_1&0&\\cdots&0\\\\ 0&\\lambda_2&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&\\vdots\\\\ 0&0&\\cdots&\\lambda_n\\end{bmatrix}\\bold{P}^{-1}$，则有 \n\n$$e^{\\bold{A}t}=\\bold{P}\\begin{bmatrix} e^{\\lambda_1t}&0&\\cdots&0\\\\ 0&e^{\\lambda_2t}&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&\\vdots\\\\ 0&0&\\cdots&e^{\\lambda_nt}\\end{bmatrix}\\bold{P}^{-1}   \\tag{3}$$\n\n+++primary 解题步骤\n\n1. 求解系统矩阵$\\bold{A}$的特征值 $\\lambda_1,\\lambda_2\\dots\\lambda_n$ 。（特征值两两互异）\n2. 求解特征值对应的特征向量$p_1,p_2\\dots p_n$，构造变换阵 $\\bold{P}$ 并求解其逆矩阵 $\\bold{P}^{-1}$ 。\n3. 求解矩阵指数 $e^{\\bold{A}t}=\\bold{P}\\begin{bmatrix} e^{\\lambda_1t}&0&\\cdots&0\\\\ 0&e^{\\lambda_2t}&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&\\vdots\\\\ 0&0&\\cdots&e^{\\lambda_nt}\\end{bmatrix}\\bold{P}^{-1}$。\n\n+++\n\n+++info 例题\n\n;;;id3 例题1\n\n:::info \n\n试用化为对角标准型法求解矩阵$\\bold{A}=\\begin{bmatrix}0&1\\\\-2&-3\\end{bmatrix}$的矩阵指数 $e^{\\bold{A}t}$。\n\n:::\n\n求解特征值$|\\lambda\\bold{I}-\\bold{A}|=\\begin{vmatrix}\\lambda&-1\\\\2&\\lambda+3\\end{vmatrix}=(\\lambda+1)(\\lambda+2)$，得到特征值为$\\lambda_1=-1$，$\\lambda_2=-2$。继而求解特征向量$p_1=\\begin{bmatrix}1\\\\-1\\end{bmatrix}$，$p_2=\\begin{bmatrix}1\\\\-2\\end{bmatrix}$。\n\n故变换矩阵 $\\bold{P}=\\begin{bmatrix}1&1\\\\-1&-2\\end{bmatrix}$，求逆有 $\\bold{P}^{-1}=\\begin{bmatrix}2&1\\\\-1&-1\\end{bmatrix}$。\n\n则矩阵指数为 $e^{\\bold{A}t}=\\bold{P}\\begin{bmatrix} e^{-t}&0\\\\ 0&e^{-2t}\\end{bmatrix}\\bold{P}^{-1}=\\begin{bmatrix} 2e^{-t}-e^{-2t}&e^{-t}-e^{-2t}\\\\ -2e^{-t}+2e^{-2t}&-e^{-t}+2e^{-2t}\\end{bmatrix}$。\n\n;;;\n\n;;;id3 例题2\n\n:::info \n\n试用化为对角标准型法求解矩阵$\\bold{A}=\\begin{bmatrix}0&1&-1\\\\-6&-11&6\\\\-6&-11&5\\end{bmatrix}$的矩阵指数 $e^{\\bold{A}t}$。\n\n:::\n\n求解特征值$|\\lambda\\bold{I}-\\bold{A}|=\\begin{vmatrix}\\lambda&-1&1\\\\6&\\lambda+11&-6\\\\6&11&\\lambda-5\\end{vmatrix}=(\\lambda+1)(\\lambda+2)(\\lambda+3)$，得到特征值为$\\lambda_1=-1$，$\\lambda_2=-2$，$\\lambda_3=-3$。继而求解特征向量$p_1=\\begin{bmatrix}1\\\\0\\\\1\\end{bmatrix}$，$p_2=\\begin{bmatrix}1\\\\2\\\\4\\end{bmatrix}$，$p_3=\\begin{bmatrix}1\\\\6\\\\9\\end{bmatrix}$。\n\n故变换矩阵 $\\bold{P}=\\begin{bmatrix}1&1&1\\\\0&2&6\\\\1&4&9\\end{bmatrix}$，求逆有 $\\bold{P}^{-1}=\\begin{bmatrix}3&\\frac{5}{2}&-2\\\\-3&-4&3\\\\1&\\frac{3}{2}&-1\\end{bmatrix}$。\n\n则矩阵指数为 \n\n$\\begin{aligned}e^{\\bold{A}t}&=\\bold{P}\\begin{bmatrix} e^{-t}&0&0\\\\ 0&e^{-2t}&0\\\\0&0&e^{-3t}\\end{bmatrix}\\bold{P}^{-1}=\\begin{bmatrix}1&1&1\\\\0&2&6\\\\1&4&9\\end{bmatrix}\\begin{bmatrix} e^{-t}&0&0\\\\ 0&e^{-2t}&0\\\\0&0&e^{-3t}\\end{bmatrix}\\begin{bmatrix}3&\\frac{5}{2}&-2\\\\-3&-4&3\\\\1&\\frac{3}{2}&-1\\end{bmatrix}\\\\&=\\begin{bmatrix} 3e^{-t}-3e^{-2t}+e^{-3t}&\\frac{5}{2}e^{-t}-4e^{-2t}+\\frac{3}{2}e^{-3t}&-2e^{-t}+3e^{-2t}-e^{-3t}\\\\ -6e^{-t}+6e^{-3t}&-8e^{-2t}+9e^{-3t}&6e^{-2t}-6e^{-3t}\\\\3e^{-t}-12e^{-2t}+9e^{-3t}&\\frac{5}{2}e^{-t}-16e^{-2t}+\\frac{27}{2}e^{-3t}&-2e^{-t}+12e^{-2t}-9e^{-3t}\\end{bmatrix}\\end{aligned}$。\n\n;;;\n\n+++\n\n（2）当 $n\\times{n}$ 矩阵$\\bold{A}$有$n$重特征根时，存在线性非奇异变换 $\\bold{P}$ 及其逆矩阵 $\\bold{P}^{-1}$ ，将矩阵 $\\bold{A}$ 转化为若尔当标准型：$\\bold{A} = \\bold{P}\\begin{bmatrix}\\lambda&1&\\cdots&0\\\\ 0&\\lambda&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&1\\\\ 0&0&\\cdots&\\lambda\\end{bmatrix}_{n\\times{n}}\\bold{P}^{-1}$，则有 \n\n$$e^{\\bold{A}t}=\\bold{P}e^{\\lambda t}\\begin{bmatrix} 1&t&\\frac{t^2}{2!}&\\cdots&\\frac{t^{n-1}}{(n-1)!}\\\\ 0&1&t&\\cdots&\\frac{t^{n-2}}{(n-2)!}\\\\  \\vdots&\\vdots&\\vdots&\\ddots&\\vdots\\\\0&0&0&\\cdots&t\\\\ 0&0&0&\\cdots&1\\end{bmatrix}_{n\\times{n}}\\bold{P}^{-1}   \\tag{4}$$\n\n拓展到一般情况，矩阵$\\bold{A}$同时存在重特征根和单特征根时,以有三重根$\\lambda_1$、两重根$\\lambda_2$和单根$\\lambda_3$的矩阵$\\bold{A}$为例，若存在变换阵 $\\bold{P}$ 及其逆矩阵 $\\bold{P}^{-1}$ ，将矩阵 $\\bold{A}$ 转化为若尔当标准型：$\\bold{A} = \\bold{P}\\begin{bmatrix}\\lambda_1&1&&&&\\bold{0}\\\\ &\\lambda_1&1&&&\\\\  &&\\lambda_1&&&\\\\&&&\\lambda_2&1&\\\\&&&&\\lambda_2&\\\\\\bold{0}&&&&&\\lambda_1\\end{bmatrix}\\bold{P}^{-1}$，则有 \n\n$$e^{\\bold{A}t}=\\bold{P}\\begin{bmatrix}e^{\\lambda_1t}&te^{\\lambda_1t}&\\frac{1}{2}t^2e^{\\lambda_1t}&0&0&0\\\\ 0&e^{\\lambda_1t}&te^{\\lambda_1t}&0&0&0\\\\  0&0&e^{\\lambda_1t}&0&0&0\\\\0&0&0&e^{\\lambda_2t}&te^{\\lambda_2t}&0\\\\0&0&0&0&e^{\\lambda_2t}&0\\\\0&0&0&0&0&e^{\\lambda_3t}\\end{bmatrix}\\bold{P}^{-1}     \\tag{5}$$\n\n+++info 例题\n\n;;;id4 例题1\n\n:::info \n\n试求矩阵$\\bold{A}=\\begin{bmatrix}0&6&-5\\\\1&0&2\\\\3&2&4\\end{bmatrix}$的矩阵指数。\n\n:::\n\n求解特征值$|\\lambda\\bold{I}-\\bold{A}|=\\begin{vmatrix}\\lambda&-6&5\\\\-1&\\lambda&-2\\\\-3&-2&\\lambda-4\\end{vmatrix}=(\\lambda-1)^2(\\lambda-2)$，得到特征值为$\\lambda_1=\\lambda_2=1$，$\\lambda_3=2$。继而求解特征向量和广义特征向量$p_1=\\begin{bmatrix}1\\\\-\\frac{3}{7}\\\\-\\frac{5}{7}\\end{bmatrix}$，$p_2=\\begin{bmatrix}1\\\\-\\frac{22}{49}\\\\-\\frac{46}{49}\\end{bmatrix}$，$p_3=\\begin{bmatrix}2\\\\-1\\\\-2\\end{bmatrix}$。\n\n故变换矩阵 $\\bold{P}=\\begin{bmatrix}1&1&2\\\\-\\frac{3}{7}&-\\frac{22}{49}&-1\\\\-\\frac{5}{7}&-\\frac{46}{49}&-2\\end{bmatrix}$，求逆有 $\\bold{P}^{-1}=\\begin{bmatrix}2&-6&5\\\\7&28&-7\\\\-4&-11&1\\end{bmatrix}$。\n\n则矩阵指数为\n\n $\\begin{aligned}e^{\\bold{A}t}&=\\bold{P}\\begin{bmatrix} e^{-t}&te^{-t}&0\\\\ 0&e^{t}&0\\\\0&0&e^{2t}\\end{bmatrix}\\bold{P}^{-1}\\\\&=\\begin{bmatrix} 9e^{t}+7te^{t}-8e^{2t}&22e^{t}+28te^{t}+-22e^{2t}&-2e^{t}-7te^{t}+2e^{2t}\\\\ -4e^{t}-3te^{t}+4e^{2t}&-10e^{t}-12te^{t}+11e^{2t}&e^{t}+3te^{t}-e^{2t}\\\\-8e^{t}-5te^{t}+8e^{2t}&-22e^{t}-20te^{t}-22e^{2t}&3e^{t}+5te^{t}-2e^{2t}\\end{bmatrix}\\end{aligned}$。\n\n;;;\n\n+++\n\n4. 化矩阵指数为矩阵$\\bold{A}$的有限项。\n\n该方法将矩阵指数表示为$e^{\\bold{A}t}=a_0(t)\\bold{I}+a_1(t)\\bold{A}+\\cdots+a_{n-1}\\bold{A}^{n-1}$。\n\n当特征值两两互异时，\n\n$$\\begin{bmatrix}a_0(t)\\\\a_1(t)\\\\\\vdots\\\\a_{n-1}(t)\\end{bmatrix}=\\begin{bmatrix}1&\\lambda_1&\\cdots&\\lambda_1^{n-1}\\\\1&\\lambda_2&\\cdots&\\lambda_2^{n-1}\\\\\\vdots&\\vdots&\\ddots&\\vdots\\\\1&\\lambda_n&\\cdots&\\lambda_n^{n-1}\\end{bmatrix}^{-1}\\begin{bmatrix}e^{\\lambda_1t}\\\\e^{\\lambda_2t}\\\\\\vdots\\\\e^{\\lambda_nt}\\end{bmatrix}    \\tag{6}$$\n\n当存在重特征值时（以三重根$\\lambda_1$和二重根$\\lambda_2$，其余根为单根为例），\n\n$$\\begin{bmatrix}a_0(t)\\\\a_1(t)\\\\a_2(t)\\\\a_3(t)\\\\a_4(t)\\\\a_5(t)\\\\\\vdots\\\\a_{n-1}(t)\\end{bmatrix}=\\begin{bmatrix}0&0&1&3\\lambda_1&\\cdots&\\frac{(n-1)(n-2)}{2!}\\lambda_1^{n-3}\\\\0&1&2\\lambda_1&3\\lambda_1^2&\\cdots&\\frac{(n-1)}{1!}\\lambda_1^{n-2}\\\\1&\\lambda_1&\\lambda_1^2&\\lambda_1^3&\\cdots&\\lambda_1^{n-1}\\\\0&1&2\\lambda_2&3\\lambda_2^2&\\cdots&\\frac{(n-1)}{1!}\\lambda_2^{n-2}\\\\1&\\lambda_2&\\lambda_2^2&\\lambda_2^3&\\cdots&\\lambda_2^{n-1}\\\\1&\\lambda_3&\\lambda_3^2&\\lambda_3^3&\\cdots&\\lambda_3^{n-1}\\\\\\vdots&\\vdots&\\vdots&\\vdots&\\ddots&\\vdots\\\\1&\\lambda_n&\\lambda_n^2&\\lambda_n^3&\\cdots&\\lambda_n^{n-1}\\end{bmatrix}^{-1}\\begin{bmatrix}\\frac{1}{2!}t^2e^{\\lambda_1t}\\\\\\frac{1}{1!}te^{\\lambda_1t}\\\\e^{\\lambda_1t}\\\\\\frac{1}{1!}te^{\\lambda_2t}\\\\e^{\\lambda_2t}\\\\e^{\\lambda_3t}\\\\\\vdots\\\\e^{\\lambda_{n-3}t}\\end{bmatrix}     \\tag{7}$$\n\n+++primary 证明：Cayley-Hamilton定理\n\n\n\n+++\n\n+++primary 解题步骤\n\n1. 求解系统矩阵$\\bold{A}$的特征值 $\\lambda_1,\\lambda_2\\dots\\lambda_n$ 。\n2. 求解有限项，根据特征值的互异性分情况分析：\n\n\t- 当特征值两两互异时，直接根据$\\begin{bmatrix}a_0(t)\\\\a_1(t)\\\\\\vdots\\\\a_{n-1}(t)\\end{bmatrix}=\\begin{bmatrix}1&\\lambda_1&\\cdots&\\lambda_1^{n-1}\\\\1&\\lambda_2&\\cdots&\\lambda_2^{n-1}\\\\\\vdots&\\vdots&\\ddots&\\vdots\\\\1&\\lambda_n&\\cdots&\\lambda_n^{n-1}\\end{bmatrix}^{-1}\\begin{bmatrix}e^{\\lambda_1t}\\\\e^{\\lambda_2t}\\\\\\vdots\\\\e^{\\lambda_nt}\\end{bmatrix}$求解有限项。\n\t- 当特征值存在重根时，对于单根部分列写方程：\n\n$$e^{\\lambda_it}=a_0(t)+a_1(t)\\lambda_i+\\cdots+a_{n-1}(t)\\lambda_i^{n-1}$$\n\n而对于$k$重根部分在列写方程$e^{\\lambda_it}=a_0(t)+a_1(t)\\lambda_i+\\cdots+a_{k-1}(t)\\lambda_i^{k-1}$外还需要补充方程：\n\n$$\\left\\{ \\begin{matrix} te^{\\lambda_it}=a_1(t)+2a_2(t)\\lambda_i+\\cdots+(k-1)a_{k-1}(t)\\lambda_i^{k-2}\\\\t^2e^{\\lambda_it}=2a_2(t)+6a_3(t)\\lambda_i+\\cdots+(k-1)(k-2)a_{k-1}(t)\\lambda_i^{k-3} \\\\\\vdots\\\\t^{k-1}e^{\\lambda_it}=(k-1)!a_{k-1}(t) \\\\\\end{matrix}\\right.$$\n\n联立$n$条方程求解有限项\n\n3. 代入求解矩阵指数：\n\n$$e^{\\bold{A}t}=a_0(t)\\bold{I}+a_1(t)\\bold{A}+\\cdots+a_{n-1}\\bold{A}^{n-1}$$\n\n+++\n\n+++info 例题\n\n;;;id5 例题1\n\n:::info \n\n试求矩阵$\\bold{A}=\\begin{bmatrix}0&1&0\\\\0&0&1\\\\2&3&0\\end{bmatrix}$的矩阵指数，利用化为有限项法求解。\n\n:::\n\n求解特征值$|\\lambda\\bold{I}-\\bold{A}|=\\begin{vmatrix}\\lambda&-1&0\\\\0&\\lambda&-1\\\\-2&-3&\\lambda\\end{vmatrix}=(\\lambda+1)^2(\\lambda-2)$，得到特征值为$\\lambda_{1,2}=-1$，$\\lambda_3=2$。\n\n对于单根 $\\lambda_3=2$，有 $e^{2t}=a_0(t)+2a_1(t)+4a_2(t)$，\n\n对于二重根$\\lambda_{1,2}=-1$，有 $e^{-t}=a_0(t)-a_1(t)+a_2(t)$，还需要补充方程：\n\n$$ te^{-t}=a_1(t)-2a_2(t)$$\n\n联立三组方程解得：\n\n$$\\left\\{ \\begin{matrix} a_0(t)=\\frac{1}{9}(e^{2t}+8e^{-t}+6te^{-t})\\\\ a_1(t)=\\frac{1}{9}(2e^{2t}-2e^{-t}+3te^{-t}) \\\\ a_3(t)=\\frac{1}{9}(e^{2t}-e^{-t}-3te^{-t}) \\\\\\end{matrix}\\right.$$\n\n $$\\begin{aligned}e^{\\bold{A}t}&=a_0(t)\\bold{I}+a_1(t)\\bold{A}+\\cdots+a_{n-1}\\bold{A}^{n-1}\\\\&=\\frac{1}{9}\\begin{bmatrix} e^{2t}+(8+6t)e^{-t}&e^{2t}-(2-3t)e^{-t}&e^{2t}-(1+3t)e^{-t}\\\\ 2e^{2t}-(2+6t)e^{-t}&4e^{2t}+(5-3t)e^{-t}&2e^{2t}-(2-3t)e^{-t}\\\\4e^{2t}+(6-4t)e^{-t}&8e^{2t}+(3-8t)e^{-t}&4e^{2t}+(5-3t)e^{-t}\\end{bmatrix}\\end{aligned}$$\n\n;;;\n\n+++\n\n## 线性时不变系统非齐次状态方程的解\n\n动态系统在控制的作用下的运动称为受控运动。线性时不变系统非齐次状态方程的解即为线性时不变系统的受控运动。考虑系统 $\\dot{x}(t)=Ax(t)+Bu(t),x(0),t\\geq0$，其动态响应形式为：\n\n$$x(t)=e^{A(t-t_0)}x(t_0)+\\int_{t_0}^te^{A(t-\\tau)}Bu(\\tau)\\,d\\tau,  t\\geq0   \\tag{8}$$\n\n可理解为由两部分组成：一部分是由初始状态引起的系统自由运动，即零输入响应；另外一部分是由控制输入所产生的受控运动，即零状态响应。\n\n+++primary 推导过程\n\n对于系统$\\dot{x}(t)=Ax(t)+Bu(t),x(0),t\\geq0$，左乘$e^{-At}$后求导可得：\n\n$$\\frac{d}{dt}[e^{-At}x(t)]=e^{-At}[\\dot{x}(t)-Ax(t)]=e^{-At}Bu(t)$$\n\n两边积分得：\n\n$$\\int_0^t\\{\\frac{d}{dt}[e^{-At}x(t)]\\}d\\tau=\\int_0^te^{-At}Bu(t)d\\tau$$\n\n$$e^{-At}x(t)-x(0)I=\\int_0^te^{-At}Bu(t)d\\tau$$\n\n$$x(t)=e^{A(t-t_0)}x(t_0)+\\int_{t_0}^te^{A(t-\\tau)}Bu(\\tau)\\,d\\tau,  t\\geq0$$\n\n+++\n\n## 线性时不变系统的状态转移矩阵\n\n在线性时不变系统解 $x(t)=e^{A(t-t_0)}x(t_0)+\\int_{t_0}^te^{A(t-\\tau)}Bu(\\tau)\\,d\\tau,  t\\geq0$ 中，定义状态转移矩阵$\\Phi(t,t_0)=e^{A(t-t_0)}$。\n\n+++ 注\n\n1. 线性时不变系统的状态转移矩阵可记为：$\\Phi(t,t_0)=\\Phi{(t-t_0)}$。\n2. $x(t)$是由初始值引起的零输入解和控制产生的零状态解的叠加。\n3. 解的结构显示了从$x(t_0)$到$x(t)$的一种变换关系。\n\n+++\n\n+++ 线性连续系统的状态转移矩阵\n\n1. 定义\n\n对于线性连续系统的状态方程：$\\dot{x}(t)=A(t)x(t)+B(t)u(t),x(t_0)=x_0,A(t)\\in{R^{n\\times{n}}}$，那么称满足以下矩阵方程的解$\\Phi(t,t_0)$为系统的状态转移矩阵。\n\n$$\\dot{\\Phi}(t,t_0)=A(t)\\Phi(t,t_0),\\Phi(t_0,t_0)=I,t\\geq{t_0}    \\tag{9}$$\n\n2. 状态转移矩阵的性质\n\n- $\\frac{d\\Phi(t,t_0)}{dt}=A(t)\\Phi(t,t_0),\\Phi(t_0,t_0)=I$\n\n* $\\Phi(t_2,t_1)\\Phi(t_1,t_0)=\\Phi(t_2,t_0)$\n\n+ $\\Phi(mt)=\\Phi(t+t+\\cdots+t)=[\\Phi(t)]^m$\n\n+++\n\n## 线性时变系统状态方程的解*\n\n### 线性时变系统齐次状态方程的解\n\n### 线性时变系统的状态转移矩阵\n\n### 线性时变系统非齐次状态方程的解\n\n\n\n## 线性连续系统的时间离散化\n\n线性连续系统的时间离散化问题本质上就是在一定的采样方式和保持方式下，由系统的连续时间状态空间描述来得到对应的离散时间状态空间描述，并建立两者的系数矩阵间的关系式。\n\n### 近似离散化\n\n考虑以下线性时变系统：$\\dot{x}(t)=A(t)x(t)+B(t)u(t)$，当采样周期$T$较小且精度要求不高时，可将其离散化为：\n\n$$\\dot{x}(kT)\\approx \\frac{1}{T}[x((k+1)T)-x(kT)]    \\tag{10}$$\n\n令$t=kT$，有\n\n$$\\frac{1}{T}[x((k+1)T)-x(kT)]=A(kT)x(kT)+B(kT)u(kT)$$\n\n$$\\begin{aligned}x[(k+1)T]&=[I+TA(kT)]x(kT)+TB(kT)u(kT)\\\\&=G(kT)x(kT)+H(kT)u(kT)\\end{aligned}$$\n\n其中，$G(kT)=I+TA(kT)$，$H(kT)=TB(kT)$。\n\n:::info\n\n注：一般而言，当采样周期为系统最小时间系数的$\\frac{1}{10}$左右，近似度已经足够。\n\n:::\n\n+++info 例题\n\n;;;id6 例题1\n\n:::info \n\n系统的状态方程为$\\dot{x}(t)=A(t)x(t)+B(t)u(t)$，其中$A(t)=\\begin{bmatrix}0&5(1-e^{-5t})\\\\0&5(e^{-5t}-1)\\end{bmatrix}$，$B(t)=\\begin{bmatrix}5&5e^{-5t}\\\\0&5(1-e^{-5t})\\end{bmatrix}$。试求采样周期为$T=0.2s$时的离散状态方程。\n\n:::\n\n直接代入公式有：\n\n$$G(kT)=I+TA(kT)=\\begin{bmatrix}1&1-e^{-k}\\\\0&e^{-k}\\end{bmatrix}$$\n\n$$H(kT)=TB(kT)=\\begin{bmatrix}1&e^{-k}\\\\0&1-e^{-k}\\end{bmatrix}$$\n\n那么，离散状态方程为：$x[(k+1)T]=G(kT)x(kT)+H(kT)u(kT)$\n\n;;;\n\n;;;id6 例题2\n\n:::info\n\n将状态方程$\\dot{x}=\\begin{bmatrix}0&1\\\\-2&-3\\end{bmatrix}x+\\begin{bmatrix}0\\\\1\\end{bmatrix}u$ 近似离散化，$T=0.2s$。\n\n:::\n\n由题：$G=I+TA=\\begin{bmatrix}1&0\\\\0&1\\end{bmatrix}+0.2\\begin{bmatrix}0&1\\\\-2&-3\\end{bmatrix}=\\begin{bmatrix}1&0.2\\\\-0.4&0.4\\end{bmatrix}$，$H=0.2\\begin{bmatrix}0\\\\1\\end{bmatrix}=\\begin{bmatrix}0\\\\0.2\\end{bmatrix}$。\n\n故离散状态方程为：\n\n$$$x[0.2(k+1)]=\\begin{bmatrix}1&0.2\\\\-0.4&0.4\\end{bmatrix}x(0.2k)+\\begin{bmatrix}0\\\\0.2\\end{bmatrix}u(0.2k)$$$\n\n;;;\n\n+++\n\n### 线性时不变系统状态方程的离散化\n\n在线性时不变系统中，$\\dot{x}(t)=A(x)+B(u)$，其时间离散化状态方程为：\n\n$$x[(k+1)T]=Gx(kT)+Hu(kT)    \\tag{11}$$\n\n其中$G=e^{AT}$，$H=(\\int_0^Te^{AT}dt)B$。假设条件为：(1)等采样周期$T$；(2)$u(t)\\equiv u(kT),kT\\leq t\\leq (k+1)T$。\n\n+++primary 推导证明\n\n对于线性时不变系统 $\\dot{x}(t)=A(x)+B(u)$，其状态方程的解为：\n\n$$x(t)=e^{A(t-t_0)}x(t_0)+\\int e^{A(t-\\tau)}Bu(\\tau)d\\tau    \\tag{12}$$\n\n假设：(1)等采样周期$T$；(2)$x(k)=[x(t)]_{t=kT}$，$u(k)=[u(t)]_{t=kT}$\n\n那么令 $t=(k+1)T$，$t_0=kT$，有：\n\n$$\\begin{aligned}x[(k+1)T]&=e^{AT}x(kT)+\\int_{kT}^{(k+1)T}e^{A[(k+1)T-\\tau]}Bu(\\tau)d\\tau\\\\&=e^{AT}x(kT)+\\int_{kT}^{(k+1)T}e^{A[(k+1)T-\\tau]}Bd\\tau \\cdot u(kT)\\end{aligned}$$\n\n令 $t=(k+1)T-\\tau$，$d\\tau =-dt$，有：\n\n$$\\begin{aligned}x[(k+1)T]&=e^{AT}x(kT)+\\int_{0}^{\\tau}e^{A(t)}Bdt\\cdot u(kT)\\\\&=e^{AT}x(kT)+\\int_{0}^{\\tau}e^{A(t)}dt\\cdot Bu(kT)\\end{aligned}$$\n\n令$G=e^{AT}$，$H=(\\int_0^Te^{AT}dt)B$，有线性时不变系统的离散状态方程为：\n\n$$x[(k+1)T]=Gx(kT)+Hu(kT)$$\n\n+++\n\n+++primary 解题步骤\n\n1. 求解矩阵指数，方法见[矩阵指数的计算](#矩阵指数的计算)。\n2. 求解系数矩阵：$G=e^{AT}$，$H=(\\int_0^Te^{AT}dt)B$。\n3. 列写时间离散化状态方程：$x[(k+1)T]=Gx(kT)+Hu(kT)$\n\n+++\n\n+++info 例题\n\n;;;id7 例题1\n\n:::info\n\n将状态方程$\\dot{x}=\\begin{bmatrix}0&1\\\\0&-2\\end{bmatrix}x+\\begin{bmatrix}0\\\\1\\end{bmatrix}u$ 离散化，$T=0.1s$。\n\n:::\n\n利用拉氏变换法求解矩阵指数函数。取拉氏变换有：\n\n$$[sI-A]^{-1}=\\begin{bmatrix}s&-1\\\\0&s+2\\end{bmatrix}^{-1}=\\begin{bmatrix}\\frac{1}{s}&\\frac{1}{s(s+2)}\\\\0&\\frac{1}{s+2}\\end{bmatrix}$$\n\n取拉氏逆变换得到矩阵指数函数：\n\n$$e^{At}=L^{-1}[sI-A]^{-1}=\\begin{bmatrix}1&0.5(1-e^{-2T})\\\\0&e^{-2T}\\end{bmatrix}$$\n\n进而求解系数矩阵：\n\n$$G=e^{AT}=\\begin{bmatrix}1&0.5(1-e^{-2T})\\\\0&e^{-2T}\\end{bmatrix}=\\begin{bmatrix}1&0.091\\\\0&0.819\\end{bmatrix}$$\n\n$$\\begin{aligned}H&=(\\int_0^Te^{AT}dt)B=\\Bigg[\\int_0^T\\begin{bmatrix}1&0.5(1-e^{-2T})\\\\0&e^{-2T}\\end{bmatrix}dt\\Bigg]\\begin{bmatrix}0\\\\1\\end{bmatrix}\\\\&=\\begin{bmatrix}T&0.5T+0.25e^{-2T}-0.25\\\\0&-0.5e^{-2T}+0.5\\end{bmatrix}\\begin{bmatrix}0\\\\1\\end{bmatrix}=\\begin{bmatrix}0.005\\\\0.091\\end{bmatrix}\\end{aligned}$$\n\n故时间离散化状态方程为：\n\n$x[0.1(k+1)]=\\begin{bmatrix}1&0.091\\\\0&0.819\\end{bmatrix}x(0.1k)+\\begin{bmatrix}0.005\\\\0.091\\end{bmatrix}u(0.1k)$\n\n;;;\n\n+++\n\n## 线性离散系统状态方程的解\n\n离散系统的差分方程形状态方程有两种解法：递推法和z变换法。其中递推法在时变系统和时不变系统中都适用，而z变换法只适用于时不变系统。\n\n### 递推法\n\n1. 在线性时变系统中，$x(k+1)=G(k)x(k)+H(k)u(k)$，有：\n\n$$\\left\\{ \\begin{matrix} x(1)=G(0)x(0)+H(0)u(0)\\\\ x(2)=G(1)x(1)+H(1)u(1) \\\\ x(3)=G(2)x(2)+H(2)u(2) \\\\\\vdots \\end{matrix}\\right.$$\n\n给定初始条件$x(0)$和输入序列$u(0),u(1),\\cdots$后即可求解$x(k)$。\n\n2. 在线性时不变系统中，$x(k+1)=Gx(k)+Hu(k)$，其中$G,H$均为常数矩阵，因此：\n\n$$x(k)=G^kx(0)+\\sum_{i=0}^{k-1}G^{k-1-i}Hu(i)    \\tag{13}$$\n\n上式称为线性时不变离散系统的状态转移方程，其中$\\Phi(k)=G^k$称为线性时不变离散系统的状态转移矩阵。\n\n状态转移矩阵的性质：\n\n1. $\\Phi(k+1)=G\\Phi{k},\\Phi(0)=I$\n2. $\\Phi(k_2-k_0)=\\Phi(k_2-k_1)\\Phi(k_1-k_0)$\n3. $\\Phi^{-1}(k)=\\Phi(-k)$\n\n### z 变换法\n\n考虑时不变离散系统：$x(k+1)=Gx(k)+Hu(k)$，取z变换有：\n\n$$zx(z)-zx(0)=Gx(z)+Hu(z)$$\n\n$$z(z)=(zI-G)^{-1}zx(0)+(zI-G)^{-1}Hu(z)   \\tag{14}$$\n\n取z逆变换有：\n\n$$x(k)=z^{-1}\\Big[(zI-G)^{-1}z\\Big]x(0)+z^{-1}\\Big[(zI-G)^{-1}Hu(z)\\Big]    \\tag{15} $$\n\n对比公式（13）和公式（15），由解的唯一性可知，\n\n$$z^{-1}\\Big[(zI-G)^{-1}z\\Big]=G^k    \\tag{16}$$\n\n$$z^{-1}\\Big[(zI-G)^{-1}Hu(z)\\Big]=\\sum_{i=0}^{k-1}G^{k-1-i}Hu(i)   \\tag{17}$$\n\n+++info 例题\n\n;;;id8 例题1\n\n:::info \n\n考虑离散系统：$x(k+1)=Gx(k)+Hu(k)$，其中$G=\\begin{bmatrix}0&1\\\\-0.16&-1\\end{bmatrix}$，$H=\\begin{bmatrix}1\\\\1\\end{bmatrix}$，初始条件为$x(0)=\\begin{bmatrix}1\\\\-1\\end{bmatrix}$，试求当$u(k)=1$时状态方程的解。\n\n:::\n\n用z变换法求解，先计算$(zI-G)^{-1}$，有\n\n$$\\begin{aligned}(zI-G)^{-1}&=\\begin{bmatrix}z&-1\\\\0.16&z+1\\end{bmatrix}^{-1}=\\frac{1}{(z+0.2)(z+0.8)}\\begin{bmatrix}z+1&1\\\\-0.16&z\\end{bmatrix}\\\\&=\\begin{bmatrix}\\frac{4}{3}\\times \\frac{1}{z+0.2}-\\frac{1}{3}\\times \\frac{1}{z+0.8}&\\frac{5}{3}\\times \\frac{1}{z+0.2}-\\frac{5}{3}\\times \\frac{1}{z+0.8}\\\\-\\frac{0.8}{3}\\times \\frac{1}{z+0.2}+\\frac{0.8}{3}\\times \\frac{1}{z+0.8}&-\\frac{1}{3}\\times \\frac{1}{z+0.2}+\\frac{4}{3}\\times \\frac{1}{z+0.8}\\end{bmatrix}\\end{aligned}$$\n\n由于$u(k)=1$，则$u(z)=\\frac{z}{z-1}$，故$zx(0)+Hu(z)=\\begin{bmatrix}z\\\\-z\\end{bmatrix}+\\begin{bmatrix}\\frac{z}{z-1}\\\\\\frac{z}{z-1}\\end{bmatrix}=\\begin{bmatrix}\\frac{z^2}{z-1}\\\\\\frac{-z^2+2z}{z-1}\\end{bmatrix}$。\n\n那么代入公式（15）有：\n\n$$\\begin{aligned}x(z)&=(zI-G)^{-1}[zx(0)+Hu(z)]\\\\&=\\begin{bmatrix}-\\frac{17}{6}\\times \\frac{z}{z+0.2}+\\frac{22}{9}\\times \\frac{z}{z+0.8}+\\frac{25}{18}\\times \\frac{z}{z-1}\\\\\\frac{3.4}{6}\\times \\frac{z}{z+0.2}-\\frac{17.6}{9}\\times \\frac{z}{z+0.8}+\\frac{7}{18}\\times \\frac{z}{z-1}\\end{bmatrix}\\end{aligned}$$\n\n求z逆变换有：\n\n$$x(k)=\\begin{bmatrix}-\\frac{17}{6}(-0.2)^k+\\frac{22}{9}(-0.8)^k+\\frac{25}{18}\\\\\\frac{3.4}{6}(-0.2)^k-\\frac{17.6}{9}(-0.2)^k+\\frac{7}{18}\\end{bmatrix}$$\n\n;;;\n\n+++\n\n","tags":["状态方程的解","矩阵指数","状态转移矩阵","离散化"],"categories":["现代控制理论"]},{"title":"03 状态方程的解","url":"/2023/10/28/2023-10-29-状态方程的解/","content":"\n现代控制理论——03 状态方程的解\n\n<!-- more -->\n\n# 状态方程的解\n\n## 线性时不变系统齐次状态方程的解\n\n对于$n$维线性时不变系统状态方程：$\\bold{\\dot{x}}=\\bold{Ax}(t)+\\bold{Bu}(t)$，系统状态方程的解即为系统的运动。当控制输入为$0$时对应的齐次状态方程 $\\bold{\\dot{x}}=\\bold{Ax}(t)$ 的解为系统的自由运动。\n\n对于标量一阶微分方程的齐次方程 $\\dot{x}=ax(t)$，若初始时刻为$t_0$，则方程的解为$x(t)=e^{a(t-t_0)}x(t_0)$，其中指数函数展开为无穷级数：$e^{a(t-t_0)}=\\sum^{+\\infty}_{n=0}\\frac{1}{n!}a^n(t-t_0)^n$。\n\n拓展到矢量一阶微分方程的齐次方程 $\\bold{\\dot{x}}=\\bold{Ax}(t)$ ，解可以表示为\n\n$$\\bold{x}(t)=e^{\\bold{A}(t-t_0)}\\bold{x}(t_0)     \\tag{1}$$\n\n其中$e^{\\bold{A}(t-t_0)}=\\sum^{+\\infty}_{n=0}\\frac{1}{n!}\\bold{A}^n(t-t_0)^n$，称为矩阵指数。\n\n## 矩阵指数\n\n矩阵指数函数表示为：$e^{\\bold{A}(t)}=\\sum^{+\\infty}_{n=0}\\frac{1}{n!}\\bold{A}^n(t)^n$，即输入为$0$时的解（零输入响应）。\n\n### 矩阵指数的性质\n\n1. 矩阵指数的导数：$\\frac{d}{dt}e^{\\bold{A}t}=\\bold{A}e^{\\bold{A}t}=e^{\\bold{A}t}\\bold{A}$。\n\n2. 对于$n\\times{n}$阶方阵$\\bold{A}$和$\\bold{B}$，若$\\bold{A}\\bold{B}=\\bold{B}\\bold{A}$，则$e^{(\\bold{A}+\\bold{B})t}=e^{\\bold{A}t}e^{\\bold{B}t}$。\n\n3. 若$t_1$与$t_2$为独立的自变量，则$e^{\\bold{A}(t_1+t_2)}=e^{\\bold{A}t_1}e^{\\bold{A}t_2}$。\n\n4. $e^{\\bold{A}*0}=\\bold{I}$。\n\n5. $e^{\\bold{A}t}e^{\\bold{-A}t}=\\bold{I}$。\n\n6. $e^{\\bold{P}^{-1}\\bold{A}\\bold{P}}=\\bold{P}^{-1}e^{\\bold{A}}\\bold{P}$。\n\n7. $lim_{t\\to0}e^{\\bold{A}t}=\\bold{I}$。\n\n8. 若$\\bold{A}$为对角矩阵，即$\\bold{A}=\\begin{bmatrix} \\lambda_1&0&\\cdots&0\\\\ 0&\\lambda_2&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&\\vdots\\\\ 0&0&\\cdots&\\lambda_n\\end{bmatrix}$，则$e^{\\bold{A}t}=\\begin{bmatrix} e^{\\lambda_1t}&0&\\cdots&0\\\\ 0&e^{\\lambda_2t}&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&\\vdots\\\\ 0&0&\\cdots&e^{\\lambda_nt}\\end{bmatrix}$。\n\n+++primary  证明\n\n$e^{\\bold{A}t}=\\bold{I}+\\bold{A}t+\\frac{1}{2!}\\bold{A}^2t^2+\\cdots$\n\n$=\\begin{bmatrix} 1&0&\\cdots&0\\\\ 0&1&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&\\vdots\\\\ 0&0&\\cdots&1\\end{bmatrix}+\\begin{bmatrix} \\lambda_1&0&\\cdots&0\\\\ 0&\\lambda_2&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&\\vdots\\\\ 0&0&\\cdots&\\lambda_n\\end{bmatrix}t+\\frac{1}{2!}\\begin{bmatrix} \\lambda_1^2&0&\\cdots&0\\\\ 0&\\lambda_2^2&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&\\vdots\\\\ 0&0&\\cdots&\\lambda_n^2\\end{bmatrix}t^2+\\cdots$\n\n$=\\begin{bmatrix} \\sum^{+\\infty}_{n=0}\\frac{1}{n!}\\lambda_1^nt^n&0&\\cdots&0\\\\ 0&\\sum^{+\\infty}_{n=0}\\frac{1}{n!}\\lambda_2^nt^n&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&\\vdots\\\\ 0&0&\\cdots&\\sum^{+\\infty}_{n=0}\\frac{1}{n!}\\lambda_n^nt^n\\end{bmatrix}=\\begin{bmatrix} e^{\\lambda_1t}&0&\\cdots&0\\\\ 0&e^{\\lambda_2t}&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&\\vdots\\\\ 0&0&\\cdots&e^{\\lambda_nt}\\end{bmatrix}$。\n\n+++\n\n9. 若$\\bold{A}$为$m\\times{m}$的若尔当块，即$\\bold{A}=\\begin{bmatrix} \\lambda&1&0&\\cdots&0\\\\ 0&\\lambda&1&\\cdots&0\\\\  \\vdots&\\vdots&\\lambda&\\ddots&\\vdots\\\\0&0&\\cdots&\\lambda&1\\\\ 0&0&\\cdots&0&\\lambda\\end{bmatrix}_{m\\times{m}}$，则$e^{\\bold{A}t}=e^{\\lambda t}\\begin{bmatrix} 1&t&\\frac{t^{2}}{2!}&\\cdots&\\frac{t^{m-1}}{(m-1)!}\\\\ 0&1&t&\\cdots&\\frac{t^{m-2}}{(m-2)!}\\\\  \\vdots&\\vdots&\\ddots&\\ddots&\\vdots\\\\0&0&\\cdots&1&t\\\\ 0&0&\\cdots&0&1\\end{bmatrix}_{m\\times{m}}$。\n\n+++primary 若尔当块\n\n形如$\\begin{bmatrix} \\lambda&1&0&\\cdots&0\\\\ 0&\\lambda&1&\\cdots&0\\\\  \\vdots&\\vdots&\\lambda&\\ddots&\\vdots\\\\0&0&\\cdots&\\lambda&1\\\\ 0&0&\\cdots&0&\\lambda\\end{bmatrix}_{m\\times{m}}$为$m$阶若尔当矩阵，1阶若尔当矩阵为$\\lambda$。\n\n+++\n\n10. 若$\\bold{A}$为一个有多个若尔当块的若尔当矩阵（即若当标准型），即$\\bold{A}=\\begin{bmatrix} \\bold{A}_1&0&\\cdots&0\\\\ 0&\\bold{A}_2&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&\\vdots\\\\ 0&0&\\cdots&\\bold{A}_n\\end{bmatrix}$，则$e^{\\bold{A}t}=\\begin{bmatrix} e^{\\bold{A}_1t}&0&\\cdots&0\\\\ 0&e^{\\bold{A}_2t}&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&\\vdots\\\\ 0&0&\\cdots&e^{\\bold{A}_nt}\\end{bmatrix}$。\n\n### 矩阵指数的计算\n\n1. 定义计算：$e^{\\bold{A}t}=\\sum^{+\\infty}_{n=0}\\frac{1}{n!}\\bold{A}^n(t)^n$。该方法适用于计算机运算。\n\n+++info  例题\n\n;;;id1 例题1\n\n:::info \n\n已知$\\bold{A}=\\begin{bmatrix} 0&1\\\\-1&0\\end{bmatrix}$，求$e^{\\bold{A}t}$。\n\n:::\n\n由定义，\n\n$\\begin{aligned}e^{\\bold{A}t}&=\\bold{I}+\\bold{A}t+\\frac{1}{2!}+\\cdots=\\begin{bmatrix}1&0\\\\0&1\\end{bmatrix}+\\begin{bmatrix}0&t\\\\-t&0\\end{bmatrix}+\\frac{1}{2!}\\begin{bmatrix}-t^2&0\\\\0&-t^2\\end{bmatrix}+\\cdots\\\\&=\\begin{bmatrix}1-\\frac{t^2}{2!}+\\cdots&t-\\frac{t^3}{3!}+\\cdots\\\\-t+\\frac{t^3}{3!}-\\cdots&1-\\frac{t^2}{2!}+\\cdots\\end{bmatrix}=\\begin{bmatrix} \\cos{t}&\\sin{t}\\\\-\\sin{t}&\\cos{t}\\end{bmatrix}\\end{aligned}$.\n\n;;; \n\n+++\n\n2. 拉氏变换法：利用拉氏变换在频域中求解齐次状态方程的解。\n\n设线性时不变齐次状态方程为 $\\bold{\\dot{x}}=\\bold{Ax}(t)$，$\\bold{x}(0)=\\bold{x}_0$，$t\\geq{t_0}$。\n\n作拉氏变换有 $s\\bold{X}(s)-\\bold{x}(0)=\\bold{AX}(s)$，即 $(s\\bold{I}-\\bold{A})\\bold{X}(s)=\\bold{x}(0)$，那么 \n\n$$\\bold{X}(s) =(s\\bold{I}-\\bold{A})^{-1}\\bold{x}(0)$$\n\n取拉氏逆变换有 $\\bold{x}(0)=L^{-1}[(s\\bold{I}-\\bold{A})^{-1}\\bold{x}(0)]=L^{-1}[(s\\bold{I}-\\bold{A})^{-1}]\\bold{x}(0)$，因此 \n\n$$e^{\\bold{A}t}=L^{-1}[(s\\bold{I}-\\bold{A})^{-1}]     \\tag{2}$$\n\n+++info 例题\n\n;;;id2 例题1\n\n:::info\n\n计算矩阵 $\\bold{A}=\\begin{bmatrix}0&1\\\\-2&-3\\end{bmatrix}$的矩阵指数。\n\n:::\n\n由拉氏变换法，$(s\\bold{I}-\\bold{A})=\\begin{bmatrix} s&-1\\\\2&s+3\\end{bmatrix}$，则$(s\\bold{I}-\\bold{A})^{-1}=\\begin{bmatrix}\\frac{s+3}{(s+1)(s+2)}&\\frac{1}{(s+1)(s+2)}\\\\\\frac{-2}{(s+1)(s+2)}&\\frac{s}{(s+1)(s+2)}\\end{bmatrix}$，\n\n则 $e^{\\bold{A}t}=L^{-1}\\begin{bmatrix}\\frac{s+3}{(s+1)(s+2)}&\\frac{1}{(s+1)(s+2)}\\\\\\frac{-2}{(s+1)(s+2)}&\\frac{s}{(s+1)(s+2)}\\end{bmatrix}=\\begin{bmatrix}2e^{-t}&e^{-t}-e^{-2t}\\\\-2e^{-t}+2e^{-2t}&-e^{-t}+2e^{-2t}\\end{bmatrix}$。\n\n;;;\n\n+++\n\n3. 将矩阵化为对角标准型或若尔当标准型。\n\n若$\\bold{A}=\\begin{bmatrix} \\lambda_1&0&\\cdots&0\\\\ 0&\\lambda_2&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&\\vdots\\\\ 0&0&\\cdots&\\lambda_n\\end{bmatrix}$为对角矩阵，则$e^{\\bold{A}t}$也为对角矩阵（[性质8](#矩阵指数的性质)），即$e^{\\bold{A}t}=\\begin{bmatrix} e^{\\lambda_1t}&0&\\cdots&0\\\\ 0&e^{\\lambda_2t}&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&\\vdots\\\\ 0&0&\\cdots&e^{\\lambda_nt}\\end{bmatrix}$。\n\n（1）当矩阵$\\bold{A}$的 $n$ 个特征值 $\\lambda_1,\\lambda_2\\dots\\lambda_n$ 均两两互异时，则可确定变换阵 $\\bold{P}$ 及其逆矩阵 $\\bold{P}^{-1}$ ，使得矩阵$\\bold{A}$对角化：$\\bold{A} = \\bold{P}\\begin{bmatrix}\\lambda_1&0&\\cdots&0\\\\ 0&\\lambda_2&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&\\vdots\\\\ 0&0&\\cdots&\\lambda_n\\end{bmatrix}\\bold{P}^{-1}$，则有 \n\n$$e^{\\bold{A}t}=\\bold{P}\\begin{bmatrix} e^{\\lambda_1t}&0&\\cdots&0\\\\ 0&e^{\\lambda_2t}&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&\\vdots\\\\ 0&0&\\cdots&e^{\\lambda_nt}\\end{bmatrix}\\bold{P}^{-1}   \\tag{3}$$\n\n+++primary 解题步骤\n\n1. 求解系统矩阵$\\bold{A}$的特征值 $\\lambda_1,\\lambda_2\\dots\\lambda_n$ 。（特征值两两互异）\n2. 求解特征值对应的特征向量$p_1,p_2\\dots p_n$，构造变换阵 $\\bold{P}$ 并求解其逆矩阵 $\\bold{P}^{-1}$ 。\n3. 求解矩阵指数 $e^{\\bold{A}t}=\\bold{P}\\begin{bmatrix} e^{\\lambda_1t}&0&\\cdots&0\\\\ 0&e^{\\lambda_2t}&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&\\vdots\\\\ 0&0&\\cdots&e^{\\lambda_nt}\\end{bmatrix}\\bold{P}^{-1}$。\n\n+++\n\n+++info 例题\n\n;;;id3 例题1\n\n:::info \n\n试用化为对角标准型法求解矩阵$\\bold{A}=\\begin{bmatrix}0&1\\\\-2&-3\\end{bmatrix}$的矩阵指数 $e^{\\bold{A}t}$。\n\n:::\n\n求解特征值$|\\lambda\\bold{I}-\\bold{A}|=\\begin{vmatrix}\\lambda&-1\\\\2&\\lambda+3\\end{vmatrix}=(\\lambda+1)(\\lambda+2)$，得到特征值为$\\lambda_1=-1$，$\\lambda_2=-2$。继而求解特征向量$p_1=\\begin{bmatrix}1\\\\-1\\end{bmatrix}$，$p_2=\\begin{bmatrix}1\\\\-2\\end{bmatrix}$。\n\n故变换矩阵 $\\bold{P}=\\begin{bmatrix}1&1\\\\-1&-2\\end{bmatrix}$，求逆有 $\\bold{P}^{-1}=\\begin{bmatrix}2&1\\\\-1&-1\\end{bmatrix}$。\n\n则矩阵指数为 $e^{\\bold{A}t}=\\bold{P}\\begin{bmatrix} e^{-t}&0\\\\ 0&e^{-2t}\\end{bmatrix}\\bold{P}^{-1}=\\begin{bmatrix} 2e^{-t}-e^{-2t}&e^{-t}-e^{-2t}\\\\ -2e^{-t}+2e^{-2t}&-e^{-t}+2e^{-2t}\\end{bmatrix}$。\n\n;;;\n\n;;;id3 例题2\n\n:::info \n\n试用化为对角标准型法求解矩阵$\\bold{A}=\\begin{bmatrix}0&1&-1\\\\-6&-11&6\\\\-6&-11&5\\end{bmatrix}$的矩阵指数 $e^{\\bold{A}t}$。\n\n:::\n\n求解特征值$|\\lambda\\bold{I}-\\bold{A}|=\\begin{vmatrix}\\lambda&-1&1\\\\6&\\lambda+11&-6\\\\6&11&\\lambda-5\\end{vmatrix}=(\\lambda+1)(\\lambda+2)(\\lambda+3)$，得到特征值为$\\lambda_1=-1$，$\\lambda_2=-2$，$\\lambda_3=-3$。继而求解特征向量$p_1=\\begin{bmatrix}1\\\\0\\\\1\\end{bmatrix}$，$p_2=\\begin{bmatrix}1\\\\2\\\\4\\end{bmatrix}$，$p_3=\\begin{bmatrix}1\\\\6\\\\9\\end{bmatrix}$。\n\n故变换矩阵 $\\bold{P}=\\begin{bmatrix}1&1&1\\\\0&2&6\\\\1&4&9\\end{bmatrix}$，求逆有 $\\bold{P}^{-1}=\\begin{bmatrix}3&\\frac{5}{2}&-2\\\\-3&-4&3\\\\1&\\frac{3}{2}&-1\\end{bmatrix}$。\n\n则矩阵指数为 \n\n$\\begin{aligned}e^{\\bold{A}t}&=\\bold{P}\\begin{bmatrix} e^{-t}&0&0\\\\ 0&e^{-2t}&0\\\\0&0&e^{-3t}\\end{bmatrix}\\bold{P}^{-1}=\\begin{bmatrix}1&1&1\\\\0&2&6\\\\1&4&9\\end{bmatrix}\\begin{bmatrix} e^{-t}&0&0\\\\ 0&e^{-2t}&0\\\\0&0&e^{-3t}\\end{bmatrix}\\begin{bmatrix}3&\\frac{5}{2}&-2\\\\-3&-4&3\\\\1&\\frac{3}{2}&-1\\end{bmatrix}\\\\&=\\begin{bmatrix} 3e^{-t}-3e^{-2t}+e^{-3t}&\\frac{5}{2}e^{-t}-4e^{-2t}+\\frac{3}{2}e^{-3t}&-2e^{-t}+3e^{-2t}-e^{-3t}\\\\ -6e^{-t}+6e^{-3t}&-8e^{-2t}+9e^{-3t}&6e^{-2t}-6e^{-3t}\\\\3e^{-t}-12e^{-2t}+9e^{-3t}&\\frac{5}{2}e^{-t}-16e^{-2t}+\\frac{27}{2}e^{-3t}&-2e^{-t}+12e^{-2t}-9e^{-3t}\\end{bmatrix}\\end{aligned}$。\n\n;;;\n\n+++\n\n（2）当 $n\\times{n}$ 矩阵$\\bold{A}$有$n$重特征根时，存在线性非奇异变换 $\\bold{P}$ 及其逆矩阵 $\\bold{P}^{-1}$ ，将矩阵 $\\bold{A}$ 转化为若尔当标准型：$\\bold{A} = \\bold{P}\\begin{bmatrix}\\lambda&1&\\cdots&0\\\\ 0&\\lambda&\\cdots&0\\\\  \\vdots&\\vdots&\\ddots&1\\\\ 0&0&\\cdots&\\lambda\\end{bmatrix}_{n\\times{n}}\\bold{P}^{-1}$，则有 \n\n$$e^{\\bold{A}t}=\\bold{P}e^{\\lambda t}\\begin{bmatrix} 1&t&\\frac{t^2}{2!}&\\cdots&\\frac{t^{n-1}}{(n-1)!}\\\\ 0&1&t&\\cdots&\\frac{t^{n-2}}{(n-2)!}\\\\  \\vdots&\\vdots&\\vdots&\\ddots&\\vdots\\\\0&0&0&\\cdots&t\\\\ 0&0&0&\\cdots&1\\end{bmatrix}_{n\\times{n}}\\bold{P}^{-1}   \\tag{4}$$\n\n拓展到一般情况，矩阵$\\bold{A}$同时存在重特征根和单特征根时,以有三重根$\\lambda_1$、两重根$\\lambda_2$和单根$\\lambda_3$的矩阵$\\bold{A}$为例，若存在变换阵 $\\bold{P}$ 及其逆矩阵 $\\bold{P}^{-1}$ ，将矩阵 $\\bold{A}$ 转化为若尔当标准型：$\\bold{A} = \\bold{P}\\begin{bmatrix}\\lambda_1&1&&&&\\bold{0}\\\\ &\\lambda_1&1&&&\\\\  &&\\lambda_1&&&\\\\&&&\\lambda_2&1&\\\\&&&&\\lambda_2&\\\\\\bold{0}&&&&&\\lambda_1\\end{bmatrix}\\bold{P}^{-1}$，则有 \n\n$$e^{\\bold{A}t}=\\bold{P}\\begin{bmatrix}e^{\\lambda_1t}&te^{\\lambda_1t}&\\frac{1}{2}t^2e^{\\lambda_1t}&0&0&0\\\\ 0&e^{\\lambda_1t}&te^{\\lambda_1t}&0&0&0\\\\  0&0&e^{\\lambda_1t}&0&0&0\\\\0&0&0&e^{\\lambda_2t}&te^{\\lambda_2t}&0\\\\0&0&0&0&e^{\\lambda_2t}&0\\\\0&0&0&0&0&e^{\\lambda_3t}\\end{bmatrix}\\bold{P}^{-1}     \\tag{5}$$\n\n+++info 例题\n\n;;;id4 例题1\n\n:::info \n\n试求矩阵$\\bold{A}=\\begin{bmatrix}0&6&-5\\\\1&0&2\\\\3&2&4\\end{bmatrix}$的矩阵指数。\n\n:::\n\n求解特征值$|\\lambda\\bold{I}-\\bold{A}|=\\begin{vmatrix}\\lambda&-6&5\\\\-1&\\lambda&-2\\\\-3&-2&\\lambda-4\\end{vmatrix}=(\\lambda-1)^2(\\lambda-2)$，得到特征值为$\\lambda_1=\\lambda_2=1$，$\\lambda_3=2$。继而求解特征向量和广义特征向量$p_1=\\begin{bmatrix}1\\\\-\\frac{3}{7}\\\\-\\frac{5}{7}\\end{bmatrix}$，$p_2=\\begin{bmatrix}1\\\\-\\frac{22}{49}\\\\-\\frac{46}{49}\\end{bmatrix}$，$p_3=\\begin{bmatrix}2\\\\-1\\\\-2\\end{bmatrix}$。\n\n故变换矩阵 $\\bold{P}=\\begin{bmatrix}1&1&2\\\\-\\frac{3}{7}&-\\frac{22}{49}&-1\\\\-\\frac{5}{7}&-\\frac{46}{49}&-2\\end{bmatrix}$，求逆有 $\\bold{P}^{-1}=\\begin{bmatrix}2&-6&5\\\\7&28&-7\\\\-4&-11&1\\end{bmatrix}$。\n\n则矩阵指数为\n\n $\\begin{aligned}e^{\\bold{A}t}&=\\bold{P}\\begin{bmatrix} e^{-t}&te^{-t}&0\\\\ 0&e^{t}&0\\\\0&0&e^{2t}\\end{bmatrix}\\bold{P}^{-1}\\\\&=\\begin{bmatrix} 9e^{t}+7te^{t}-8e^{2t}&22e^{t}+28te^{t}+-22e^{2t}&-2e^{t}-7te^{t}+2e^{2t}\\\\ -4e^{t}-3te^{t}+4e^{2t}&-10e^{t}-12te^{t}+11e^{2t}&e^{t}+3te^{t}-e^{2t}\\\\-8e^{t}-5te^{t}+8e^{2t}&-22e^{t}-20te^{t}-22e^{2t}&3e^{t}+5te^{t}-2e^{2t}\\end{bmatrix}\\end{aligned}$。\n\n;;;\n\n+++\n\n4. 化矩阵指数为矩阵$\\bold{A}$的有限项。\n\n该方法将矩阵指数表示为$e^{\\bold{A}t}=a_0(t)\\bold{I}+a_1(t)\\bold{A}+\\cdots+a_{n-1}\\bold{A}^{n-1}$。\n\n当特征值两两互异时，\n\n$$\\begin{bmatrix}a_0(t)\\\\a_1(t)\\\\\\vdots\\\\a_{n-1}(t)\\end{bmatrix}=\\begin{bmatrix}1&\\lambda_1&\\cdots&\\lambda_1^{n-1}\\\\1&\\lambda_2&\\cdots&\\lambda_2^{n-1}\\\\\\vdots&\\vdots&\\ddots&\\vdots\\\\1&\\lambda_n&\\cdots&\\lambda_n^{n-1}\\end{bmatrix}^{-1}\\begin{bmatrix}e^{\\lambda_1t}\\\\e^{\\lambda_2t}\\\\\\vdots\\\\e^{\\lambda_nt}\\end{bmatrix}    \\tag{6}$$\n\n当存在重特征值时（以三重根$\\lambda_1$和二重根$\\lambda_2$，其余根为单根为例），\n\n$$\\begin{bmatrix}a_0(t)\\\\a_1(t)\\\\a_2(t)\\\\a_3(t)\\\\a_4(t)\\\\a_5(t)\\\\\\vdots\\\\a_{n-1}(t)\\end{bmatrix}=\\begin{bmatrix}0&0&1&3\\lambda_1&\\cdots&\\frac{(n-1)(n-2)}{2!}\\lambda_1^{n-3}\\\\0&1&2\\lambda_1&3\\lambda_1^2&\\cdots&\\frac{(n-1)}{1!}\\lambda_1^{n-2}\\\\1&\\lambda_1&\\lambda_1^2&\\lambda_1^3&\\cdots&\\lambda_1^{n-1}\\\\0&1&2\\lambda_2&3\\lambda_2^2&\\cdots&\\frac{(n-1)}{1!}\\lambda_2^{n-2}\\\\1&\\lambda_2&\\lambda_2^2&\\lambda_2^3&\\cdots&\\lambda_2^{n-1}\\\\1&\\lambda_3&\\lambda_3^2&\\lambda_3^3&\\cdots&\\lambda_3^{n-1}\\\\\\vdots&\\vdots&\\vdots&\\vdots&\\ddots&\\vdots\\\\1&\\lambda_n&\\lambda_n^2&\\lambda_n^3&\\cdots&\\lambda_n^{n-1}\\end{bmatrix}^{-1}\\begin{bmatrix}\\frac{1}{2!}t^2e^{\\lambda_1t}\\\\\\frac{1}{1!}te^{\\lambda_1t}\\\\e^{\\lambda_1t}\\\\\\frac{1}{1!}te^{\\lambda_2t}\\\\e^{\\lambda_2t}\\\\e^{\\lambda_3t}\\\\\\vdots\\\\e^{\\lambda_{n-3}t}\\end{bmatrix}     \\tag{7}$$\n\n+++primary 证明：Cayley-Hamilton定理\n\n\n\n+++\n\n+++primary 解题步骤\n\n1. 求解系统矩阵$\\bold{A}$的特征值 $\\lambda_1,\\lambda_2\\dots\\lambda_n$ 。\n2. 求解有限项，根据特征值的互异性分情况分析：\n\n\t- 当特征值两两互异时，直接根据$\\begin{bmatrix}a_0(t)\\\\a_1(t)\\\\\\vdots\\\\a_{n-1}(t)\\end{bmatrix}=\\begin{bmatrix}1&\\lambda_1&\\cdots&\\lambda_1^{n-1}\\\\1&\\lambda_2&\\cdots&\\lambda_2^{n-1}\\\\\\vdots&\\vdots&\\ddots&\\vdots\\\\1&\\lambda_n&\\cdots&\\lambda_n^{n-1}\\end{bmatrix}^{-1}\\begin{bmatrix}e^{\\lambda_1t}\\\\e^{\\lambda_2t}\\\\\\vdots\\\\e^{\\lambda_nt}\\end{bmatrix}$求解有限项。\n\t- 当特征值存在重根时，对于单根部分列写方程：\n\n$$e^{\\lambda_it}=a_0(t)+a_1(t)\\lambda_i+\\cdots+a_{n-1}(t)\\lambda_i^{n-1}$$\n\n而对于$k$重根部分在列写方程$e^{\\lambda_it}=a_0(t)+a_1(t)\\lambda_i+\\cdots+a_{k-1}(t)\\lambda_i^{k-1}$外还需要补充方程：\n\n$$\\left\\{ \\begin{matrix} te^{\\lambda_it}=a_1(t)+2a_2(t)\\lambda_i+\\cdots+(k-1)a_{k-1}(t)\\lambda_i^{k-2}\\\\t^2e^{\\lambda_it}=2a_2(t)+6a_3(t)\\lambda_i+\\cdots+(k-1)(k-2)a_{k-1}(t)\\lambda_i^{k-3} \\\\\\vdots\\\\t^{k-1}e^{\\lambda_it}=(k-1)!a_{k-1}(t) \\\\\\end{matrix}\\right.$$\n\n联立$n$条方程求解有限项\n\n3. 代入求解矩阵指数：\n\n$$e^{\\bold{A}t}=a_0(t)\\bold{I}+a_1(t)\\bold{A}+\\cdots+a_{n-1}\\bold{A}^{n-1}$$\n\n+++\n\n+++info 例题\n\n;;;id5 例题1\n\n:::info \n\n试求矩阵$\\bold{A}=\\begin{bmatrix}0&1&0\\\\0&0&1\\\\2&3&0\\end{bmatrix}$的矩阵指数，利用化为有限项法求解。\n\n:::\n\n求解特征值$|\\lambda\\bold{I}-\\bold{A}|=\\begin{vmatrix}\\lambda&-1&0\\\\0&\\lambda&-1\\\\-2&-3&\\lambda\\end{vmatrix}=(\\lambda+1)^2(\\lambda-2)$，得到特征值为$\\lambda_{1,2}=-1$，$\\lambda_3=2$。\n\n对于单根 $\\lambda_3=2$，有 $e^{2t}=a_0(t)+2a_1(t)+4a_2(t)$，\n\n对于二重根$\\lambda_{1,2}=-1$，有 $e^{-t}=a_0(t)-a_1(t)+a_2(t)$，还需要补充方程：\n\n$$ te^{-t}=a_1(t)-2a_2(t)$$\n\n联立三组方程解得：\n\n$$\\left\\{ \\begin{matrix} a_0(t)=\\frac{1}{9}(e^{2t}+8e^{-t}+6te^{-t})\\\\ a_1(t)=\\frac{1}{9}(2e^{2t}-2e^{-t}+3te^{-t}) \\\\ a_3(t)=\\frac{1}{9}(e^{2t}-e^{-t}-3te^{-t}) \\\\\\end{matrix}\\right.$$\n\n $$\\begin{aligned}e^{\\bold{A}t}&=a_0(t)\\bold{I}+a_1(t)\\bold{A}+\\cdots+a_{n-1}\\bold{A}^{n-1}\\\\&=\\frac{1}{9}\\begin{bmatrix} e^{2t}+(8+6t)e^{-t}&e^{2t}-(2-3t)e^{-t}&e^{2t}-(1+3t)e^{-t}\\\\ 2e^{2t}-(2+6t)e^{-t}&4e^{2t}+(5-3t)e^{-t}&2e^{2t}-(2-3t)e^{-t}\\\\4e^{2t}+(6-4t)e^{-t}&8e^{2t}+(3-8t)e^{-t}&4e^{2t}+(5-3t)e^{-t}\\end{bmatrix}\\end{aligned}$$\n\n;;;\n\n+++\n\n## 线性时不变系统非齐次状态方程的解\n\n动态系统在控制的作用下的运动称为受控运动。线性时不变系统非齐次状态方程的解即为线性时不变系统的受控运动。考虑系统 $\\dot{x}(t)=Ax(t)+Bu(t),x(0),t\\geq0$，其动态响应形式为：\n\n$$x(t)=e^{A(t-t_0)}x(t_0)+\\int_{t_0}^te^{A(t-\\tau)}Bu(\\tau)\\,d\\tau,  t\\geq0   \\tag{8}$$\n\n可理解为由两部分组成：一部分是由初始状态引起的系统自由运动，即零输入响应；另外一部分是由控制输入所产生的受控运动，即零状态响应。\n\n+++primary 推导过程\n\n对于系统$\\dot{x}(t)=Ax(t)+Bu(t),x(0),t\\geq0$，左乘$e^{-At}$后求导可得：\n\n$$\\frac{d}{dt}[e^{-At}x(t)]=e^{-At}[\\dot{x}(t)-Ax(t)]=e^{-At}Bu(t)$$\n\n两边积分得：\n\n$$\\int_0^t\\{\\frac{d}{dt}[e^{-At}x(t)]\\}d\\tau=\\int_0^te^{-At}Bu(t)d\\tau$$\n\n$$e^{-At}x(t)-x(0)I=\\int_0^te^{-At}Bu(t)d\\tau$$\n\n$$x(t)=e^{A(t-t_0)}x(t_0)+\\int_{t_0}^te^{A(t-\\tau)}Bu(\\tau)\\,d\\tau,  t\\geq0$$\n\n+++\n\n## 线性时不变系统的状态转移矩阵\n\n在线性时不变系统解 $x(t)=e^{A(t-t_0)}x(t_0)+\\int_{t_0}^te^{A(t-\\tau)}Bu(\\tau)\\,d\\tau,  t\\geq0$ 中，定义状态转移矩阵$\\Phi(t,t_0)=e^{A(t-t_0)}$。\n\n+++ 注\n\n1. 线性时不变系统的状态转移矩阵可记为：$\\Phi(t,t_0)=\\Phi{(t-t_0)}$。\n2. $x(t)$是由初始值引起的零输入解和控制产生的零状态解的叠加。\n3. 解的结构显示了从$x(t_0)$到$x(t)$的一种变换关系。\n\n+++\n\n+++ 线性连续系统的状态转移矩阵\n\n1. 定义\n\n对于线性连续系统的状态方程：$\\dot{x}(t)=A(t)x(t)+B(t)u(t),x(t_0)=x_0,A(t)\\in{R^{n\\times{n}}}$，那么称满足以下矩阵方程的解$\\Phi(t,t_0)$为系统的状态转移矩阵。\n\n$$\\dot{\\Phi}(t,t_0)=A(t)\\Phi(t,t_0),\\Phi(t_0,t_0)=I,t\\geq{t_0}    \\tag{9}$$\n\n2. 状态转移矩阵的性质\n\n- $\\frac{d\\Phi(t,t_0)}{dt}=A(t)\\Phi(t,t_0),\\Phi(t_0,t_0)=I$\n\n* $\\Phi(t_2,t_1)\\Phi(t_1,t_0)=\\Phi(t_2,t_0)$\n\n+ $\\Phi(mt)=\\Phi(t+t+\\cdots+t)=[\\Phi(t)]^m$\n\n+++\n\n## 线性时变系统状态方程的解*\n\n### 线性时变系统齐次状态方程的解\n\n### 线性时变系统的状态转移矩阵\n\n### 线性时变系统非齐次状态方程的解\n\n\n\n## 线性连续系统的时间离散化\n\n线性连续系统的时间离散化问题本质上就是在一定的采样方式和保持方式下，由系统的连续时间状态空间描述来得到对应的离散时间状态空间描述，并建立两者的系数矩阵间的关系式。\n\n### 近似离散化\n\n考虑以下线性时变系统：$\\dot{x}(t)=A(t)x(t)+B(t)u(t)$，当采样周期$T$较小且精度要求不高时，可将其离散化为：\n\n$$\\dot{x}(kT)\\approx \\frac{1}{T}[x((k+1)T)-x(kT)]    \\tag{10}$$\n\n令$t=kT$，有\n\n$$\\frac{1}{T}[x((k+1)T)-x(kT)]=A(kT)x(kT)+B(kT)u(kT)$$\n\n$$\\begin{aligned}x[(k+1)T]&=[I+TA(kT)]x(kT)+TB(kT)u(kT)\\\\&=G(kT)x(kT)+H(kT)u(kT)\\end{aligned}$$\n\n其中，$G(kT)=I+TA(kT)$，$H(kT)=TB(kT)$。\n\n:::info\n\n注：一般而言，当采样周期为系统最小时间系数的$\\frac{1}{10}$左右，近似度已经足够。\n\n:::\n\n+++info 例题\n\n;;;id6 例题1\n\n:::info \n\n系统的状态方程为$\\dot{x}(t)=A(t)x(t)+B(t)u(t)$，其中$A(t)=\\begin{bmatrix}0&5(1-e^{-5t})\\\\0&5(e^{-5t}-1)\\end{bmatrix}$，$B(t)=\\begin{bmatrix}5&5e^{-5t}\\\\0&5(1-e^{-5t})\\end{bmatrix}$。试求采样周期为$T=0.2s$时的离散状态方程。\n\n:::\n\n直接代入公式有：\n\n$$G(kT)=I+TA(kT)=\\begin{bmatrix}1&1-e^{-k}\\\\0&e^{-k}\\end{bmatrix}$$\n\n$$H(kT)=TB(kT)=\\begin{bmatrix}1&e^{-k}\\\\0&1-e^{-k}\\end{bmatrix}$$\n\n那么，离散状态方程为：$x[(k+1)T]=G(kT)x(kT)+H(kT)u(kT)$\n\n;;;\n\n;;;id6 例题2\n\n:::info\n\n将状态方程$\\dot{x}=\\begin{bmatrix}0&1\\\\-2&-3\\end{bmatrix}x+\\begin{bmatrix}0\\\\1\\end{bmatrix}u$ 近似离散化，$T=0.2s$。\n\n:::\n\n由题：$G=I+TA=\\begin{bmatrix}1&0\\\\0&1\\end{bmatrix}+0.2\\begin{bmatrix}0&1\\\\-2&-3\\end{bmatrix}=\\begin{bmatrix}1&0.2\\\\-0.4&0.4\\end{bmatrix}$，$H=0.2\\begin{bmatrix}0\\\\1\\end{bmatrix}=\\begin{bmatrix}0\\\\0.2\\end{bmatrix}$。\n\n故离散状态方程为：\n\n$$$x[0.2(k+1)]=\\begin{bmatrix}1&0.2\\\\-0.4&0.4\\end{bmatrix}x(0.2k)+\\begin{bmatrix}0\\\\0.2\\end{bmatrix}u(0.2k)$$$\n\n;;;\n\n+++\n\n### 线性时不变系统状态方程的离散化\n\n在线性时不变系统中，$\\dot{x}(t)=A(x)+B(u)$，其时间离散化状态方程为：\n\n$$x[(k+1)T]=Gx(kT)+Hu(kT)    \\tag{11}$$\n\n其中$G=e^{AT}$，$H=(\\int_0^Te^{AT}dt)B$。假设条件为：(1)等采样周期$T$；(2)$u(t)\\equiv u(kT),kT\\leq t\\leq (k+1)T$。\n\n+++primary 推导证明\n\n对于线性时不变系统 $\\dot{x}(t)=A(x)+B(u)$，其状态方程的解为：\n\n$$x(t)=e^{A(t-t_0)}x(t_0)+\\int e^{A(t-\\tau)}Bu(\\tau)d\\tau    \\tag{12}$$\n\n假设：(1)等采样周期$T$；(2)$x(k)=[x(t)]_{t=kT}$，$u(k)=[u(t)]_{t=kT}$\n\n那么令 $t=(k+1)T$，$t_0=kT$，有：\n\n$$\\begin{aligned}x[(k+1)T]&=e^{AT}x(kT)+\\int_{kT}^{(k+1)T}e^{A[(k+1)T-\\tau]}Bu(\\tau)d\\tau\\\\&=e^{AT}x(kT)+\\int_{kT}^{(k+1)T}e^{A[(k+1)T-\\tau]}Bd\\tau \\cdot u(kT)\\end{aligned}$$\n\n令 $t=(k+1)T-\\tau$，$d\\tau =-dt$，有：\n\n$$\\begin{aligned}x[(k+1)T]&=e^{AT}x(kT)+\\int_{0}^{\\tau}e^{A(t)}Bdt\\cdot u(kT)\\\\&=e^{AT}x(kT)+\\int_{0}^{\\tau}e^{A(t)}dt\\cdot Bu(kT)\\end{aligned}$$\n\n令$G=e^{AT}$，$H=(\\int_0^Te^{AT}dt)B$，有线性时不变系统的离散状态方程为：\n\n$$x[(k+1)T]=Gx(kT)+Hu(kT)$$\n\n+++\n\n+++primary 解题步骤\n\n1. 求解矩阵指数，方法见[矩阵指数的计算](#矩阵指数的计算)。\n2. 求解系数矩阵：$G=e^{AT}$，$H=(\\int_0^Te^{AT}dt)B$。\n3. 列写时间离散化状态方程：$x[(k+1)T]=Gx(kT)+Hu(kT)$\n\n+++\n\n+++info 例题\n\n;;;id7 例题1\n\n:::info\n\n将状态方程$\\dot{x}=\\begin{bmatrix}0&1\\\\0&-2\\end{bmatrix}x+\\begin{bmatrix}0\\\\1\\end{bmatrix}u$ 离散化，$T=0.1s$。\n\n:::\n\n利用拉氏变换法求解矩阵指数函数。取拉氏变换有：\n\n$$[sI-A]^{-1}=\\begin{bmatrix}s&-1\\\\0&s+2\\end{bmatrix}^{-1}=\\begin{bmatrix}\\frac{1}{s}&\\frac{1}{s(s+2)}\\\\0&\\frac{1}{s+2}\\end{bmatrix}$$\n\n取拉氏逆变换得到矩阵指数函数：\n\n$$e^{At}=L^{-1}[sI-A]^{-1}=\\begin{bmatrix}1&0.5(1-e^{-2T})\\\\0&e^{-2T}\\end{bmatrix}$$\n\n进而求解系数矩阵：\n\n$$G=e^{AT}=\\begin{bmatrix}1&0.5(1-e^{-2T})\\\\0&e^{-2T}\\end{bmatrix}=\\begin{bmatrix}1&0.091\\\\0&0.819\\end{bmatrix}$$\n\n$$\\begin{aligned}H&=(\\int_0^Te^{AT}dt)B=\\Bigg[\\int_0^T\\begin{bmatrix}1&0.5(1-e^{-2T})\\\\0&e^{-2T}\\end{bmatrix}dt\\Bigg]\\begin{bmatrix}0\\\\1\\end{bmatrix}\\\\&=\\begin{bmatrix}T&0.5T+0.25e^{-2T}-0.25\\\\0&-0.5e^{-2T}+0.5\\end{bmatrix}\\begin{bmatrix}0\\\\1\\end{bmatrix}=\\begin{bmatrix}0.005\\\\0.091\\end{bmatrix}\\end{aligned}$$\n\n故时间离散化状态方程为：\n\n$x[0.1(k+1)]=\\begin{bmatrix}1&0.091\\\\0&0.819\\end{bmatrix}x(0.1k)+\\begin{bmatrix}0.005\\\\0.091\\end{bmatrix}u(0.1k)$\n\n;;;\n\n+++\n\n## 线性离散系统状态方程的解\n\n离散系统的差分方程形状态方程有两种解法：递推法和z变换法。其中递推法在时变系统和时不变系统中都适用，而z变换法只适用于时不变系统。\n\n### 递推法\n\n1. 在线性时变系统中，$x(k+1)=G(k)x(k)+H(k)u(k)$，有：\n\n$$\\left\\{ \\begin{matrix} x(1)=G(0)x(0)+H(0)u(0)\\\\ x(2)=G(1)x(1)+H(1)u(1) \\\\ x(3)=G(2)x(2)+H(2)u(2) \\\\\\vdots \\end{matrix}\\right.$$\n\n给定初始条件$x(0)$和输入序列$u(0),u(1),\\cdots$后即可求解$x(k)$。\n\n2. 在线性时不变系统中，$x(k+1)=Gx(k)+Hu(k)$，其中$G,H$均为常数矩阵，因此：\n\n$$x(k)=G^kx(0)+\\sum_{i=0}^{k-1}G^{k-1-i}Hu(i)    \\tag{13}$$\n\n上式称为线性时不变离散系统的状态转移方程，其中$\\Phi(k)=G^k$称为线性时不变离散系统的状态转移矩阵。\n\n状态转移矩阵的性质：\n\n1. $\\Phi(k+1)=G\\Phi{k},\\Phi(0)=I$\n2. $\\Phi(k_2-k_0)=\\Phi(k_2-k_1)\\Phi(k_1-k_0)$\n3. $\\Phi^{-1}(k)=\\Phi(-k)$\n\n### z 变换法\n\n考虑时不变离散系统：$x(k+1)=Gx(k)+Hu(k)$，取z变换有：\n\n$$zx(z)-zx(0)=Gx(z)+Hu(z)$$\n\n$$z(z)=(zI-G)^{-1}zx(0)+(zI-G)^{-1}Hu(z)   \\tag{14}$$\n\n取z逆变换有：\n\n$$x(k)=z^{-1}\\Big[(zI-G)^{-1}z\\Big]x(0)+z^{-1}\\Big[(zI-G)^{-1}Hu(z)\\Big]    \\tag{15} $$\n\n对比公式（13）和公式（15），由解的唯一性可知，\n\n$$z^{-1}\\Big[(zI-G)^{-1}z\\Big]=G^k    \\tag{16}$$\n\n$$z^{-1}\\Big[(zI-G)^{-1}Hu(z)\\Big]=\\sum_{i=0}^{k-1}G^{k-1-i}Hu(i)   \\tag{17}$$\n\n+++info 例题\n\n;;;id8 例题1\n\n:::info \n\n考虑离散系统：$x(k+1)=Gx(k)+Hu(k)$，其中$G=\\begin{bmatrix}0&1\\\\-0.16&-1\\end{bmatrix}$，$H=\\begin{bmatrix}1\\\\1\\end{bmatrix}$，初始条件为$x(0)=\\begin{bmatrix}1\\\\-1\\end{bmatrix}$，试求当$u(k)=1$时状态方程的解。\n\n:::\n\n用z变换法求解，先计算$(zI-G)^{-1}$，有\n\n$$\\begin{aligned}(zI-G)^{-1}&=\\begin{bmatrix}z&-1\\\\0.16&z+1\\end{bmatrix}^{-1}=\\frac{1}{(z+0.2)(z+0.8)}\\begin{bmatrix}z+1&1\\\\-0.16&z\\end{bmatrix}\\\\&=\\begin{bmatrix}\\frac{4}{3}\\times \\frac{1}{z+0.2}-\\frac{1}{3}\\times \\frac{1}{z+0.8}&\\frac{5}{3}\\times \\frac{1}{z+0.2}-\\frac{5}{3}\\times \\frac{1}{z+0.8}\\\\-\\frac{0.8}{3}\\times \\frac{1}{z+0.2}+\\frac{0.8}{3}\\times \\frac{1}{z+0.8}&-\\frac{1}{3}\\times \\frac{1}{z+0.2}+\\frac{4}{3}\\times \\frac{1}{z+0.8}\\end{bmatrix}\\end{aligned}$$\n\n由于$u(k)=1$，则$u(z)=\\frac{z}{z-1}$，故$zx(0)+Hu(z)=\\begin{bmatrix}z\\\\-z\\end{bmatrix}+\\begin{bmatrix}\\frac{z}{z-1}\\\\\\frac{z}{z-1}\\end{bmatrix}=\\begin{bmatrix}\\frac{z^2}{z-1}\\\\\\frac{-z^2+2z}{z-1}\\end{bmatrix}$。\n\n那么代入公式（15）有：\n\n$$\\begin{aligned}x(z)&=(zI-G)^{-1}[zx(0)+Hu(z)]\\\\&=\\begin{bmatrix}-\\frac{17}{6}\\times \\frac{z}{z+0.2}+\\frac{22}{9}\\times \\frac{z}{z+0.8}+\\frac{25}{18}\\times \\frac{z}{z-1}\\\\\\frac{3.4}{6}\\times \\frac{z}{z+0.2}-\\frac{17.6}{9}\\times \\frac{z}{z+0.8}+\\frac{7}{18}\\times \\frac{z}{z-1}\\end{bmatrix}\\end{aligned}$$\n\n求z逆变换有：\n\n$$x(k)=\\begin{bmatrix}-\\frac{17}{6}(-0.2)^k+\\frac{22}{9}(-0.8)^k+\\frac{25}{18}\\\\\\frac{3.4}{6}(-0.2)^k-\\frac{17.6}{9}(-0.2)^k+\\frac{7}{18}\\end{bmatrix}$$\n\n;;;\n\n+++\n\n","tags":["状态方程的解","矩阵指数","状态转移矩阵","离散化"],"categories":["现代控制理论"]},{"title":"Realistic fault detection of li-ion battery via dynamical deep learning","url":"/2023/10/21/2023-10-09_Realistic-fault-detection-of-li-ion-battery-via-dynamical-deep-learning/","content":"\n基于动态自编码网络的电池故障检测\n\n<!-- more -->\n\n# Realistic fault detection of li-ion battery via dynamical deep learning\n\nArticle link: [Realistic fault detection of li-ion battery via dynamical deep learning (nature.com)](https://www.nature.com/articles/s41467-023-41226-5.pdf)\n\nlocal link: [Realistic fault detection of li-ion battery via dynamical deep learning](/downloads/2023-10-09_Realistic-fault-detection-of-li-ion-battery-via-dynamical-deep-learning.pdf)\n\nDate: 2023-10-09\n\n## 1.论文主旨\n\n​\t文章针对当前电池动力电池数据的隐私以及成本问题，提出了一种现实可应用的深度学习框架模型（动态自编码异常检测，Dynamical autoencoder for Anomaly Detection, DyAD ），并且公布了347个电动汽车的690000个[锂电池充电片段数据](https://figshare.com/articles/dataset/Realistic_fault_detection_of_Li-ion_battery_via_dynamical_deep_learning_approach/23659323)。\n\n​\t此前研究面临的问题主要有：（1）传统的数据使用方法（温度、电压的方差等）难以辨认异常与正常汽车，数据关联性表现较弱，ROC在0.5左右；（2）数据直接上传容易泄露，用户隐私难以保护；为此，文章提出了一种可大规模使用的定制深度学习框架。\n\n### 1.1.模型建模\n\n​\t不直接上传用户的各项直接数据，而是将用户数据分为系统输入（电流，SOC）和系统响应（电压，温度）两部分，而后在充电站部署编码器，编码器学习系统输入到系统响应的映射关系，编码后的数据上传到云端经过解码后对电动汽车的异常是否做出检测。通过编码-解码架构避免了用户的隐私和厂商的模型细节泄露。\n\n### 1.2.建模细节\n\n​\t问题1：传统的深度学习方法通过研究数据分布来检测异常，对不常见的数据表现出较差的检测效果（如恒流充电数据，可能会被误判为正常电池）。\n\n​\t解决方法：在自编码-解码器中，编码器保持不变，编码器学习系统输入和系统响应的映射关系后得到潜在变量；而解码器不再仅仅利用潜在变量进行解码，而是通过潜在变量以及系统输入进行解码。具体理解如下：编码器学习到系统输入与系统响应的映射关系，那么可以用$y=f(x)$来表示这一过程，其中$y$是系统响应，$x$是系统输入，而编码器正是通过$x$和$y$学习到映射函数$f$。传统方法便是将$f$得到的潜在变量直接做出检测。然而本文构造了一个解码器$f_1$来模型物理系统，通过系统输入$x$重构了系统响应$y_1=f_1(x)$,对比真实响应$y$和重构响应$y_1$得到重构误差损失。其次通过里程进行弱监督从而引入辅助损失，引入KL正则化防止过拟合。三个损失函数共同影响模型的训练过程以及样本的异常情况。\n\n​\t模型包含了三组参数，分别是编码器参数$\\theta$，解码器参数$\\zeta$和多感知机头部参数$\\xi$，前两组参数均通过图卷积神经网络参数化得到。三个损失函数分别定义为：$l_{recon.}$，$l_{reg.}$，$l_{mileage}$。\n\n\n\n## 2.复现\n\n数据集以及代码的连接如下：[Code with datasets](https://disk.pku.edu.cn/#/link/37D733DF405D8D7998B8F57E4487515A)\n\n### 2.1.数据集\n\n数据可视化处理过程代码[下载链接](/downloads/Code_2023-10-09_data-visualization.zip)。\n\n\n\n### 2.2 模型\n\n\n\n\n\n### 2.3 代码细节\n\n从代码角度来看，这个代码写的太牛辣。那我们就来好好欣赏一下这优雅的代码吧。\n\n\n\n\n\n","categories":["论文文献阅读"]},{"title":"02 控制系统的状态空间描述","url":"/2023/10/21/2023-10-21-控制系统的状态空间描述/","content":"\n现代控制理论——02 控制系统的状态空间描述\n\n<!-- more -->\n\n# 控制系统的状态空间描述\n\n## 基本概念\n\n### 系统的状态空间模型\n\n1. 线性时变系统的状态空间模型：系数矩阵与时间无关。\n\n$$\\left\\{ \\begin{matrix} \\dot{x}=Ax+Bu\\\\y=Cx+Du\\\\\\end{matrix}\\right.   \\tag{1}$$\n\n其中，$u=R^r$为输入向量；$y=R^m$为输出向量；$x\\in R^n$为状态向量。$A,B,C,D$为系数矩阵。\n\n2. 线性时不变系统的状态空间模型：系数矩阵与时间有关。\n\n$$\\left\\{ \\begin{matrix} \\dot{x}=A(t)x+B(t)u\\\\y=C(t)x+D(t)u\\\\\\end{matrix}\\right.   \\tag{2}$$\n\n3. 离散线性系统的状态空间模型。\n\n$$\\left\\{ \\begin{matrix} x(k+1)=A(k)x(k)+B(k)u(k)\\\\y(k)=C(k)x(k)+D(k)u(k)\\\\\\end{matrix}\\right.   \\tag{3}$$\n\n### 状态空间描述的特点\n\n1. 系统的状态变量的个数=系统中包含的独立储能元件的个数=系统的阶数。\n2. 在给定的系统中，状态变量的选择不唯一，但是状态变量的个数是一致的。\n3. 基于状态变量选取的不同，同一系统可以用不同的动态方程来描述。\n\n+++primary 证明\n\n对于一个状态方程$\\left\\{ \\begin{matrix} \\dot{x}=Ax+Bu\\\\y=Cx\\\\\\end{matrix}\\right.$，选择非奇异矩阵$P\\in R^{n\\times n}$作为变换阵，有$x=P\\overline{x}$，那么此时状态方程可表示为：\n\n$$\\dot{\\overline{x}}=P^{-1}\\dot{x}=P^{-1}[Ax+Bu]=P^{-1}AP\\overline{x}+P^{-1}Bu=\\overline{A}\\overline{x}+\\overline{B}u   \\tag{4}$$\n\n$$y=Cx=CP\\overline{x}=\\overline{C}\\overline{x}    \\tag{5}$$、】\n\n\n\n4\n\n其中，$\\overline{A}=P^{-1}AP,\\overline{B}=P^{-1}B,\\overline{C}=CP$。\n\n因此当状态变量 $x$ 改变时，一定存在变换矩阵 $P$ 使得状态方程发生变化。\n\n+++\n\n### 状态空间模型的建立步骤\n\n1. 选择状态变量。\n2. 根据物体或其他机理列写微分方程。\n3. 转化为矩阵形式，得到状态空间模型。\n\n### 状态空间表达式的系统方框图\n\n公式（1）是线性时不变系统状态空间表达式的一般形式。其系统方框图可表示如下：\n\n![](2023-10-21-控制系统的状态空间描述/01状态空间系统框图.png)\n\n### 状态空间表达式的状态变量图\n\n1. 状态变量图的基本元素符号\n\n![](2023-10-21-控制系统的状态空间描述/02状态空间变量图.png)\n\n2. 绘制步骤\n\n- **绘制积分器**  积分器数量等于状态变量数目。\n- **由状态方程和输出方程绘制加法器和放大器**\n- **连接各元件**\n\n+++info 例题\n\n;;;id1 例题1\n\n:::info no-icon\n\n设有三阶系统状态空间表达式如下，试绘制其状态变量图。\n\n$$\\left\\{ \\begin{aligned}\\begin{matrix} \\dot{x}_1=x_2\\\\\\dot{x}_2=x_3\\\\\\dot{x}_3=-6x_1-3x_2-2x_3+u\\\\y=x_1+x_2\\end{matrix}\\end{aligned}\\right.$$\n\n:::\n\n其状态变量图可绘制如下：\n\n![](2023-10-21-控制系统的状态空间描述/03状态空间变量图.png)\n\n;;;\n\n+++\n\n## 传递函数和传递函数矩阵\n\n### 单输入单输出系统\n\n对于单输入单输出系统$\\left\\{ \\begin{matrix} \\dot{x}=Ax+Bu\\\\y=Cx+Du\\\\\\end{matrix}\\right.$，在零初始条件下其传递函数可表示为：\n\n$$g(s)=\\frac{Y(s)}{U(s)}=C(sI-A)^{-1}B+D    \\tag{6}$$\n\n+++primary 推导\n\n在系统$\\left\\{ \\begin{matrix} \\dot{x}=Ax+Bu\\\\y=Cx+Du\\\\\\end{matrix}\\right.$ 中，在零初始条件下取拉氏变换有：$\\left\\{ \\begin{matrix} sX(s)=AX(s)+BU(s)\\\\Y(s)=CX(s)+DU(s)\\\\\\end{matrix}\\right.$，整理得到$\\left\\{ \\begin{matrix} X(s)=(sI-A)^{-1}BU(s)\\\\Y(s)=C(sI-A)^{-1}BU(s)+DU(s)\\\\\\end{matrix}\\right.$，故$g(s)=\\frac{Y(s)}{U(s)}=C(sI-A)^{-1}B+D$\n\n+++\n\n在 $D=0$ 时，$g(s)=\\frac{Y(s)}{U(s)}=C(sI-A)^{-1}B=\\frac{Cadj(sI-A)B}{|sI-A|}$，其中$adj(sI-A)$表示矩阵$sI-A$的伴随矩阵。\n\n对比自控原理中传递函数的表达式：$g(s)=\\frac{b_0s^n+b_1s^{n-1}+\\cdots +b_{n-1}s+b_n}{s^n+a_1s^{n-1}+\\cdots +a_{n-1}s+a_n}$，可知：\n\n1. 系统矩阵$A$的特征多项式等同于传递函数的分母多项式。\n2. 传递函数的极点就是系统矩阵$A$的特征值。\n3. **传递函数的不变性**  同一系统的状态空间描述不唯一，但传递函数是唯一的。\n\n+++primary 证明：同一系统的不同状态空间描述具有相同的特征值。\n\n对于同一系统，选择两个不同的状态向量 $x\\in{R^n}$ 和 $\\overline{x}\\in{R^n}$ 分别得到不同的状态空间描述：\n\n$$\\begin{matrix}\\left\\{ \\begin{matrix} \\dot{x}=Ax+Bu\\\\y=Cx+Du\\\\\\end{matrix}\\right.&&&\\left\\{ \\begin{matrix} \\dot{\\overline{x}}=\\overline{A}\\overline{x}+\\overline{B}u\\\\y=\\overline{C}\\overline{x}+\\overline{D}u\\\\\\end{matrix}\\right.\\end{matrix}$$\n\n两种状态变量一定存在着可逆变化关系：$x=P\\overline{x}$，故：\n\n$$\\left\\{ \\begin{matrix} \\dot{x}=Ax+Bu\\\\y=Cx+Du\\\\\\end{matrix}\\right.\\Rightarrow \\left\\{ \\begin{matrix} P\\dot{\\overline{x}}=AP\\overline{x}+Bu\\\\y=CP\\overline{x}+Du\\\\\\end{matrix}\\right.\\Rightarrow \\left\\{ \\begin{matrix} \\dot{\\overline{x}}=P^{-1}AP\\overline{x}+P^{-1}Bu\\\\y=CP\\overline{x}+Du\\\\\\end{matrix}\\right.$$\n\n故 $\\overline{A}=P^{-1}AP$，所以矩阵 $A$ 与矩阵 $\\overline{A}$ 相似，故特征值相同。\n\n:::info\n\n相似矩阵具体相同的特征值\n\n:::\n\n+++\n\n### 多输入多输出系统\n\n对于多输入多输出系统，输入向量$u=[u_1\\cdots u_p]^T$，输出向量$y=[y_1\\dots y_q]^T$。我们把第$i$个输出$y_i$和第$j$个输入$u_j$间的传递函数定义为：$g_{ij}(s)=\\frac{Y_i(s)}{U_j(s)}$。故系统的输入输出关系可表示为：\n\n$$\\begin{bmatrix}Y_1(s)\\\\Y_2(s)\\\\\\vdots\\\\Y_q(s)\\end{bmatrix}=\\begin{bmatrix}g_{11}(s)&g_{12}(s)&\\cdots&g_{1p}(s)\\\\g_{21}(s)&g_{22}(s)&\\cdots&g_{2p}(s)\\\\\\vdots&\\vdots&\\ddots&\\vdots\\\\g_{q1}(s)&g_{q2}(s)&\\cdots&g_{qp}(s)\\end{bmatrix}\\begin{bmatrix}U_1(s)\\\\U_2(s)\\\\\\vdots\\\\U_q(s)\\end{bmatrix}$$\n\n以矩阵的形式表示：$Y(s)=G(s)U(s)$，其中 $G(s)$称为传递函数矩阵。\n\n对于多输入多输出系统$\\left\\{ \\begin{matrix} \\dot{x}=Ax+Bu\\\\y=Cx+Du\\\\\\end{matrix}\\right.$，同样传递函数矩阵为：\n\n$$G(s)=C(sI-A)^{-1}B+D=\\frac{Cadj(sI-A)B+D|sI-A|}{|sI-A|}$$\n\n\n\n+++info 例题\n\n;;;id2 例题1\n\n:::info no-icon\n\n已知系统动态方程为$\\begin{bmatrix}\\dot{x}_1\\\\\\dot{x}_2\\end{bmatrix}=\\begin{bmatrix}0&1\\\\0&-2\\end{bmatrix}\\begin{bmatrix}x_1\\\\x_2\\end{bmatrix}+\\begin{bmatrix}1&0\\\\0&1\\end{bmatrix}\\begin{bmatrix}u_1\\\\u_2\\end{bmatrix}$，$\\begin{bmatrix}y_1\\\\y_2\\end{bmatrix}=\\begin{bmatrix}1&0\\\\0&1\\end{bmatrix}\\begin{bmatrix}x_1\\\\x_2\\end{bmatrix}$，试求系统的传递函数矩阵。\n\n:::\n\n由题，$G(s)=C(sI-A)^{-1}B+D=\\begin{bmatrix}1&0\\\\0&1\\end{bmatrix}\\begin{bmatrix}\\frac{1}{s}&\\frac{1}{s(s+2)}\\\\0&\\frac{1}{s+2}\\end{bmatrix}\\begin{bmatrix}1&0\\\\0&1\\end{bmatrix}=\\begin{bmatrix}\\frac{1}{s}&\\frac{1}{s(s+2)}\\\\0&\\frac{1}{s+2}\\end{bmatrix}$。\n\n;;;\n\n\n\n+++\n\n## 建立状态空间表达式\n\n### 高阶微分方程化为状态空间描述\n\n在单输入单输出线性时不变系统中，系统的输出与输入的关系可用如下高阶微分方程描述：\n\n$$y^{(n)}+a_1y^{(n-1)}+\\cdots +a_{n-1}\\dot{y}+a_ny=b_0u^{(m)}+b_1u^{(m-1)}+\\cdots +b_{m-1}\\dot{u}+b_mu    \\tag{7}$$\n\n其中，$m\\leq n$。根据微分方程右侧是否含有输入函数的导数（即$m$是否等于0）分两种情况讨论。\n\n#### 常微分方程中不含输入函数的导数\n\n若常微分方程中不含有输入函数的导数，即：$y^{(n)}+a_1y^{(n-1)}+\\cdots +a_{n-1}\\dot{y}+a_ny=b_mu$。\n\n那么可以选取状态变量：\n\n$$x_1=\\frac{1}{b_m}y,\\quad x_2=\\frac{1}{b_m}\\dot{y},\\quad \\cdots \\quad  x_n=\\frac{1}{b_m}y^{(n-1)}      \\tag{8}$$\n\n那么就可以得到状态方程（前$n-1$条通过求导获得，最后一条通过原微分方程获得）：\n\n$$\\left\\{ \\begin{matrix} \\dot{x}_1=x_2\\\\\\dot{x}_2=x_3\\\\\\vdots\\\\\\dot{x}_n=y^{(n)}=-a_nx_1-a_{n-1}x_2-\\cdots -a_1x_n+u\\end{matrix}\\right.$$\n\n输出方程为：$y=b_mx_1$。\n\n以矩阵的形式可表示为：\n\n$$\\dot{x}=\\begin{bmatrix}0&1&\\cdots &0\\\\\\vdots&\\vdots&\\ddots&\\vdots\\\\0&0&\\cdots&1\\\\-a_n&-a_{n-1}&\\cdots&-a_1\\end{bmatrix}x+\\begin{bmatrix}0\\\\0\\\\\\vdots\\\\1\\end{bmatrix}u    \\tag{9}$$\n\n$$y=\\begin{bmatrix}1&0&\\cdots&0\\end{bmatrix}x     \\tag{10}$$\n\n+++primary 能控标准型\n\n形如公式（9）的状态空间模型称为能控标准型。即$A$与$b$可用以下形式表示：\n\n$$A=\\begin{bmatrix}0&1&\\cdots &0\\\\\\vdots&\\vdots&\\ddots&\\vdots\\\\0&0&\\cdots&1\\\\-a_n&-a_{n-1}&\\cdots&-a_1\\end{bmatrix},\\quad b=\\begin{bmatrix}0\\\\0\\\\\\vdots\\\\1\\end{bmatrix}$$\n\n+++\n\n+++info 例题\n\n;;;id3 例题1\n\n:::info no-icon\n\n设系统的运动方程为：$y^{(3)}+5\\ddot{y}+8\\dot{y}+6y=3u$，试求其状态空间表达式。\n\n:::\n\n选取状态变量$x_1=y,\\quad x_2=\\dot{y},\\quad x_3=\\ddot{y}$，则有状态方程：\n\n$$\\left\\{ \\begin{matrix} \\dot{x}_1=x_2\\\\\\dot{x}_2=x_3\\\\\\dot{x}_3=y^{(3)}=-6x_1-8x_2 -5x_3+3u\\end{matrix}\\right.$$\n\n输出方程为$y=x_1$。\n\n故状态空间表达式为：\n\n$$\\dot{x}=\\begin{bmatrix}0&1 &0\\\\0&0&1\\\\-6&-8&-5\\end{bmatrix}x+\\begin{bmatrix}0\\\\0\\\\3\\end{bmatrix}u $$\n\n$$y=\\begin{bmatrix}1&0&0\\end{bmatrix}x$$\n\n;;;\n\n+++\n\n\n\n#### 常微分方程中含有输入函数的导数\n\n若常微分方程中含有输入函数的导数，即：$y^{(n)}+a_1y^{(n-1)}+\\cdots +a_{n-1}\\dot{y}+a_ny=b_0u^{(m)}+b_1u^{(m-1)}+\\cdots +b_{m-1}\\dot{u}+b_mu$。\n\n选择状态变量：\n\n$$\\left\\{ \\begin{matrix} x_1=y-\\beta_0u\\\\x_2=\\dot{x}_1-\\beta_1u=\\dot{y}-\\beta_0\\dot{u}-\\beta_1u\\\\x_3=\\dot{x}_2-\\beta_2u=\\ddot{y}-\\beta_0\\ddot{u}-\\beta_1\\dot{u}-\\beta_2u\\\\\\vdots\\\\x_n=\\dot{x}_{n-1}-\\beta_{n-1}u=y^{(n)}-\\beta_0u^{(n-1)}-\\beta_1u^{(n-2)}-\\cdots -\\beta_{n-2}\\dot{u}-\\beta_{n-1}u\\end{matrix}\\right.   \\tag{11}$$\n\n其中参数$\\beta_0,\\beta_1,\\cdots,\\beta_n$由下式决定：\n\n$$\\begin{bmatrix}\\beta_0\\\\\\beta_1\\\\\\beta_2\\\\\\vdots\\\\\\beta_n\\end{bmatrix}=\\begin{bmatrix}1&0&\\cdots&0&0\\\\a_1&1&\\cdots&0&0\\\\\\vdots&\\vdots&\\ddots&\\vdots&\\vdots\\\\a_{n-1}&a_{n-2}&\\cdots&1&0\\\\a_n&a_{n-1}&\\cdots&a_1&1\\end{bmatrix}\\begin{bmatrix}b_0\\\\b_1\\\\b_2\\\\\\vdots\\\\b_n\\end{bmatrix}    \\tag{12}$$\n\n由（11）可得到状态方程：$\\left\\{ \\begin{matrix} \\dot{x}_1=x_2+\\beta_1u\\\\\\dot{x}_2=x_3+\\beta_2u\\\\\\vdots\\\\\\dot{x}_{n-1}=x_n+\\beta_{n-1}u\\\\\\begin{aligned}\\dot{x}_n&=y^{(n)}-\\beta_0u^{(u)}-\\beta_1u^{(n-1)}-\\cdots -\\beta_{n-2}\\ddot{u}-\\beta_{n-1}\\dot{u}\\\\&=-a_nx_1-a_{n-1}x_2-\\cdots -a_1x_n+\\beta_nu\\end{aligned} \\end{matrix}\\right.$。\n\n+++info 最后一个等式怎么化简得到的？\n\n+++\n\n因此，状态空间表达式为：\n\n$$\\dot{x}=\\begin{bmatrix}0&1&0&\\cdots&0\\\\0&0&1&\\cdots&0\\\\\\vdots&\\vdots&\\vdots&\\ddots&\\vdots\\\\0&0&0&\\cdots&1\\\\-a_n&-a_{n-1}&-a_{n-2}&\\cdots&-a_1\\end{bmatrix}x+\\begin{bmatrix}\\beta_0\\\\\\beta_1\\\\\\vdots\\\\\\beta_{n-1}\\\\\\beta_n\\end{bmatrix}u   \\tag{13}$$\n\n$$y=[1\\quad 0\\quad \\cdots\\quad 0 ]x+\\beta_0u$$\n\n\n\n### 通过传递函数建立状态空间描述\n\n后续的方法我们讨论的传递函数的分子多项式次数均小于分母多项式次数。因为对于实际系统，分子多项式次数总是小于或等于分母多项式次数，在次数相等时可以通过化简的方法转化为分子多项式次数小于分母多项式次数。\n\n+++primary 推导\n\n若传递函数的分子多项式次数等于分母多项式次数，即\n\n$$g(s)=\\frac{b_0s^m+b_1s^{m-1}+\\cdots +b_{m-1}s+b_m}{s^n+a_1s^{n-1}+\\cdots +a_{n-1}s+a_n},m=n$$\n\n它总是可以化简为：\n\n$$g(s)=\\frac{b_1s^{m-1}+\\cdots +b_{m-1}s+b_m}{s^n+a_1s^{n-1}+\\cdots +a_{n-1}s+a_n}=\\overline{g}(s)+b_0,m=n$$\n\n其中 $\\overline{g}(s)$ 为分子多项式次数小于分母多项式次数的传递函数，$b_0$ 为常数，整体视为两者的并联结构。\n\n+++\n\n#### 直接分解法\n\n对于$n$阶传递函数：$g(s)=\\frac{Y(s)}{U(s)}=\\frac{b_1s^{n-1}+\\cdots +b_{n-1}s+b_n}{s^n+a_1s^{n-1}+\\cdots +a_{n-1}s+a_n}$。\n\n同时除以$s^n$有：$Y(s)=U(s)\\frac{b_1s^{-1}+\\cdots +b_{n-1}s^{-(n-1)}+b_ns^{-n}}{1+a_1s^{-1}+\\cdots +a_{n-1}s^{-(n-1)}+a_ns^{-n}}$。\n\n令中间变量$E(s)=U(s)\\frac{1}{1+a_1s^{-1}+\\cdots +a_{n-1}s^{-(n-1)}+a_ns^{-n}}$，即$E(s)=U(s)-a_1s^{-1}E(s)-\\cdots -a_{n-1}s^{-(n-1)}E(s)-a_ns^{-n}E(s)$。\n\n则输入$U(s)$、中间变量$E(s)$和输出$Y(s)$的关系流程图如下：\n\n![](2023-10-21-控制系统的状态空间描述/04直接分解法.png)\n\n则$Y(s)=b_1s^{-1}E(s)+b_2s^{-2}E(s)+\\cdots +b_{n-1}s^{-(n-1)}E(s)+b_ns^{-n}E(s)$。\n\n令$x_n,x_{n-1},\\cdots,x_1$为$s^{-1}E(s),s^{-2}E(s),\\cdots,s^{-n}E(s)$的拉氏逆变换，那么就可以绘制状态变量图并得到系统的状态空间表达式（能控标准型）。\n\n![](2023-10-21-控制系统的状态空间描述/05直接分解法.png)\n\n$$\\dot{x}=\\begin{bmatrix}0&1&\\cdots&0\\\\\\vdots&\\vdots&\\ddots&\\vdots\\\\0&0&\\cdots&1\\\\-a_n&-a_{n-1}&\\cdots&-a_1\\end{bmatrix}x+\\begin{bmatrix}0\\\\\\vdots\\\\0\\\\1\\end{bmatrix}u   \\tag{14}$$\n\n$$y=[b_n\\quad b_{n-1}\\quad \\cdots\\quad b_1 ]x$$\n\n+++info 补充\n\n如果该$n$阶系统传递函数的分子多项式次数等于分母多项式次数（在[通过传递函数建立状态空间描述](#通过传递函数建立状态空间描述)中讨论过该情况）即 $g(s)=\\frac{b_1s^{m-1}+\\cdots +b_{m-1}s+b_m}{s^n+a_1s^{n-1}+\\cdots +a_{n-1}s+a_n}=\\overline{g}(s)+b_0,m=n$，那么先算出 $\\overline{g}(s)$ 后在输入到输出之间直接连接一个比例环节即可。\n\n+++\n\n#### 串联分解法\n\n该方法适用于传递函数可分解为因式相乘的形式，即$g(s)=\\frac{b_1(s-z_1)(s-z_2)\\cdots(s-z_{n-1})}{(s-p_1)(s-p_2)\\dots(s-p_n)}$。\n\n以一个三阶系统进行说明：$g(s)=\\frac{b_1(s-z_1)(s-z_2)}{(s-p_1)(s-p_2)(s-p_3)}$。\n\n上式中可分为两种：$\\frac{1}{s-p}=\\frac{\\frac{1}{s}}{1-\\frac{1}{s}p}$，$\\frac{s-z}{s-p}=1+\\frac{p-z}{s-p}=1+(p-z)\\frac{\\frac{1}{s}}{1-\\frac{1}{s}p}$。\n\n因此系统可视为三个一阶系统串联而成，结构图如下：\n\n![](2023-10-21-控制系统的状态空间描述/06串联分解法.png)\n\n取每个积分器的输出为状态变量，那么可以得到状态空间表达式如下：\n\n$$\\left\\{ \\begin{matrix} \\dot{x}_1=p_1x_1+b_1u\\\\\\dot{x}_2=x_1+p_2x_2\\\\\\dot{x}_3=x_1+(p_2-z_2)x_2+p_3x_3\\\\y=x_1+(p_2-z_2)x_2+(p_3-z_3)x_3\\end{matrix}\\right.$$\n\n写成向量的形式为：\n\n$$\\dot{x}=\\begin{bmatrix}p_1&0&0\\\\1&p_2&0\\\\1&p_2-z_2&p_3\\end{bmatrix}x+\\begin{bmatrix}b_1\\\\0\\\\0\\end{bmatrix}u   \\tag{15}$$\n\n$$y=[1\\quad p_2-z_2\\quad \\quad p_3-z_3 ]x$$\n\n#### 并联分解法\n\n1. 若传递函数的极点两两相异。\n\n传递函数极点两两相异，则$g(s)=\\frac{N(s)}{(s-p_1)(s-p_2)\\dots(s-p_n)}=\\frac{c_1}{s-p_1}+\\frac{c_2}{s-p_2}+\\cdots+\\frac{c_n}{s-p_n}$，其中$c_i=\\lim_{s\\to p_i}(s-p_i)g(s)$。\n\n选取状态变量 $x_i(s)=\\frac{1}{s-p_i}U(s)$，即 $sx_i(s)=p_ix_i(s)+u(s)$，做拉氏逆变换有：\n\n$$\\dot{x}_i(t)=p_ix_i(t)+u(t)$$\n\n输出 $y(s)=g(s)u(s)=\\sum_{i=1}^n\\frac{c_i}{s-p_i}u_i(s)=\\sum_{i=1}^nc_ix_i(s)$，做拉氏逆变换有：\n\n$$y(t)=\\sum_{i=1}^nc_ix_i(t)$$\n\n写成向量的形式为：\n\n$$\\dot{x}=\\begin{bmatrix}p_1&0&\\cdots&0\\\\0&p_2&\\cdots&0\\\\\\vdots&\\vdots&\\ddots&0\\\\0&0&\\cdots&p_n\\end{bmatrix}x+\\begin{bmatrix}1\\\\1\\\\\\vdots\\\\1\\end{bmatrix}u   \\tag{16}$$\n\n$$y=[c_1\\quad c_2\\quad\\cdots \\quad c_n]x$$\n\n+++info 上式为对角标准型\n\n对于系统 $\\left\\{ \\begin{matrix} \\dot{x}=Ax+Bu\\\\y=Cx\\\\\\end{matrix}\\right.$ ，若$A$为对角阵且各元素为传递函数的极点，$B$为全1矩阵，$C$内各元素为对应极点的留数，那么称该矩阵表达式为对角标准型。\n\n+++\n\n\n\n2. 若传递函数具有重极点。\n\n先考虑只有一个重极点和若干个单极点，重数为$r$，$g(s)=\\frac{c_{11}}{(s-p_1)^{r}}+\\frac{c_{12}}{(s-p_1)^{r-1}}+\\cdots+\\frac{c_{1r}}{(s-p_1)^{}}+\\frac{c_{r+1}}{s-p_{r+1}}+\\cdots+\\frac{c_n}{s-p_n}$，其中对于单极点仍有：$c_i=\\lim_{s\\to p_i}(s-p_i)g(s)$，而对于重极点则有：$c_1j=\\frac{1}{(j-1)!}\\lim_{s\\to p_1}\\frac{d^{j-1}}{ds^{j-1}}[(s-p_1)g(s)],\\quad j=1,2,\\cdots,r$。\n\n选取状态变量，化简求拉氏逆变换得到状态方程：\n\n$$\\begin{matrix}\\left\\{ \\begin{matrix} x_1(s)=\\frac{U(s)}{(s-p_1)^{r}}\\\\x_2(s)=\\frac{U(s)}{(s-p_1)^{r-1}}\\\\\\vdots\\\\x_r(s)=\\frac{U(s)}{(s-p_1)}\\\\x_{r+1}(s)=\\frac{U(s)}{s-p_{r+1}}\\\\\\vdots\\\\x_{1}(s)=\\frac{U(s)}{s-p_{n}}\\end{matrix}\\right.\\quad\\stackrel{}{\\Rightarrow}\\quad\\left\\{ \\begin{matrix} x_1(s)=\\frac{1}{s-p_1}x_2(s)\\\\x_2(s)=\\frac{1}{s-p_1}x_3(s)\\\\\\vdots\\\\x_r(s)=\\frac{1}{s-p_1}U(s)\\\\x_{r+1}(s)=\\frac{1}{s-p_{r+1}}U(s)\\\\\\vdots\\\\x_n(s)=\\frac{1}{s-p_n}U(s)\\end{matrix}\\right.\\quad\\stackrel{L^{-1}}{\\Rightarrow}\\quad \\left\\{ \\begin{matrix} \\dot{x}_1(t)=p_1x_1+x_2\\\\\\dot{x}_2(t)=p_1x_2+x_3\\\\\\vdots\\\\\\dot{x}_r(t)=p_1x_r+u\\\\\\dot{x}_{r+1}(t)=p_{r+1}x_{x+1}+u\\\\\\vdots\\\\\\dot{x}_n(t)=p_nx_n+u\\end{matrix}\\right.     \\end{matrix}$$\n\n输出方程的拉氏变换为：\n\n$$Y(s)=c_{11}x_1(s)+c_{12}x_2(s)+\\cdots+c_{1r}x_r(s)+c_{r+1}x_{r+1}(s)+\\cdots+c_{nx_n(s)}$$\n\n求拉氏逆变换有：\n\n$$y(t)=c_{11}x_1(t)+c_{12}x_2(t)+\\cdots+c_{1r}x_r(t)+c_{r+1}x_{r+1}(t)+\\cdots+c_{nx_n(t)}$$\n\n得到状态空间表达式为：\n\n$$\\begin{bmatrix}\\dot{x_1}\\\\\\dot{x_2}\\\\\\vdots\\\\\\dot{x_r}\\\\\\dot{x_{r+1}}\\\\\\vdots\\\\\\dot{x_n}\\end{bmatrix}=\\begin{bmatrix}p_1&1&&&&&\\\\&p_1&\\ddots&&&\\bold{0}&\\\\&&\\ddots&1\\\\&&&p_1\\\\&&&&p_{r+1}&&\\\\&\\bold{0}&&&&\\ddots&\\\\&&&&&&p_n\\end{bmatrix}\\begin{bmatrix}x_1\\\\x_2\\\\\\vdots\\\\x_r\\\\x_{r+1}\\\\\\vdots\\\\x_n\\end{bmatrix}+\\begin{bmatrix}0\\\\0\\\\\\vdots\\\\1\\\\1\\\\\\vdots\\\\1\\end{bmatrix}u   \\tag{17}$$\n\n$$y=\\begin{bmatrix}c_{11}& c_{12}&\\cdots& c_{1r}&c_{r+1}&\\cdots&c_{n}\\end{bmatrix}\\begin{bmatrix}x_1\\\\x_2\\\\\\vdots\\\\x_r\\\\x_{r+1}\\\\\\vdots\\\\x_n\\end{bmatrix}$$\n\n对于重根部分，矩阵$A$中对应的是若尔当块，$B$中为一个只有末行是1其余行为0的矩阵，$C$中对应元素为$r$重极点对应的留数。而对于其中的单极点部分，形式与[无重根](#并联分解法)时一致。\n\n拓展到具有多个重极点的情况。矩阵$A$中在对角上补充对应的若尔当块，$B$中对应补充只有末行是1其余行为0的矩阵，$C$中补充对应元素为$r$重极点对应的留数。\n\n## 组合系统\n\n### 并联联结\n\n在$n$个子系统并联的并联系统中，组合系统的传递函数矩阵等于子系统传递函数矩阵的和。\n\n$$G(s)=G_1(s)+G_2(s)+\\cdots+G_n(s)   \\tag{18}$$\n\n### 串联联结\n\n在$n$个子系统串联的串联系统中，组合系统的传递函数矩阵等于子系统传递函数矩阵的积。\n\n$$G(s)=G_n(s)\\cdots G_2(s)G_1(s)   \\tag{19}$$\n\n:::info \n\n注：子系统传递函数矩阵的积遵循左乘原则。\n\n:::\n\n### 反馈联结\n\n对于系统 $G_1(s)$，若添加反馈环节（动态反馈$G_2(s)$或常数反馈$H$），则可得到组合系统的传递函数矩阵：\n\n1. **动态反馈** 反馈子系统为动态系统$G_2(s)$。\n\n组合系统的传递函数矩阵为：\n\n$$G(s)=[I+G_2(s)G_1(s)]^{-1}G_1(s)   \\tag{20}$$\n\n2. **常数反馈**  反馈环节为常数矩阵$H$。\n\n组合系统的传递函数矩阵为：\n\n$$G(s)=[I+HG_1(s)]^{-1}G_1(s)   \\tag{21}$$\n\n## 线性变换\n\n### 系统状态的线性变换\n\n对于一个状态方程$\\left\\{ \\begin{matrix} \\dot{x}=Ax+Bu\\\\y=Cx+Du\\\\\\end{matrix}\\right.$，选择非奇异矩阵$P\\in R^{n\\times n}$作为变换阵，有$x=P\\overline{x}$，那么此时状态方程可表示为：\n\n$$\\dot{\\overline{x}}=P^{-1}\\dot{x}=P^{-1}[Ax+Bu]=P^{-1}AP\\overline{x}+P^{-1}Bu=\\overline{A}\\overline{x}+\\overline{B}u   \\tag{22}$$\n\n$$y=Cx=CP\\overline{x}=\\overline{C}\\overline{x}    \\tag{23}$$\n\n其中，$\\overline{A}=P^{-1}AP,\\overline{B}=P^{-1}B,\\overline{C}=CP,\\overline{D}=D$。\n\n:::info\n\n该方法通常用于将非对角阵$A$转化为对角阵$\\overline{A}$，从而实现状态变量的解耦。\n\n:::\n\n:::danger no-icon\n\n线性定常系统的系统矩阵A的特征值是表征系统的动力学特性的重要参量。系统的状态方程可通过适当的线性非奇异变换化为由特征值表征的标准形，对分析系统的结构特性非常直观。 \n\n1. 特征值互异时，标准形为对角阵。\n2. 特征值非互异时，标准形一般为约当阵。 \n\n:::\n\n### 状态方程转化为对角标准型\n\n### 状态方程转化为若尔当标准型\n\n### 状态变换后特征值及传递函数矩阵的不变形\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["状态空间描述"],"categories":["现代控制理论"]}]